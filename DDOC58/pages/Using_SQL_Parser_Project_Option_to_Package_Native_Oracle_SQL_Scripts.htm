<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Using SQL Parser Project Option to Package Native Oracle SQL Scripts</h1>
        <p>SQL Parser for Oracle allows you to replace the CONVERT package method for DDL changes with the lighter weight, more consistent DIRECT package method without sacrificing the ability to simulate and run rules against DDL changes.</p>
        <ul>
            <li><strong>Much Faster Packaging of DDL Changes</strong> – The CONVERT package method requires multiple time consuming Datical snapshots to generate XML change sets from a SQL script and a potentially time consuming database restore to test the deployment of those changes.&#160; SQL Parser automatically detects and models changes in a SQL script for use by rules and simulation capabilities in a fraction of the time</li>
            <li><strong>More Accurate and Consistent Deployment Content – </strong>The CONVERT package method will convert your SQL statements in your scripts to XML changesets in the Datical changelog.&#160; The XML changesets are used by the change management simulator and rules engine, then used to deploy changes to downstream environments&#160; by generating new SQL statements from the XML Change Sets.&#160; The multiple translations can sometimes lead to deviations from the original intent and content of the script. The SQL Parser allows Datical to execute SQL scripts as is, without tranforming them to and from an XML model.</li>
            <li><strong>Expanded Ability to Forecast</strong> - Datical can forecast DML and SQLPlus scripts.&#160;&#160;</li>
        </ul>
        <h1 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-ConfiguringProjectstoUseSQLParser">Configuring Projects to Use SQL Parser</h1>
        <p>When you enable the SQL Parser option for a project, then during packaging native SQL files are parsed and refactored into an XML object model, similar to changesets produced by packaging DDL.&#160;</p>
        <p>You control whether to use the SQL Parser in two places:</p>
        <ul>
            <li>
                <p class="auto-cursor-target">In the GUI, set <strong>Enable SQL Parsing of SQL Scripts for Forecast &amp; Deployment (Oracle Only</strong>) to true. It is in the <strong>Deployment Settings</strong> section of the project settings (<strong>Settings</strong> tab). <br /><br />The setting is represented in the&#160;&#160;<code>datical.project</code> file by <code>enableSqlParser=true</code>. &#160;</p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">enableSqlParser=[true | false]</pre>
                    </div>
                </div>
            </li>
            <li>
                <p class="auto-cursor-target"><code>metadata.properties</code> file - if there are folders in your <code>sql_code</code> hierarchy where you <strong>do not</strong> want to use SQL Parser, you can set <code>disableSqlParser=true</code>in the <code>metadata.properties</code> file in that folder.&#160;This setting can be helpful if you have SQL scripts that are difficult or impossible to parse. When parsing is turned off, a different process is used to produce and forecast the changesets.&#160;</p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">disableSqlParser=[true | false]</pre>
                    </div>
                </div>
            </li>
        </ul>
        <h2 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-ConsiderationsWhenEnablingSQLParserforExistingProjectsandSQLCodeRepositories">Considerations When Enabling SQL Parser for Existing Projects and SQL Code Repositories</h2>
        <p>SQL Parser provides the most benefit when the <code>DIRECT</code> package method is used to replace the <code>convert</code> package method for DDL and DML.&#160;</p>
        <p>To configure your existing SQL code repository to enable this, use the <code>metadata.properties</code> file as described below. The usage is different depending on whether you are using fixed folders (the default for Datical DB) or flexible folders.&#160;</p>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-FixedFolderNames">Fixed Folder Names</h3>
        <h4 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-SQLParserEffectonsql_directFolder">SQL Parser Effect on <code>sql_direct</code> Folder</h4>
        <p>When the SQL Parser option is in effect, it provides faster processing for DDL and DML statements in scripts placed in the <code>sql_direct</code> folder.&#160;</p>
        <h4 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-UsingSQLParsertoOverrideBehaviorforOtherFolders">Using SQL Parser to Override Behavior for Other Folders</h4>
        <p>When you use fixed folders as described in&#160;<a href="Fixed_Folder_Names.htm">Fixed Folder Names</a>,&#160;&#160;packaging behavior is determined by the name of the top level directory names. Normally the <code>ddl</code> and <code>data_dml</code> folders use the CONVERT package method.&#160;</p>
        <p>To use the SQL parser, add a <code>metadata.properties</code> file to the following&#160;folders.</p>
        <ul>
            <li><code>ddl</code>
            </li>
            <li><code>data_dml</code>
            </li>
        </ul>
        <p>In the <code>metadata.properties</code> file, specify the the DIRECT package method.&#160;</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>metadata.properties setting for the 'direct' workflow</b>
            </div>
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">packagemethod=direct</pre>
            </div>
        </div>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-FlexibleFolderNames">Flexible Folder Names</h3>
        <p>When you use flexible folders as described in <a href="Flexible_Folder_Names.htm">Flexible Folder Names</a>, packaging behavior is determined by the <strong>packagemethod</strong> property set in a&#160;<code>metadata.properties</code> file. A <code>metadata.properties</code> file is placed in SQL script directories to specify packaging behavior.</p>
        <p>Normally DDL and DML are identified and processed using the CONVERT package method. The packager recognizes the following SQLFileTypes during processing.&#160;</p>
        <ul>
            <li><strong>ddl</strong>&#160;</li>
            <li><strong>data_dml</strong>&#160;</li>
        </ul>
        <p class="auto-cursor-target">To enable parsing, specify the DIRECT package method for the file types in the folder. Add a <code>metadata.properties</code> file to the top folders that contain DDL in your repository. Include the packagemethod option.&#160;</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>metadata.properties setting for the 'direct' workflow</b>
            </div>
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">packagemethod=direct</pre>
            </div>
        </div>
        <h2 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-ConsiderationsforStoredLogic">Considerations for Stored Logic</h2>
        <p>You should continue to use fixed folders or flexible folders to <em>segregate</em> stored logic SQL scripts by type whenever possible. They are processed as rerunnable files.</p>
        <p>See&#160;<a href="Overview_of_Packaging.htm">Overview of Packaging</a> for a discussion of rerunnable and non-rerunnable files.&#160;</p>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-NormalSegregationofStoredLogicScripts">Normal Segregation of Stored Logic Scripts</h3>
        <p>During packaging, stored logic scripts are treated as RERUNNABLE, as follows:</p>
        <ul>
            <li>Files are updated in place.&#160;</li>
            <li>Versions are applied when the file is updates.</li>
            <li>The files are not archived.&#160;</li>
        </ul>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-StoredLogicandsql_direct">Stored Logic and sql_direct&#160;</h3>
        <p>If you do place stored logic in SQL scripts in the <code>sql_direct</code> fixed folder (or in a flexible folder with SQLFileType=sql_direct applied), then the stored logic scripts are treated as NONRERUNNABLE scripts:</p>
        <ul>
            <li>Files are archived and removed after processing.&#160;</li>
        </ul>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-ImpactonDeveloperWorkflows">Impact on Developer Workflows</h3>
        <p>The difference between processing affects how you can use developer workflows. See&#160;<a href="https://datical-cs.atlassian.net/wiki/spaces/DDD/pages/80445460">/wiki/spaces/DDD/pages/80445460</a>.&#160;</p>
        <p>
            <br />
        </p>
        <h2 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-FilesArchivedAfterOperations">Files Archived After Operations</h2>
        <p>When SQL parsing is enabled, a changelog is produced after the following operations:</p>
        <ul>
            <li>Forecast</li>
            <li>Deploy</li>
        </ul>
        <p>The file contains all changes parsed from the SQL scripts in the order they were processed. It can be used for debugging.&#160;</p>
        <p>Files are stored in the project in the following directory:</p>
        <p><code>Reports/&lt;year&gt;/&lt;date&gt;/&lt;dbdef&gt;/[forecast | deploy]/parser_output/&lt;filename&gt;_&lt;timestamp&gt;.xml</code>
        </p>
        <h1 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-SupportedDatabases">Supported Databases</h1>
        <p>Using SQL Parser is available only for the following databases. See each section for additional information about object support and limitations.&#160;</p>
        <ul>
            <li>Oracle Database</li>
        </ul>
        <h2 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-OracleDatabase">Oracle Database</h2>
        <h3 id="UsingSQLParserProjectOptiontoPackageNativeOracleSQLScripts-UnsupportedSQLStatements">Unsupported SQL Statements</h3>
        <ul style="text-align: left;">
            <li>CREATE PROCEDURE</li>
            <li>CREATE FUNCTION</li>
            <li>CREATE TRIGGER</li>
            <li>CREATE VIEW</li>
            <li>CREATE PACKAGE</li>
            <li>CREATE PACKAGE BODY</li>
            <li>CREATE TYPE</li>
            <li>CREATE TYPE BODY</li>
            <li>CREATE JAVA</li>
        </ul>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>