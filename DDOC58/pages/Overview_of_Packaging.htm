<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Overview of Packaging</h1>
        <p>Packaging is the first step in the deployment workflow. Packaging is the process of getting SQL scripts refactored and deployed to the first database in the project workflow. By convention the first database is the REF database.&#160;</p>
        <p>The refactoring performed depends on the type of change:</p>
        <ul>
            <li>Non-rerunnable changes - SQL scripts that meant to be run only once considered transient. Changes are refactored into XML files. The object model enables easy forecasting of the impact of the change.<ul><li><strong style="margin-left: 0.0px;">Example</strong>: most DDL files, some DML files. Creating tables, adding columns, dropping indexes, inserting records, etc..</li></ul></li>
            <li>Rerunnable changes - SQL scripts that perform other functions are managed as SQL scripts. A native SQL interpreter runs them from within the packager to make the changes.<ul><li><strong style="margin-left: 0.0px;">Example</strong>: Creating stored-logic objects, like packages, procedures, functions, and views.&#160;</li><li><strong>Example</strong>: Native SQL scripts that must run through an interpreter provided with the database (SQL*Plus for Oracle, SQLCMD for SQL Server)</li></ul></li>
        </ul>
        <p>During deployment, the scripts are checked for rules compliance. If they pass, the changes are deployed to the REF database.&#160;</p>
        <h1 id="OverviewofPackaging-PackagingTool">Packaging Tool&#160;</h1>
        <p>The Deployment Packager can be run from the CLI or the GUI. You provide a configuration file for the project that specifies the options to use during packaging. See&#160;<a href="Using_the_required_deployPackager_properties_file.htm">Using the required deployPackager.properties file</a>.&#160;</p>
        <h1 id="OverviewofPackaging-PackagingSources">Packaging Sources</h1>
        <p><span style="color: rgb(51,51,51);">You can package SQL scripts from the following sources.&#160;</span>
        </p>
        <ul>
            <li><strong><strong>Source Code Management (SCM) Repository</strong></strong>: Place SQL scripts in a defined location in a source code repository.&#160;<span style="color: rgb(51,51,51);">C</span><span style="color: rgb(51,51,51);"><span style="color: rgb(51,51,51);">onfigure a properties file with information about source code management repositories where SQL scripts and the Datical DB Project reside. During processing, the Deployment Packager reads the properties file and gets the SQL scripts from the SCM.&#160;</span></span></li>
            <li><strong>Manifest File</strong><span style="color: rgb(51,51,51);">: D<span style="color: rgb(51,51,51);">efine a manifest file to identify the SQL scripts to be processed and provide metadata about the scripts.&#160; The manifest file is passed to the Deployment Packager.</span></span>
            </li>
        </ul>
        <h1 id="OverviewofPackaging-Workflow">Workflow</h1>
        <p>Deployment Packager uses the following workflow for changes checked into an SCM. When packaging with a manifest file, the manifest file specifies the files to package (steps 1 and 2 below).&#160;</p>
        <ol style="margin-left: 0.0px;">
            <li>Prereq:<ol><li style="margin-left: 0.0px;">Get Project - Check out Datical project from the SCM (DDB SCM)</li><li style="margin-left: 0.0px;">Get Scripts - Check out SQL scripts from the SCM (SQL SCM)</li></ol></li>
            <li style="margin-left: 0.0px;">Determine list of scripts to package from SQL SCM - This is determined by what changes have been introduced to SQL SCM since last successful packaging job (If this is the first packaging job then all scripts will be packaged)</li>
            <li>Check Scripts for Rules Compliance - Run validation routines, which are a combination of Datical-provided rules and user-defined rules.&#160; Rules ensure that changes are valid and compliant with organizational standards and best practices.</li>
            <li>Back Up REF Database - If the changes fail, the database is restored to its original state from this backup.&#160;</li>
            <li>Validate - Check the files against built-in Datical rules and rules provided for the project.&#160; End process if validation fails. (Note: rules validation can be set to fail according to different criteria).&#160;</li>
            <li>Process Files<ul><li>For scripts that use the convert method (If using Fixed Folders these are scripts packaged in /ddl folder only.&#160; If using Flexible Folders these are scripts that use packageMethod CONVERT.)<ul><li>Snapshot1 the existing schema of the REF database</li><li>Convert transient files (like DDL) to an XML object model (changelog) (basic: take DDL, apply to DB using native tools, snapshot again, compare snapshots. The compare produces the object model.)</li><li>Snapshot2 the schema to record the changes produced by processing the files.&#160;</li><li>Save a copy of the changelog as it was updated by the changes.&#160;</li></ul></li><li>For scripts that use all other methods (If using Fixed folders these are scripts packaged in all other folders such as /data_dml, /function, /sql_direct, /ssis, etc.&#160; If using Flexible Folders these are scripts that use packageMethod STOREDLOGIC, SSIS, SQLFILE, DIRECT, or DATA_DML)<ul><li>Prepare non-transient files to be run. (changeset includes a deployPackagerNative call–some analysis of SQL and sanitization)</li></ul></li><li><em>(only needed if scripts are packaged from /ddl folder or packageMethod CONVERT)</em> End process and restore the REF database from backup in preparation for Forecast</li></ul></li>
            <li>Forecast Changes - Simulate applying the changes. [ Apply changes represented in the object model (changelog) to an in-memory copy of Snapshot1 ].&#160; &#160;Produce a forecast report.&#160;<ul><li style="margin-left: 0.0px;">Proceed if forecasting succeeds.&#160;</li><li>End process and restore the REF database from backup if an error is encountered.</li></ul></li>
            <li>Deploy Changes to the REF Database.</li>
            <li>(optional) If there are rollbacks, run the rollbacks for the scripts that were packaged, if validateRollback is enabled.<ul><li>Redeploy Changes to the REF Database.</li></ul></li>
            <li>Move non-rerunnable SQL Files to the archive</li>
            <li>Commit Changes to SCM repos</li>
        </ol>
        <p>
            <br />
        </p>
        <p>The following diagram illustrates the workflow.</p>
        <p><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="262" width="672" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/795838905/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1553062036920&amp;cacheVersion=1&amp;api=v2&amp;width=672&amp;height=261" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/795838905/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1553062036920&amp;cacheVersion=1&amp;api=v2&amp;width=900&amp;height=350 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/795838905/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1553062036920&amp;cacheVersion=1&amp;api=v2&amp;width=672&amp;height=261 1x" /></span>
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>