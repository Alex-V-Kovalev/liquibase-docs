<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Multi-database Projects</h1>
        <p />
        <div class="toc-macro client-side-toc-macro  conf-macro output-block">
        </div>
        <p>Datical DB v5.3 includes support for creating, packaging, and performing operations on multi-database projects for SQL Server databases.</p>
        <p>
            <br />
        </p>
        <div class="confluence-information-macro confluence-information-macro-information conf-macro output-block">
            <div class="confluence-information-macro-body">
                <p>Multi-database projects are supported for only SQL Server databases.</p>
            </div>
        </div>
        <p>
            <br />
        </p>
        <h1 id="Multi-databaseProjects-CreatingandManagingtheProject">Creating and Managing the Project</h1>
        <h2 id="Multi-databaseProjects-UsingtheDaticalDBGUItoCreatetheProject">Using the Datical DB GUI to Create the Project</h2>
        <ul>
            <li>When you create the project, check <strong>Schema to be managed are in multiple database (SQL Server only)</strong>.&#160;</li>
            <li>When you specify multiple database, the <strong>Multiple Schema</strong> setting is also set for the project automatically.&#160;</li>
            <li>Use the <strong>Select Schema From</strong> list to specify databases in the form <em>database.schema</em>.&#160;</li>
        </ul>
        <h2 id="Multi-databaseProjects-UsingDaticalServicetoCreatetheProject">Using Datical Service to Create the Project</h2>
        <p>When you create the project, check&#160;<strong>Schema to be managed are in multiple database (SQL Server only) </strong>on the <strong>Project Settings </strong>page<strong>.&#160;</strong></p>
        <ul>
            <li>Set <strong>Plan Type</strong> to Multi-Schema on the Project Settings page.</li>
            <li>In the <strong>Step</strong> definition for each schema, provide the database name.&#160;&#160;</li>
            <li>For each step (DbDef), you must provide a <strong>Database</strong> name. This value can be any of the databases managed by the project. It is used only to check the connection.&#160;</li>
        </ul>
        <h2 id="Multi-databaseProjects-RepresentationinProjectFile">Representation in Project File</h2>
        <p>The following elements distinguish a multi-database project:</p>
        <ul>
            <li><code>multiCatalog</code> attribute</li>
            <li><code>multiSchema</code> attribute</li>
            <li><code>schemas</code> statement: dot-notated schema names of the form <code>&lt;database&gt;.&lt;schema&gt;</code>.</li>
        </ul>
        <p>The <code>dbDefs</code> statements for SQL Server databases also require a <code>databaseName</code> statement, which is used only for connection checking. Use the name of one of the managed databases.&#160;</p>
        <ul>
            <li><code>databaseName=&lt;database&gt;</code>
            </li>
        </ul>
        <h2 id="Multi-databaseProjects-ExampleProject">Example Project</h2>
        <p>Note the following parts of the multi-database datical.project file listing</p>
        <ul>
            <li>Attributes on &lt;dbproject&gt;<br /><code><br />multiSchema="true" </code><br /><code>multiCatalog="true"</code><br /><code>trackingSchema="DATABASE_1.TRACKING_SCHEMA"<br /><br /></code></li>
            <li>Dot notation for database.schema in the &lt;schemas&gt; statements. The example specifies two databases, with two schema each.&#160;<br /><br /><code>&lt;schemas name="DATABASE_1.SCHEMA_A"/&gt;</code><br /><code>&lt;schemas name="DATABASE_1.SCHEMA_B"/&gt;</code><br /><code>&lt;schemas name="DATABASE_2.SCHEMA_C"/&gt;</code><br /><code>&lt;schemas name="DATABASE_2.SCHEMA_D"/&gt;<br /><br /></code></li>
            <li>In the <code>dbDefs</code> statement, include&#160;<code>databaseName</code> attribute. Datical DB uses this information for an internal check of the database connection. Set this attribute for each DbDef.<br /><br /><code>databaseName="DATABASE_1"</code><br /><br /></li>
        </ul>
        <p>The sample project includes one step (REF).&#160;</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl hide-border-bottom" style="border-bottom-width: 1px;"><b class="code-title">Multi-database datical.project file</b><span class="collapse-source expand-control" style="display: none;"><span class="expand-control-text">Expand source</span></span>
            </div>
            <div class="codeContent panelContent pdl hide-toolbar"><pre class="syntaxhighlighter-pre" xml:space="preserve">?xml version="1.0" encoding="ASCII"?&gt;&lt;dbproject:Project 
  xmi:version="2.0" 
  xmlns:xmi="http://www.omg.org/XMI" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:dbproject="http://datical.com/db/project/1.0" 
  name="MyMultiDBProject" 
  storedLogicExternal="true" 
  deployThreshold="stopOnError" 
  runtimeCredentials="false" 
  multiSchema="true" 
  dbSchemaDefinition="project" 
  schemaSelectionStep="REF" 
  trackingSchema="DATABASE_1.TRACKING_SCHEMA" 
  enableRowCount="true" 
  multiCatalog="true"&gt;  &lt;dbDefs xsi:type="dbproject:SqlServerDbDef" 
     name="REF" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" 
     databaseName="DATABASE_1"	 hostname="localhost" 
	 port="1433" 
	 username="user_name" 
	 password="pwd_for_user_name" 
	 contexts="" 
	 integratedSecurity="false" 
	 applicationName="Datical DB"/&gt;  &lt;plans name="MyMultiDBProject" databaseDefs="//@dbDefs[name='REF']"/&gt;  &lt;changelog href="platform:/resource/MyMultiDBProject/Changelog/changelog.xml#//@databaseChangeLog"/&gt;  &lt;schemas name="DATABASE_1.SCHEMA_A"/&gt;  &lt;schemas name="DATABASE_1.SCHEMA_B"/&gt;  &lt;schemas name="DATABASE_2.SCHEMA_C"/&gt;  &lt;schemas name="DATABASE_2.SCHEMA_D"/&gt;&lt;/dbproject:Project&gt;</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <h1 id="Multi-databaseProjects-SQLScriptCoding">SQL Script Coding</h1>
        <p>Datical DB requires that you follow some coding conventions in order for it to package SQL scripts correctly for a multi-database project.&#160;</p>
        <ul>
            <li>Each SQL script is required to identify the database it is working on. You can provide the database names using these methods:<ul><li>USE DATABASE statement (for scripts in <code>ddl</code> and <code>sql_direct</code> folders).</li><li>Use a <code>metadata.properties</code> file that specifies <code>schemaName</code> as <code>&lt;database&gt;.&lt;schema&gt;</code></li></ul></li>
            <li>Object references in a SQL script must be unambiguous.&#160;<ul><li>Use<strong>fully qualified</strong>object references:<code>&lt;schema&gt;.&lt;object&gt;</code>.&#160;</li><li>Do not use unqualified object references:&#160;&#160;<code>&lt;object&gt;.&#160;</code></li></ul></li>
            <li style="list-style-type: none;">
                <ul>
                    <li>External (cross-database) object references must be fully specified:<code>&lt;database&gt;.&lt;schema&gt;.&lt;object&gt;</code></li>
                </ul>
            </li>
        </ul>
        <h2 id="Multi-databaseProjects-Cross-databaseReferences">Cross-database References</h2>
        <p>Within the body of a SQL statement you can refer to an object that belongs to another database.&#160;</p>
        <p>Use a fully-qualified object name: <code>&lt;database&gt;.&lt;schema&gt;.&lt;object&gt;</code>.</p>
        <p>Normal SQL Server rules apply when you create or modify an object in a script.&#160; For example, in a script using the context of one database:</p>
        <ol>
            <li>You can create an object for the current database object (a table, a procedure, a view, and so on).</li>
            <li>You cannot create an object for another database object.&#160;</li>
        </ol>
        <p>See SQL Server documentation for more information.&#160;</p>
        <h1 id="Multi-databaseProjects-Packaging">Packaging</h1>
        <p>Provide values for configuration options before packaging SQL scripts.&#160; SQL scripts are organized in folders per object type.</p>
        <p>See these pages for more information:</p>
        <ul>
            <li><a href="Placing_Files_in_the_SCM_Repository.htm">Placing Files in the SCM Repository</a>
            </li>
            <li><a href="SQL_Server_Database_Objects_and_Packaging.htm">SQL Server Database Objects and Packaging</a>
            </li>
        </ul>
        <h2 id="Multi-databaseProjects-FileHierarchyforMulti-DatabaseProjects">File Hierarchy for Multi-Database Projects</h2>
        <p>A best practice is to use the target database names as top-level folders.&#160;</p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">&lt;sql_code&gt;   DatabaseOne
     SchemaA
       ddl
       [...]
     SchemaB
     [...]
   DatabaseTwo
     [...]
   DatabaseThree
     [...]</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <p>Under each database folder you arrange folders by schema and then SQL type as normal, either using the fixed-name folders or flexible-name folders.&#160;</p>
        <h3 id="Multi-databaseProjects-UsingOnlyDatabaseFolders">Using Only Database Folders</h3>
        <p>You can manage all files under only the database folder as well. Use a wildcard in the the schemaName attribute in <code>metadata.properties</code>:&#160;&#160;<code>&lt;database&gt;.*</code>.&#160; If you use this arrangement, the object references in the SQL scripts must be fully qualified: <code>&lt;schema&gt;.&lt;object&gt;</code>.</p>
        <h2 id="Multi-databaseProjects-metadata.properties">metadata.properties</h2>
        <p>The best practice for working with multi-database projects to provide a <code>metadata.properties</code> file for each packaging folder. The <code>schemaName</code> attribute provides the database and schema context to be used by all SQL scripts in the folder.&#160; The settings apply to the current folder and all sub-folders.&#160;</p>
        <ul>
            <li><strong>schemaName</strong> - Specify both the database and schema in the form <code>&lt;database&gt;.&lt;schema&gt;.&#160;</code>For all SQL files this option provides the value of the database name and schema name to use if one is not specified in the SQL script. The packager tests that the object reference is valid, using the list of schema names provided.&#160; For multi-database projects, you can use a wildcard for the <code>&lt;schema&gt;</code> if you wish to manage all SQL scripts in the database folder and not create folders per schema.&#160;Example:&#160;&#160;<code>&lt;database&gt;.*</code></li>
        </ul>
        <p>See&#160;<a href="Using_the_metadata_properties_file.htm">Using the metadata.properties file</a>, especially "Using schemaName with Multi-schema Projects."</p>
        <h2 id="Multi-databaseProjects-PackagingFilesinsqlcmdDirectories">Packaging Files in sqlcmd Directories</h2>
        <p>During packaging, the database specified is used to add a USE &lt;datbasename&gt; statement to the SQL files being packaged.&#160;</p>
        <h2 id="Multi-databaseProjects-BackupsDuringPackaging">Backups During Packaging</h2>
        <p>The packager normally backs up all databases by default during packaging.&#160;</p>
        <p>The backup behavior is influenced by the <code>schemaName</code> property in the <code>metadata.properties</code> file. During a packaging run, the goal is to back up only the databases that are involved in the changes being packaged.&#160;</p>
        <ul>
            <li>If there is no <code>schemaName</code> property setting, all databases in the project are backed up.&#160;</li>
            <li>If there is a <code>schemaName</code> property setting, only the databases listed are backed up.&#160;&#160;</li>
        </ul>
        <h1 id="Multi-databaseProjects-Operations">Operations</h1>
        <p><span style="color: rgb(51,51,51);">Use the Datical DB CLI for managing the project and performing operations</span>
        </p>
        <ul style="text-align: left;">
            <li>package (including backup, snapshot, and compare)</li>
            <li>status</li>
            <li>forecast</li>
            <li>deploy</li>
            <li>rollback</li>
        </ul>
    </body>
</html>