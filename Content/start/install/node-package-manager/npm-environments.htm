<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h2>Features</h2>
        <h3>TypeScript</h3>
        <h4>Before</h4>
        <p>The previous project did not have the greatest experience for TypeScript environments. In addition, one of our goals was improving the DX for JavaScript engineers as well. Luckily, a lot of popular Text Editors are improving their IntelliSense featuresets.</p>
        <h4>Now</h4>
        <p>With the new package you will get:</p>
        <ul>
            <li><MadCap:variable name="General.Liquibase" /> command documentation right at your fingertips</li>
            <li><MadCap:variable name="General.changeset" /> command Parameter documentation</li>
            <li><MadCap:variable name="General.changeset" /> CLI Command API Parity</li>
        </ul>
        <p>INSERT&#160;VIDEO&#160;HERE</p>
        <h3>Library and CLI</h3>
        <p>In order to keep the DX as smooth as possible without deprecating the project that inspired the re-write, we've provided both an NPM package and a CLI tool. We did this by transpiling both an ES Module and a Common JS module in the dist code. The Node CLI of this package can be used with node-liquibase.</p>
        <p>However, when importing the modules to use them in a JavaScript or TypeScript file, be sure to import from the correct module name: liquibase. We are forced to keep this package name for now due to dependent projects.</p>
        <h3>Liquibase CLI Command API Parity</h3>
        <p>We were careful to ensure that all 'top level' Liquibase commands are implemented in this package. No more magic strings!</p>
        <p>Here's a complete listing of commands that have been implemented.</p>
        <h3>Liquibase CLI Peer Dependency (Optional)</h3>
        <p>WIP</p>
        <h2>Why The Re-write?</h2>
        <p>The original fork of this project has been left intact to give credit where credit is due. As an Organization, Liquibase can be summarized as follows: No punks, no jerks. Because of this, we cannot ignore pablodenadai/node-liquibase. It was these efforts that ultimately led to the decision to improve on that project.</p>
        <h3>TypeScript</h3>
        <p>At Liquibase we are avid TypeScript users, so naturally we expect the developer experience we're accustomed to out of our own packages. In order to provide the DX we would want, we needed to rethink how this library was implemented.</p>
        <p>Adding TypeScript support was at the core of this.</p>
        <h2>No Magic Strings!</h2>
        <p>Magic strings, while functional, are error prone. Instead of passing a string of the command and parameters to Liquibase, we've replicated the top level Liquibase CLI API within this package.</p>
        <p>Our aim is to provide a more stable and guided API for new Liquibase users operating in a Node context.</p>
        <p>This means no more of this:</p><pre>liquibase.run('status');</pre>
        <p>and more of this:</p><pre>liquibase.status();</pre>
    </body>
</html>