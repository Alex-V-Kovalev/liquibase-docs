<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.EXCLUDE">
    <head>
    </head>
    <body>
        <h1>Node Package Manager (NPM)</h1>
        <h2>Want to Help?</h2>
        <p>This project needs some work on the infrastructure and build tooling side. For now the workflow to test an 'end user ready' version of the project, you'll first need to build/compile the code, and then you can run it using the Node CLI's REPL <code>node path/to/something.js</code>.</p>
        <p>There is an issue in path resolution within THIS application code in addition to the complexities in Liquibase Core. Until this is resolved the resolved path for the Liquibase executable will differ between compiled and source code. This will affect your experience if you try to transpile the code on the fly using ts-node. I have not resolved the issue yet.</p>
        <h3>Build</h3>
        <p>To build all of the things:</p><pre>npm run build</pre>
        <h3>Tests</h3>
        <p>Run tests with:</p><pre>npm run test</pre>
        <h3>Env Vars</h3>
        <p>To substitute your own user/pass for a given environment, make a copy of .env.example in root directory as .env and update accordingly.</p>
        <h3>Extending Liquibase Node Package: Step-by-Step Guide</h3>
        <p>This guide outlines the process for adding or modifying Liquibase commands in the Liquibase Node package. It's designed for developers who want to extend the functionality of the package.</p>
        <p>Files to be Changed:</p>
        <ul>
            <li><code>src/commands-with-positional-arguments.ts</code>
            </li>
            <li><code>src/liquibase-commands.enum</code>
            </li>
            <li><code>node-liquibase/src/models/commands</code> (corresponding command file)</li>
            <li><code>node-liquibase/src/liquibase.spec.ts</code>
            </li>
            <li><code>node-liquibase/src/liquibase.ts</code>
            </li>
        </ul>
        <p>Follow these steps carefully to extend the functionality of the Liquibase Node package according to your requirements.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Ensure you follow proper coding conventions and thoroughly test your changes before deploying them.</p>
        <p>This guide assumes familiarity with TypeScript and the Liquibase Node package structure. If you encounter any issues, refer to the Liquibase Node package documentation or seek assistance from the community.</p>
        <h4>Step 1: Update <code>commands-with-positional-arguments.ts</code> and <code>liquibase-commands.enum</code></h4>
        <ol>
            <li>Navigate to the src directory of the Liquibase Node package.</li>
            <li>Open commands-with-positional-arguments.ts and liquibase-commands.enum files.</li>
            <li>Add or modify the command with its positional (if needed) arguments in these files.</li>
        </ol>
        <h4>Step 2: Modify Command and its Arguments in node-liquibase/src/models/commands</h4>
        <ol>
            <li>Go to the node-liquibase/src/models/commands directory.</li>
            <li>Locate the corresponding command file based on the command you added or modified.</li>
            <li>Add or modify the command and its arguments in the respective file.</li>
        </ol>
        <li>Add or modify the command and its arguments in the respective file.</li>
        <h4>Step 3: Define Commands in <code>node-liquibase/src/liquibase.spec.ts</code></h4>
        <ol>
            <li>Navigate to the node-liquibase/src directory.</li>
            <li>Open liquibase.spec.ts file.</li>
            <li>Define each command and indicate which run method it should invoke.</li>
        </ol>
        <h4>Step 4: Implement Invoke Method in <code>node-liquibase/src/liquibase.ts</code></h4>
        <ol>
            <li>Go to the node-liquibase/src directory.</li>
            <li>Open liquibase.ts file.</li>
            <li>Implement the invoke method for each command specified in liquibase.spec.ts.</li>
        </ol>
        <h2>CI: Generate Action</h2>
        <p>There is GitHub action executed on every Liquibase release. This GitHub Action automates the generation of Liquibase command list and protobuf files for a specified Liquibase version.</p>
        <h3>Workflow Steps</h3>
        <ol>
            <li>Install Dependencies: Installs necessary dependencies including protobuf-compiler and npm packages.</li>
            <li>Build Liquibase Protobuf Generator Docker Image: Builds a Docker image named liquibase-protobuf-generator specific to the provided Liquibase version.</li>
            <li>Generate Liquibase Command List: Executes a Docker command to generate a JSON file containing a list of Liquibase commands supported by the specified version.</li>
            <li>Iterate Over Commands and Generate Protobuf Files: Loops through the commands retrieved from the JSON file, executes Docker commands to generate protobuf files for each command, and then moves the generated TypeScript files to a directory named proto-commands.</li>
            <li>Update Liquibase Binaries: Downloads and extracts the Liquibase binaries for the specified version, replacing the existing binaries.</li>
            <li>Create Pull Request: It creates a pull request with the generated changes.</li>
        </ol>
        <p>This action streamlines the process of updating Liquibase-related files and creating pull requests for version updates.</p>
        <p>After the PR is created you can see potential new/modified liquibase commands and proced to update this module following the steps shown at <a href="https://github.com/liquibase/node-liquibase?tab=readme-ov-file#extending-liquibase-node-package-step-by-step-guide">Extending Liquibase Node Package: Step-by-Step Guide</a></p>
        <h2>Related links</h2>
        <ul>
            <li>&#160;</li>
        </ul>
    </body>
</html>