<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.EXCLUDE">
    <head>
    </head>
    <body>
        <h1>Node Package Manager (NPM)</h1>
        <h2>Installation</h2>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Concerned About Install Size?</b> For a drastically smaller version of this package, be sure to check out our <a href="https://www.npmjs.com/package/liquibase/v/0.0.0">Zero-Dependency Peer-Dependency version</a>. You can access this version under the tag <code>@pd</code> for <code>Peer Dependency</code>. This version of the package boasts an unpacked size of 359 kB. Just be sure to <a href="https://github.com/liquibase/node-liquibase?tab=readme-ov-file#peer-dependency-@pd">correctly configure your project</a>!</p>
        <p>Integrate  <MadCap:variable name="General.changeset" /> to your Node application easily with NPM package.</p><pre>yarn add liquibase</pre>
        <p>or:</p><pre>$ NPM install --save liquibase</pre>
        <h3>Sandbox</h3>
        <p>Here is a <a href="https://github.com/tabuckner/node-liquibase-sandbox">Small Sandbox Project</a> where you can easily evaluate  <MadCap:variable name="General.changeset" /> and <code>node-liquibase</code> against a Postgres Database.</p>
        <p>The Sandbox project includes startup scripts, and examples to demonstrate how to use <code>node-liquibase</code> in TypeScript, JavaScript, and as a CLI tool.</p>
        <h2>Usage</h2>
        <p> <MadCap:variable name="General.changeset" /> supports a rich pool of <MadCap:xref href="../../commands/home.htm">About [%=General.Liquibase%] Commands</MadCap:xref> to keep your database up-to-date, like update, rollback, and diff.</p>
        <p>This package exposes both a CLI tool and a Library to help you in your Database Migration efforts.</p>
        <h3>CLI</h3>
        <p>You can use this NPM package as a CLI tool under the namespace <code>node-liquibase</code> if you wish.</p>
        <h4>Bundled  <MadCap:variable name="General.changeset" /> Executable</h4><pre>
node-liquibase
--changeLogFile="/path/to/my/changelog.xml"
--url="jdbc:postgresql://localhost:5432/postgres"
--username="yourusername"
--password="yoursecurepassword"
--classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar"
status</pre>
        <h4> <MadCap:variable name="General.changeset" /> Executable "Peer Dependency"</h4><pre>
node-liquibase /Users/me/path/to/my/executable/for/liquibase
--changeLogFile="/path/to/my/changelog.xml"
--url="jdbc:postgresql://localhost:5432/postgres"
--username="yourusername"
--password="yoursecurepassword"
--classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar"
status</pre>
        <h3>In Your Project Files</h3>
        <h4>TypeScript</h4>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">import {
	LiquibaseConfig,
	Liquibase,
	POSTGRESQL_DEFAULT_CONFIG,
} from 'liquibase';

const myConfig: LiquibaseConfig = {
	...POSTGRESQL_DEFAULT_CONFIG,
	url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
	username: 'yourusername',
	password: 'yoursecurepassword',
};
const instance = new Liquibase(myConfig);

async function doEet() {
	await instance.status();
	// await instance.update();
	// await instance.dropAll();
}

doEet();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h4>JavaScript</h4>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">const Liquibase = require('liquibase').Liquibase;
const POSTGRESQL_DEFAULT_CONFIG = require('liquibase').POSTGRESQL_DEFAULT_CONFIG;

const myConfig = {
  ...POSTGRESQL_DEFAULT_CONFIG,
  changeLogFile: './changelog.xml',
  url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
  username: 'yourusername',
  password: 'yoursecurepassword',
}
const instTs = new Liquibase(myConfig);

instTs.status();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Features</h2>
        <h3>TypeScript</h3>
        <h4>Before</h4>
        <p>The previous project did not have the greatest experience for TypeScript environments. In addition, one of our goals was improving the DX for JavaScript engineers as well. Luckily, a lot of popular Text Editors are improving their IntelliSense featuresets.</p>
        <h4>Now</h4>
        <p>With the new package you will get:</p>
        <ul>
            <li><MadCap:variable name="General.Liquibase" /> command documentation right at your fingertips</li>
            <li> <MadCap:variable name="General.changeset" /> command Parameter documentation</li>
            <li> <MadCap:variable name="General.changeset" /> CLI Command API Parity</li>
        </ul>
        <p>INSERT&#160;VIDEO&#160;HERE</p>
        <h3>Library and CLI</h3>
        <p>In order to keep the DX as smooth as possible without deprecating the project that inspired the re-write, we've provided both an NPM package and a CLI tool. We did this by transpiling both an ES Module and a Common JS module in the dist code. The Node CLI of this package can be used with node-liquibase.</p>
        <p>However, when importing the modules to use them in a JavaScript or TypeScript file, be sure to import from the correct module name: liquibase. We are forced to keep this package name for now due to dependent projects.</p>
        <h3>Liquibase CLI Command API Parity</h3>
        <p>We were careful to ensure that all 'top level' Liquibase commands are implemented in this package. No more magic strings!</p>
        <p>Here's a complete listing of commands that have been implemented.</p>
        <h3>Liquibase CLI Peer Dependency (Optional)</h3>
        <p>WIP</p>
        <h2>Why The Re-write?</h2>
        <p>The original fork of this project has been left intact to give credit where credit is due. As an Organization, Liquibase can be summarized as follows: No punks, no jerks. Because of this, we cannot ignore pablodenadai/node-liquibase. It was these efforts that ultimately led to the decision to improve on that project.</p>
        <h3>TypeScript</h3>
        <p>At Liquibase we are avid TypeScript users, so naturally we expect the developer experience we're accustomed to out of our own packages. In order to provide the DX we would want, we needed to rethink how this library was implemented.</p>
        <p>Adding TypeScript support was at the core of this.</p>
        <h2>No Magic Strings!</h2>
        <p>Magic strings, while functional, are error prone. Instead of passing a string of the command and parameters to Liquibase, we've replicated the top level Liquibase CLI API within this package.</p>
        <p>Our aim is to provide a more stable and guided API for new Liquibase users operating in a Node context.</p>
        <p>This means no more of this:</p><pre>liquibase.run('status');</pre>
        <p>and more of this:</p><pre>liquibase.status();</pre>
        <h2>Bundled Releases</h2>
        <p>In order to make installation of Liquibase easier for people who are new to the Liquibase toolset, we've chosen to release 'bundled' versions of this project, <code>node-liquibase</code>. This means that if you are beholden to a particular version of Liquibase you will be able to install a related specific version of <code>node-liquibase</code> and have Liquibase ready at your fingertips.</p>
        <p>This makes the assumption that a consumer of <code>node-liquibase</code> wants that. If this is not true and you prefer to make use of a more peer dependency type of experience, we offer a version of <code>node-liquibase</code> that <b>does not</b> bundle an associated version of Liquibase.</p>
        <h3>Bundled Version Numbers</h3>
        <p>Because Liquibase and <code>node-liquibase</code> both use a similar versioning strategy, and because NPM requires a version number bump for even the smallest change, there will not be 100% alignment between the version numbers of each project.</p>
        <p>It is safe to assume that the Major and Minor version numbers between the two projects will match on any given <code>npm</code> installation of <code>node-liquibase</code>.</p>
        <p>For example:</p>
        <p>
            <li>Let's assume you are required to use Liquibase Core v4.3.3</li>
            <li>node-liquibase released 4.3.3 alongside Liquibase Core, but needed to update documentation after the fact</li>
            <li>node-liquibase patches its version number and releases 4.3.4</li>
            <li>As a User, you could run yarn add liquibase@4.3 which would install the latest patch version of 4.3 in this case 4.3.4</li>
            <li>The "Bundled Liquibase" version would still be 4.3.3 but node-liquibase would be 4.3.4</li>
        </p>
        <p>If you wish to opt-out of the Bundled Version you can check out our <a href="https://github.com/liquibase/node-liquibase?tab=readme-ov-file#peer-dependency-@pd">Peer Dependency</a> release.</p>
        <h2>Peer Dependency (@pd)</h2>
        <h3>Install</h3>
        <p>In order to use this <code>p[eer]-d[ependency]</code> version of <code>node-liquibase</code> you can install with:</p><pre>yarn add liquibase@pd</pre>
        <p>or</p><pre>npm i liquibase@pd</pre>
        <p>Depending on your implementation method of choice (TS, JS, or CLI), you will need to let <code>node-liquibase</code> know where it can find your liquibase executable. This should be an <b>absolute path</b> to the executable.</p>
        <p>Additionally, we removed the bundled drivers from the @pd release to further reduce the size of your node_modules. There is a chance you will need to update your configurations to provide an absolute path on the classpath property to the drivers you need.</p>
        <h3>Configuration Updates (TS or JS)</h3>
        <p>Using the liquibase property on your config object.</p>
        <h4>Before</h4>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">import { Liquibase, LiquibaseConfig, POSTGRESQL_DEFAULT_CONFIG } from 'liquibase';

const myConfig: LiquibaseConfig = {
  ...POSTGRESQL_DEFAULT_CONFIG,
  changeLogFile: './changelog.xml',
  url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
  username: 'yourusername',
  password: 'yoursecurepassword',
}
const inst = new Liquibase(myConfig);

inst.status();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h4>After</h4>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">import { Liquibase, LiquibaseConfig, POSTGRESQL_DEFAULT_CONFIG } from 'liquibase';

const myConfig: LiquibaseConfig = {
  ...POSTGRESQL_DEFAULT_CONFIG,
  changeLogFile: './changelog.xml',
  url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
  username: 'yourusername',
  password: 'yoursecurepassword',
  liquibase: 'Users/me/absolute/path/to/executable/directory'
}
const inst = new Liquibase(myConfig);

inst.status();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Configuration Updates (CLI)</h3>
        <p>Using the <code>--liquibase</code> flag on your CLI command.</p>
        <h4>Before</h4><pre>yarn node-liquibase --changeLogFile="changelog.xml" --url="jdbc:postgresql://localhost:5432/node_liquibase_testing" --username="yourusername" --password="yoursecurepassword" --classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar" status</pre>
        <h4>After</h4><pre>yarn node-liquibase --liquibase="Users/me/absolute/path/to/executable/directory" --changeLogFile="changelog.xml" --url="jdbc:postgresql://localhost:5432/node_liquibase_testing" --username="yourusername" --password="yoursecurepassword" --classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar" status</pre>
        <h3>Sandbox: @pd</h3>
        <p>If you'd like to see a working setup of liquibase@pd be sure to check out the peer-dependency branch of the <a href="https://github.com/tabuckner/node-liquibase-sandbox/blob/peer-dependency/index.ts">Node Liquibase Sandbox</a>. You can see a diff of the two approaches (Bundled v. Peer) <a href="https://github.com/tabuckner/node-liquibase-sandbox/compare/master...peer-dependency">Here</a></p>
        <h2>Want to Help?</h2>
        <p>This project needs some work on the infrastructure and build tooling side. For now the workflow to test an 'end user ready' version of the project, you'll first need to build/compile the code, and then you can run it using the Node CLI's REPL <code>node path/to/something.js</code>.</p>
        <p>There is an issue in path resolution within THIS application code in addition to the complexities in Liquibase Core. Until this is resolved the resolved path for the Liquibase executable will differ between compiled and source code. This will affect your experience if you try to transpile the code on the fly using ts-node. I have not resolved the issue yet.</p>
        <h3>Build</h3>
        <p>To build all of the things:</p><pre>npm run build</pre>
        <h3>Tests</h3>
        <p>Run tests with:</p><pre>npm run test</pre>
        <h3>Env Vars</h3>
        <p>To substitute your own user/pass for a given environment, make a copy of .env.example in root directory as .env and update accordingly.</p>
        <h3>Extending Liquibase Node Package: Step-by-Step Guide</h3>
        <p>This guide outlines the process for adding or modifying Liquibase commands in the Liquibase Node package. It's designed for developers who want to extend the functionality of the package.</p>
        <p>Files to be Changed:</p>
        <ul>
            <li><code>src/commands-with-positional-arguments.ts</code>
            </li>
            <li><code>src/liquibase-commands.enum</code>
            </li>
            <li><code>node-liquibase/src/models/commands</code> (corresponding command file)</li>
            <li><code>node-liquibase/src/liquibase.spec.ts</code>
            </li>
            <li><code>node-liquibase/src/liquibase.ts</code>
            </li>
        </ul>
        <p>Follow these steps carefully to extend the functionality of the Liquibase Node package according to your requirements.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Ensure you follow proper coding conventions and thoroughly test your changes before deploying them.</p>
        <p>This guide assumes familiarity with TypeScript and the Liquibase Node package structure. If you encounter any issues, refer to the Liquibase Node package documentation or seek assistance from the community.</p>
        <h4>Step 1: Update <code>commands-with-positional-arguments.ts</code> and <code>liquibase-commands.enum</code></h4>
        <ol>
            <li>Navigate to the src directory of the Liquibase Node package.</li>
            <li>Open commands-with-positional-arguments.ts and liquibase-commands.enum files.</li>
            <li>Add or modify the command with its positional (if needed) arguments in these files.</li>
        </ol>
        <h4>Step 2: Modify Command and its Arguments in node-liquibase/src/models/commands</h4>
        <ol>
            <li>Go to the node-liquibase/src/models/commands directory.</li>
            <li>Locate the corresponding command file based on the command you added or modified.</li>
            <li>Add or modify the command and its arguments in the respective file.</li>
        </ol>
        <li>Add or modify the command and its arguments in the respective file.</li>
        <h4>Step 3: Define Commands in <code>node-liquibase/src/liquibase.spec.ts</code></h4>
        <ol>
            <li>Navigate to the node-liquibase/src directory.</li>
            <li>Open liquibase.spec.ts file.</li>
            <li>Define each command and indicate which run method it should invoke.</li>
        </ol>
        <h4>Step 4: Implement Invoke Method in <code>node-liquibase/src/liquibase.ts</code></h4>
        <ol>
            <li>Go to the node-liquibase/src directory.</li>
            <li>Open liquibase.ts file.</li>
            <li>Implement the invoke method for each command specified in liquibase.spec.ts.</li>
        </ol>
        <h2>CI: Generate Action</h2>
        <p>There is GitHub action executed on every Liquibase release. This GitHub Action automates the generation of Liquibase command list and protobuf files for a specified Liquibase version.</p>
        <h3>Workflow Steps</h3>
        <ol>
            <li>Install Dependencies: Installs necessary dependencies including protobuf-compiler and npm packages.</li>
            <li>Build Liquibase Protobuf Generator Docker Image: Builds a Docker image named liquibase-protobuf-generator specific to the provided Liquibase version.</li>
            <li>Generate Liquibase Command List: Executes a Docker command to generate a JSON file containing a list of Liquibase commands supported by the specified version.</li>
            <li>Iterate Over Commands and Generate Protobuf Files: Loops through the commands retrieved from the JSON file, executes Docker commands to generate protobuf files for each command, and then moves the generated TypeScript files to a directory named proto-commands.</li>
            <li>Update Liquibase Binaries: Downloads and extracts the Liquibase binaries for the specified version, replacing the existing binaries.</li>
            <li>Create Pull Request: It creates a pull request with the generated changes.</li>
        </ol>
        <p>This action streamlines the process of updating Liquibase-related files and creating pull requests for version updates.</p>
        <p>After the PR is created you can see potential new/modified liquibase commands and proced to update this module following the steps shown at <a href="https://github.com/liquibase/node-liquibase?tab=readme-ov-file#extending-liquibase-node-package-step-by-step-guide">Extending Liquibase Node Package: Step-by-Step Guide</a></p>
        <h2>Related links</h2>
        <ul>
            <li><a href="https://learn.liquibase.com/index"><MadCap:variable name="General.Liquibase" /> University</a>
            </li>
            <li><a href="https://learn.liquibase.com/index"><MadCap:variable name="General.Liquibase" /> Documentation</a>
            </li>
            <li><a href="https://www.liquibase.org/download">Download <MadCap:variable name="General.Liquibase" /> CLI</a>
            </li>
        </ul>
    </body>
</html>