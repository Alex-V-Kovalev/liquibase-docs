<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="True">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <meta rel="canonical" href="https://docs.liquibase.com/concepts/changelogs/structure-changelogs.html" />
        <meta name="description" content="Reference information and best practices on how to structure your Liquibase changelogs." />
    </head>
    <body>
        <h1>Design Your <MadCap:variable name="General.Liquibase" /> Project</h1>
        <p>Your <a href="../concepts/changelogs/home.html"><MadCap:variable name="General.changelog" /></a> is the core of your <MadCap:variable name="General.Liquibase" /> project. While you can use one <MadCap:variable name="General.changelog" /> for all your deployments, this may not scale well. Instead, you can use multiple <MadCap:variable name="General.changelog" />s for different purposes. To organize multiple <MadCap:variable name="General.changelog" />s, you can use the <code><MadCap:xref href="../change-types/include.html">include</MadCap:xref></code> and <code><MadCap:xref href="../change-types/includeall.html">includeAll</MadCap:xref></code> tags to create a root (main/parent) <MadCap:variable name="General.changelog" /> and one or more nested (child) <MadCap:variable name="General.changelog" />s. This document explains some best practices on structuring your <MadCap:variable name="General.changelog" />s.</p>
        <h2>Prerequisites</h2>
        <p>If you're new to <MadCap:variable name="General.Liquibase" />, make sure you understand the fundamentals before creating your own project:</p>
        <ol>
            <li>
                <MadCap:xref href="install/home.htm">Install [%=General.Liquibase%]</MadCap:xref> – Download <MadCap:variable name="General.Liquibase" /> on your machine</li>
            <li>
                <MadCap:xref href="home.htm">Get Started with [%=General.Liquibase%]</MadCap:xref> – Learn how to use <MadCap:variable name="General.Liquibase" /> with an example database</li>
        </ol>
        <h2>Create a project</h2>
        <p>The Get Started guide linked previously shows you how <MadCap:variable name="General.Liquibase" /> deployments work using a sample database and <MadCap:variable name="General.changelog" />. However, your organization's needs go beyond a demonstration. To create a new <MadCap:variable name="General.Liquibase" /> project, run the <code><MadCap:xref href="../commands/init/project.htm">init project</MadCap:xref></code> command in your command line:</p><pre><code class="language-text">liquibase init project</code></pre>
        <p>This generates a new <MadCap:variable name="General.changelog" /> and <a href="../concepts/connections/creating-config-properties.html"><code><MadCap:variable name="General.liquiPropFile" /></code> file</a> that you can customize and expand. You can use the default settings or specify your own. For more information on command arguments, see the <code>init project</code> page.</p>
        <h2>Choose a schema design pattern</h2>
        <p>You can use <MadCap:variable name="General.Liquibase" /> in two ways:</p>
        <ul>
            <li><b>Shared schema:</b> All developers work in a single, shared database schema</li>
            <li><b>Multi-schema:</b>&#160;Each team works in a different database schema</li>
        </ul>
        <p>To choose what's best for your organization, consider the processes your developers currently use to deploy changes to the database.</p>
        <h3>Shared schema</h3>
        <p>If you use a shared schema with <MadCap:variable name="General.Liquibase" />, all your developers work on the same database schema.</p>
        <p>Using a single schema can make it simple to design, manage, standardize, and query your database. However, using a single schema in a large database may become confusing as you create more objects. If you need to write long queries to navigate complex object structures in a single-schema database, the queries may negatively affect performance.</p>
        <p>It's important for everyone using the same schema to agree on a deployment process. For example, one team may modify a shared script without realizing that it's a dependency for another team's automation. One solution is to keep all schema content in a single repository owned by one team. When other teams want to make changes, they submit pull requests from their source control tool. Alternatively, each team can work in their own directory in the schema and try to minimize cross-team dependencies.</p>
        <h3>Multiple schemas</h3>
        <p>If you use multiple schemas with <MadCap:variable name="General.Liquibase" />, you create one or more schemas in your database for different teams.</p>
        <p>Using multiple schemas may make it easier to organize your data, which may be helpful in large databases containing many unique data structures. Also, using multiple schemas may prevent conflicts with source control merges or broken dependencies, help you store data backups, and let you customize user and application permissions for each schema.</p>
        <p>However, using multiple schemas means you may have to duplicate some of your data, which can make consistency more difficult. Depending on your automation tooling and workflow, you may also need to call <MadCap:variable name="General.Liquibase" /> multiple times to send your code to production, which requires extra maintenance from your DevOps team.</p>
        <h2>Choose a <MadCap:variable name="General.changelog" /> structure</h2>
        <p>When designing your <MadCap:variable name="General.Liquibase" /> project, it is a best practice to create a simple root <MadCap:variable name="General.changelog" /> that you don't have to modify directly. Instead, you can make changes to each of the <MadCap:variable name="General.changelog" />s beneath it, which you can reference with the <code><MadCap:xref href="../change-types/include.html">include</MadCap:xref></code> and <code><MadCap:xref href="../change-types/includeall.html">includeAll</MadCap:xref></code> tags. The nested <MadCap:variable name="General.changelog" />s can be modified and deployed independently, but you can also deploy all changes in a single <code><MadCap:xref href="../commands/update/update.html">update</MadCap:xref></code> from the root <MadCap:variable name="General.changelog" />. There are two common <MadCap:variable name="General.changelog" /> design patterns, <b>object-oriented</b> and <b>release-oriented</b>. The design you choose should correspond to the structure of your existing code repository and workflow.</p>
        <h3>Object-oriented</h3>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">For most organizations, it is a best practice to use an object-oriented <MadCap:variable name="General.changelog" /> design pattern.</p>
        <p>In an object-oriented <MadCap:variable name="General.changelog" /> structure, you create one <MadCap:variable name="General.changelog" /> per object or object type. For example:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.xml
        changelog-index.xml
        changelog-procedure.xml
        changelog-table.xml
        changelog-view.xml</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.xml</code> which contains <code>include</code> tags referencing <code>changelog-index.xml</code>, <code>changelog-procedure.xml</code>, <code>changelog-table.xml</code>, and <code>changelog-view.xml</code>.</p>
        <p>Alternatively, you&#160;can create directories for each type of object, each containing one or more <MadCap:variable name="General.changelog" />s per particular database object:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.xml
        changelog-indexes
          my-favorite-index.xml
          that-other-index.xml
        changelog-tables
          employees.xml
          customers.xml</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.xml</code> which contains <code>includeAll</code> tags referencing the directories <code>/changelog-indexes</code> and <code>/changelog-tables</code>. The <MadCap:variable name="General.changelog" />s you modify regularly are contained in the nested directories rather than in the overarching <code>/changelog</code> directory.</p>
        <p>These designs are useful because they allow you to easily see changes made over time to specific objects (like a particular table) or groups of objects (like all tables in your database). An object-oriented <MadCap:variable name="General.changelog" /> format makes it easier to roll back changes to particular objects without worrying about unrelated changes in the <MadCap:variable name="General.changelog" />.</p>
        <p>Having a more detailed <MadCap:variable name="General.changelog" /> structure can also potentially simplify the Source Control Management (SCM) process. If all your developers work in the same <MadCap:variable name="General.changelog" />, they may experience source control merge conflicts more frequently. By separating your <MadCap:variable name="General.changelog" />s into use-cases for different objects, developers are likely to be working in different files and therefore will not overwrite each other's code.</p>
        <h3>Release-oriented</h3>
        <p>If a release-oriented <MadCap:variable name="General.changelog" /> structure, you create one <MadCap:variable name="General.changelog" /> per release or release group. For example:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.xml
        changelog-1.0.xml
        changelog-1.1.xml
        changelog-2.0.xml</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.xml</code> which contains <code>include</code> tags referencing <code>changelog-1.0.xml</code>, <code>changelog-1.1.xml</code>, and <code>changelog-2.0.xml</code>.</p>
        <p>Alternatively, you can create directories for each major release (or other release group), each containing one or more <MadCap:variable name="General.changelog" />s per minor release:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.xml
        changelog-1.x
          changelog-1.0.xml
          changelog-1.1.xml
        changelog-2.x
          changelog-2.0.xml</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.xml</code> which contains <code>includeAll</code> tags referencing the directories <code>/changelog-1.x</code> and <code>/changelog-2.x</code>. The <MadCap:variable name="General.changelog" />s you modify for a particular release are contained in the nested directories rather than in the overarching <code>/changelog</code> directory.</p>
        <p>A release-oriented <MadCap:variable name="General.changelog" /> structure lets you bundle all content associated with a release in one place. However, this design can be difficult to maintain. If you want to see changes made to a particular object over time, the release-oriented structure requires you to look in multiple locations for that information.</p>
        <p>Additionally, having a single <MadCap:variable name="General.changelog" /> per release (even minor release) may lead to more frequent source control merge conflicts. You can solve this by creating multiple <MadCap:variable name="General.changelog" />s within each release directory, such as <code>/changelog-1.0/indexes.xml</code> and <code>/changelog-1.0/tables.xml</code>. However, this structure may be more complicated to navigate and maintain than a pure object-oriented <MadCap:variable name="General.changelog" /> design.</p>
        <h2>Prepare for deployment</h2>
        <ul>
            <li>When you use the <code>includeAll</code> tag in your root <MadCap:variable name="General.changelog" />, you must ensure your file naming convention is consistent. <MadCap:variable name="General.Liquibase" /> sorts pending scripts in alphanumeric order and then deploys them in that order.</li>
            <li>You can specify filtering logic to control which <MadCap:variable name="General.changeset" />s in your <MadCap:variable name="General.changelog" /> are executed at runtime by using  <a href="../concepts/changelogs/preconditions.html">preconditions</a>, <a href="../concepts/changelogs/attributes/contexts.html">contexts</a>, <a href="../concepts/changelogs/attributes/labels.html">labels</a>, and other <MadCap:variable name="General.changelog" /> <MadCap:variable name="General.Param/Attribute" />s like <code><MadCap:xref href="../concepts/changelogs/attributes/run-always.htm">runAlways</MadCap:xref></code> and <code><MadCap:xref href="../concepts/changelogs/attributes/runonchange.htm">runOnChange</MadCap:xref></code>. For more information, see <MadCap:xref href="../concepts/changelogs/attributes/home.htm">Changelog [%=General.Param/Attr/Uppercased%]s</MadCap:xref>.</li>
            <li>When you publish updates to your software, it is a best practice to release separate artifacts for each step in your development pipeline, such as artifacts for <code>dev</code>, <code>qa</code>, and <code>prod</code>. You can easily version artifacts and run checks on them with automation tools. Alternatively or in addition, you can use contexts to group <MadCap:variable name="General.changeset" />s into environments and labels to mark <MadCap:variable name="General.changeset" />s as belong to specific features. Simulating environments with branches in source control is <b>not recommended</b>.</li>
        </ul>
        <h2>Next steps</h2>
        <ol>
            <li>
                <MadCap:xref href="tutorials/home.html">[%=General.Liquibase%] Database Tutorials</MadCap:xref> – Configure <MadCap:variable name="General.Liquibase" /> to work with your own database</li>
            <li>
                <MadCap:xref href="../concepts/bestpractices.html">Best Practices</MadCap:xref> – Read about best practices to follow with <MadCap:variable name="General.Liquibase" /></li>
        </ol>
    </body>
</html>