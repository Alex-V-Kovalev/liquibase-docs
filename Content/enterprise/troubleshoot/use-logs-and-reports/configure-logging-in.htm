<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Liquibase Enterprise Documentation</title><meta name="description" content="Liquibase Enterprise Documentation" /></head>
    <body>
        <h1>Configuring Logging in <MadCap:variable name="General.DaticalDB" /></h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p><span style="color: rgb(51,51,51);"></span></p><h1 id="ConfiguringLogginginDaticalDB-Defaults"><span style="color: rgb(51,51,51);">Defaults</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p><span style="color: rgb(51,51,51);">For both the GUI and the CLI, there is logging to the console. Both the GUI and the CLI are configured to send log messages at level DEBUG and above to file&#160;<code>daticaldb.log</code>. </span></p><p><span style="color: rgb(51,51,51);">The system also automatically creates date-stamped versions of the <code>daticaldb.log</code> file. It automatically deletes log files older than 30 days.</span></p><h1 id="ConfiguringLogginginDaticalDB-_Toc356829782_Toc492882596LoggingSystems"><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc356829782"></span><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc492882596"></span>Logging Systems</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>The logging systems&#160; (SLF4J and Logback) define basic logging concepts.</p><h2 id="ConfiguringLogginginDaticalDB-_Toc356829783_Toc492882597LogLevels"><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc356829783"></span><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc492882597"></span>Log Levels</h2><p>SLF4J defines logging levels. The levels are used during development and at runtime. When a developer puts a line in the code to log a message, they select the level of that message. At run time, the logging system presents log messages at the level selected.</p><table class="wrapped confluenceTable"><colgroup></colgroup><tbody><tr><td><p><span style="color: rgb(0,0,0);"><strong>Log Level</strong></span></p></td><td><p><span style="color: rgb(0,0,0);"><strong>Description</strong></span></p></td></tr><tr><td><p><strong>ALL</strong></p></td><td><p>When set, messages from all logging levels will be recorded in the configured logs.</p></td></tr><tr><td><p><strong>ERROR</strong></p></td><td><p>This level will only record error or exception messages to the log.</p></td></tr><tr><td><p><strong>WARNING</strong></p></td><td><p>This level is used to communicate application conditions that could lead to an error. Also includes ERROR messages.</p></td></tr><tr><td><p><strong>INFO</strong></p></td><td><p>This level is used to communicate general information about application usage. Also includes ERROR &amp; WARNING messages.</p></td></tr><tr><td><p><strong>DEBUG</strong></p></td><td><p>This level includes more specific information about the operation environment to assist in diagnosing runtime issues in errors. Also includes ERROR, WARNING &amp; INFO messages.</p></td></tr><tr><td><p><strong>TRACE</strong></p></td><td><p>This level is available, but not used in <MadCap:variable name="General.DaticalDB" />. The output is identical to the DEBUG option.</p></td></tr><tr><td><p><strong>OFF</strong></p></td><td><p>Turns off all logging.</p></td></tr></tbody></table><h2 id="ConfiguringLogginginDaticalDB-_Toc356829784_Toc492882598ConfiguringOtherAspectsofLogging"><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc356829784"></span><span class="confluence-anchor-link conf-macro output-inline" id="ConfiguringLogginginDaticalDB-_Toc492882598"></span>Configuring Other Aspects of Logging</h2><h3 id="ConfiguringLogginginDaticalDB-Locations">Locations</h3><p>The two logging configuration files are located in your product installation directories.</p><ul><li>For desktop client/Eclipse GUI operations: &lt;datical_install_dir&gt;/logging-config.xml</li><li>For command line/hammer operations: &lt;datical_install_dir&gt;/repl/logging-config.xml</li></ul><h3 id="ConfiguringLogginginDaticalDB-SampleFile">Sample File</h3><p>Expand open below to see a sample logging-config.xml file:</p><span class="collapse-source expand-control" style="display: none;"><span class="expand-control-text">Expand source</span></span><pre class="syntaxhighlighter-pre" xml:space="preserve">Consult the example logging configuration file below for guidance when working with other configurable options. You can also consult the logback documentation at http://logback.qos.ch/manual/ 
&lt;!-- Scan/scan period mean that as the application is running, logback will check the file every 30 seconds for changes and re-load the configuration as needed --&gt;&lt;configuration scan="true" scanPeriod="30 seconds"&gt; 
&lt;!-- This creates an appender (a place for log messages to go), names it "STDOUT" and says that this appender uses the built-in ConsoleAppender, which writes to the standard output stream. It can also be configured to write to standard error. --&gt;&lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt; 
&lt;!-- This filter prevents logging messages below the given level from being written to the appender. --&gt;&lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; 
&lt;!-- By default, the console appender is OFF. Change as needed. --&gt; 
&lt;level&gt;OFF&lt;/level&gt; 
&lt;/filter&gt; 
&lt;!-- Encoders determine what the output looks like. Here we have each log message start with a date/time stamp that just shows the time, down to the millisecond.
The thread name and log level are shown, and then the name of the logger (limited to 36 characters). Finally, the message itself, followed by a newline --&gt; 
&lt;encoder&gt; 
&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt; 
&lt;!-- This creates a second appender, names it "FILE" and says that it WILL be using the built-in RollingFileAppender. That appender writes to a file, and then periodically archives old logs. The rolling strategy is completely configurable --&gt; 
&lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; 
&lt;!-- The name of the 'base' log file. No path is given, so the file will be located in the 'current' directory. For the GUI, that means that the file will be in the installation directory. For the CLI, this will be whatever directory the CLI was started from. Note that this means there may be many daticaldb.log files scattered around the user's disk. We may want to do this differently. --&gt; 
&lt;file&gt;daticaldb.log&lt;/file&gt; 
&lt;!-- As with the console appender above, this filters out messages below the given level. That means that DEBUG messages will be shown, but not TRACE messages. --&gt;&lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; 
&lt;level&gt;DEBUG&lt;/level&gt;&lt;/filter&gt; 
&lt;!-- This configures the rolling policy to create a new log file each day, naming the 'rolled' file 'daticaldb-2016-01-23.log' or similar, and to keep at most 30 days worth of log files. --&gt;&lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; 
&lt;!-- daily rollover --&gt;&lt;fileNamePattern&gt;daticaldb.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt; 
&lt;!-- keep 30 days' worth of history --&gt;&lt;maxHistory&gt;30&lt;/maxHistory&gt;&lt;/rollingPolicy&gt; 
&lt;!-- This encoder is identical to the one used above by the console appender --&gt;&lt;encoder&gt; 
&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt; 
&lt;!-- This configures what is called the 'root' logger. Logback allows for a hierarchy of loggers, making it possible for different loggers in the code to send output to zero, one, or many different destinations. We set the default log level to 'DEBUG', and then reference both of the named appenders. It is possible to refer to named loggers here, so that, for instance, all the messages from the com.datical.hammer.core package (and sub-packages) went to a specific appender, and all the messages from another package went to a different appender. --&gt;&lt;root level="debug"&gt; 
&lt;appender-ref ref="STDOUT" /&gt;&lt;appender-ref ref="FILE" /&gt;&lt;/root&gt;&lt;/configuration&gt;</pre><h2 class="auto-cursor-target" id="ConfiguringLogginginDaticalDB-ModificationExample"><span style="color: rgb(51,71,91);">Modification Example&#160;</h2><h3 class="auto-cursor-target" id="ConfiguringLogginginDaticalDB-Howtoincludethedateinthetimestampsindaticaldb.log"><span style="color: rgb(51,71,91);">How to include the date in the timestamps in daticaldb.log</span></h3><ul><li class="auto-cursor-target"><span style="color: rgb(51,71,91);">For that example, you would find both of the lines in your logging-config.xml files that by default have this:</span></li></ul><p class="auto-cursor-target" style="margin-left: 60.0px;"><span style="color: rgb(51,71,91);">&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;</span></p><ul><li class="auto-cursor-target"><span style="color: rgb(51,71,91);">And replace it with this instead on both lines:</span></li></ul><p class="auto-cursor-target" style="margin-left: 60.0px;">&lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;</p><h2 class="auto-cursor-target" id="ConfiguringLogginginDaticalDB-UpgradeNote"><span style="color: rgb(51,71,91);">Upgrade Note</h2><p><span style="color: rgb(51,71,91);">If you modify your logging-config.xml files, note that when you upgrade to a newer version of <MadCap:variable name="General.DaticalDB" /> in the future that the new installation directory will have the default logging-config.xml. So you will need to modify the logging-config.xml files in your installation of your newer Liquibase Enterprise version after each upgrade.</span></p></body>
</html>