<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Import a SSL Certificate to <MadCap:variable name="General.DMCProductShortName" /></h1>
        <p>A&#160;self-signed certificate is established during installation. Typically a warning regarding this certificate appears upon opening <MadCap:variable name="General.DMCProductShortName" />. To complete the requirements for SSL (and eliminate the warning), you need to create and load your own SSL certificate. It must be signed by a root authority that is trusted by your network.</p>
        <h2>Loading the SSL Certificate into DMC</h2>
        <p>Java has their keytool CLI which is shipped with DMC and can be used to manage a keystore (database) of cryptographic keys, X.509 certificate chains, and trusted certificates.</p>
        <p>Copy converted certificate and private key (domain.p12) to DATICAL_HOME/data/datical-service on DMC server.</p>
        <p>Run</p>
        <p>datical-control service stop all</p>
        <p>Delete a certificate that came with DMC:</p>
        <p>DATICAL_HOME/jre/bin/keytool -delete -alias datical -keystore keystore.p12</p>
        <p>Import the PKCS 12 certificate by executing the following command:</p>
        <p>DATICAL_HOME/jre/bin/keytool -importkeystore -deststorepass [password] -destkeystore DATICAL_HOME/data/datical-service/keystore.p12 -srckeystore DATICAL_HOME/data/datical-service /domain.p12 -srcstoretype PKCS12</p>
        <p>Run</p>
        <p>datical-control service start all.</p>
        <p>In the end, the keystore.p12 file in DATICAL_HOME/data/datical-service/ needs to to have the signed public key, private key, and certificate chain included in it under the alias "datical" with a password of “datical”. It is usually best to make a backup of the original file before working with it.</p>
        <h3>Useful commands that may help during the process</h3>
        <p>Move an existing keystore entry from the specified alias to datical alias:</p>
        <p>DATICAL_HOME/jre/bin/keytool -changealias -alias [oldalias] -destalias datical -keystore keystore.p12</p>
        <p>Changes the password used to protect the integrity of the keystore contents to datical</p>
        <p>DATICAL_HOME/jre/bin/keytool -storepasswd -keystore keystore.p12</p>
        <p>Regenerate the DMC HTTPS keys:</p>
        <p>datical-control https regenerate-keys</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Creating the SSL Certificate based on OpenSSL example</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The process to generate a certificate varies based on your network setup, tools you use, and trusted authorities. Consult your system administrator or security administrator for the process used at your site.</p>
                <p>The following example is for illustration only.</p>
                <p>Create both the private key and CSR in a separate folder:</p>
                <p>mkdir ~/certs &amp;&amp; cd ~/certs</p>
                <p>openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Creating a CA-Signed Certificate With Our Own CA</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>We can be our own certificate authority (CA) by creating a self-signed root CA certificate, and then installing it as a trusted certificate in the local browser.</p>
                <p>Create a private key (ca.key) and a self-signed root CA certificate (ca.crt) from the command line:</p>
                <p>mkdir ~/ca &amp;&amp; cd ~/ca</p>
                <p>openssl req -newkey rsa:2048 -nodes -keyout ca.key -x509 -days 3654 -out ca.crt</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Signing Our CSR With Root CA</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Then sign our CSR (domain.csr) with the root CA certificate and its private key:</p>
                <p>openssl x509 -req -in ~/certs/domain.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out domain.crt -days 365</p>
                <p>As a result, the CA-signed certificate will be in the domain.crt file.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Convert the signed certificate and private key to PKCS 12</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>You can't directly import private key information to a keystore using keytool. Instead, you must convert the certificate and private key into a PKCS 12 (.p12) file, and then you can import the PKCS 12 file into DMC keystore.</p>
                <p>Execute the command:</p>
                <p>openssl pkcs12 -export -in domain.crt -inkey ~/certs/domain.key -name [hostname] -out domain.p12</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>