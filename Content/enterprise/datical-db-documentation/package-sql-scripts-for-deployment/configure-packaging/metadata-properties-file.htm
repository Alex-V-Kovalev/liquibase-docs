<?xml version="1.0" encoding="utf-8"?>
<html>
    <head><title></title>
    </head>
    <body>
        <h1>Using the metadata.properties file</h1>
        <p>Use the&#160;<code>metadata.properties</code>&#160;file to specify behavior during packaging.&#160;</p>
        <h1 id="Usingthemetadata.propertiesfile-SampleFile">Sample File</h1>
        <p>A sample <code>metadata.properties</code> file is installed with Datical DB in <code>&lt;install-dir&gt;/repl/scripts</code>.&#160;</p>
        <h1 id="Usingthemetadata.propertiesfile-PlacementandPrecedence">Placement and Precedence</h1>
        <p>The <code>metadata.properties</code> file applies to all files and subdirectories in the directory where it is found, including the root directory for SQL scripts.&#160; &#160;Additional <code>metadata.properties</code> files can be used in the subdirectories. A property set in a subdirectory overrides the same property set in a parent directory.&#160;</p>
        <h1 id="Usingthemetadata.propertiesfile-Properties">Properties</h1>
        <p><strong>Table: metadata.properties file</strong>
        </p>
        <div class="table-wrap">
            <table class="wrapped confluenceTable">
                <colgroup>
                    <col style="width: 144.0px;" />
                    <col style="width: 98.0px;" />
                    <col style="width: 916.0px;" />
                </colgroup>
                <tbody>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,0);">Property</span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,0);">Values</span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,0);">Description</span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>disablePropertySubstitution</strong>
                        </td>
                        <td colspan="1" class="confluenceTd">true | false</td>
                        <td colspan="1" class="confluenceTd">Turns off interpretation of properties set in the changelog. See&#160;<a href="Setting_Properties_in_the_Project_Changelog.htm">Setting Properties in the Project Changelog</a>.&#160;</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>disableSqlParser</strong>
                        </td>
                        <td colspan="1" class="confluenceTd">true | false</td>
                        <td colspan="1" class="confluenceTd">
                            <div class="content-wrapper">
                                <p>Overrides the project option <code>enableSqlParser=true</code>.&#160; There is no effect if the project-level setting is&#160;<code>enableSqlParser=false</code>.&#160; This property can be used in metadata.properties for folders that use packaging method DIRECT or SQLFILE.&#160; See&#160;<a href="Using_SQL_Parser.htm">Using SQL Parser</a>.&#160;</p>
                                <div class="confluence-information-macro has-no-icon confluence-information-macro-note conf-macro output-block">
                                    <p class="title">The SQL Parser and the DATA_DML packaging method </p>
                                    <div class="confluence-information-macro-body">
                                        <p>When using the DATA_DML packaging method, the SQL Parser is disabled by default for DML with versions 7.6 and higher.</p>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,10);"><strong>labels</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>&#160;<em>labelName</em>[,<em>labelName</em>...]</p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,10);">One or more labels that identify this set of changes so they can be easily identified and deployed as a group. Multiple values must be separated by commas. No expressions are allowed.&#160;</span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,10);"><strong>contexts</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>&#160;<em>contextName</em>[,<em>contextName</em>...]</p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,10);">One or more context names to associate a changes with specified environments. Multiple values must be separated by commas. No expressions are allowed.&#160;</span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);"><strong>allowRepackaging</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);">true |&#160;<strong>false</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);">Deprecated starting with Datical DB v4.37. Use rerunnable instead.&#160;</span>
                            </p>
                            <p><span style="color: rgb(153,153,153);">Starting with Datical DB v4.21, this property controls whether you can reuse a filename. The default value is false.</span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);"><strong>archive</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);"><strong>true</strong>&#160;| false</span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(153,153,153);">Deprecated starting with Datical DB v4.37. Use rerunnable instead.&#160;</span>
                            </p>
                            <p><span style="color: rgb(153,153,153);">Starting with Datical DB v4.21, this property controls whether files in the data_dml directory get copied to the archive directory. The default value is true.</span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><span style="color: rgb(0,0,10);"><strong>rerunnable</strong></span>
                        </td>
                        <td colspan="1" class="confluenceTd">true | false</td>
                        <td colspan="1" class="confluenceTd">
                            <p>Starting with Datical DB v4.37, use this property to classify SQL scripts as rerunnable (true) or non-rerunnable (false). Use it in place of the archive and allowRepackaging properties.&#160;</p>
                            <ul>
                                <li><em>Rerunnable</em> scripts can be modified in place and repackaged.&#160; They stay in their original directory and are not archived.</li>
                                <li><em>Non-rerunnable</em> scripts can be packaged only once. During packaging the original scripts are moved from the original directory to an archive directory.&#160;They cannot be copied back and edited after packaging.&#160; To modify non-rerunnable scripts, use the create / replace workflow. See&#160;<a href="Developer_Workflows__Managing_Changesets_During_Development_and_Test.htm" rel="nofollow">Developer Workflows: Managing Changesets During Development and Test</a>.&#160;</li>
                            </ul>
                            <p>Stored logic scripts are usually rerunnable as they perform CREATE OR REPLACE operations and can therefore be run multiple times and produce the same result (they are <em>idempotent</em>).&#160;</p>
                            <p>Set rerunnable to true or false.</p>
                            <ul>
                                <li>true - SQL code file is not archived. It can be repackaged.</li>
                                <li>false - SQL code file is archived. It cannot be repackaged.</li>
                            </ul>
                            <p>If not set, the value is assigned based on its type (the folder where it is placed in SCM):</p>
                            <ul style="text-align: left;">
                                <li>ddl - rerunnable=false</li>
                                <li><span style="color: rgb(0,51,102);">ddl_direct - rerunnable=false</span>
                                </li>
                                <li>data_dml - rerunnable=false</li>
                                <li>sql_direct - rerunnable=false</li>
                                <li>sql - rerunnable=false</li>
                                <li>procedure - rerunnable=true</li>
                                <li>package - rerunnable=true</li>
                                <li>packagebody - rerunnable=true</li>
                                <li>function - rerunnable=true</li>
                                <li>trigger - rerunnable=true</li>
                                <li>view - rerunnable=true</li>
                            </ul>
                            <p><strong>Important</strong>: although the use of archive and allowRepackaging are allowed, they are deprecated. In addition, the following combinations of settings now cause an error during packaging:</p>
                            <ul>
                                <li>archive=true and allowRepackaging=true</li>
                                <li>archive=false and allowRepackaging=false</li>
                            </ul>
                            <p>See also&#160;<span style="color: rgb(51,51,51);"><a href="Flexible_Folder_Names.htm" rel="nofollow">Flexible Folder Names</a>. When you use flexible folder names it is important to specify <code>rerunnable</code> correctly.&#160;</span></p>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>packageMethod</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><code>convert |&#160;<code><span style="color: rgb(255,102,0);"><span style="color: rgb(0,51,102);">ddl_direct</span>&#160;</span></code>| direct | data_dml | sqlfile | storedlogic | ssis | changelog</code>
                        </td>
                        <td colspan="1" class="confluenceTd">
                            <p><span style="color: rgb(9,30,66);">Starting with Datical DB v5.0, s</span>pecifies how to package the file, one of <code style="color: rgb(51,51,51);">convert</code>, <code>ddl_direct,</code>  &#160;<code>direct,&#160;</code><code style="color: rgb(51,51,51);">data_dml</code>, <code style="color: rgb(51,51,51);">sqlfile</code>, <code style="color: rgb(51,51,51);">storedlogic</code>, <code style="color: rgb(51,51,51);">ssis</code>. Packager further parses storedlogic files to determine their type, one of <code style="color: rgb(51,51,51);">function</code>, <code style="color: rgb(51,51,51);">procedure</code>, <code style="color: rgb(51,51,51);">package</code>, <code style="color: rgb(51,51,51);">packagebody</code>, <code style="color: rgb(51,51,51);">trigger</code>, <code style="color: rgb(51,51,51);">view</code>.&#160; See&#160;<a href="Flexible_Folder_Names.htm" rel="nofollow" style="color: rgb(51,51,51);">Flexible Folder Names</a>.</p>
                            <p><span style="color: rgb(51,51,51);">Use the <code>changelog</code> value when packaging Liquibase changelogs. They are processed differently than SQL scripts. See <a href="Packaging_Liquibase_Changelogs.htm" rel="nofollow">Packaging Liquibase Changelogs</a> and&#160;<span style="color: rgb(51,51,51);"><span style="color: rgb(51,51,51);"><a href="Flexible_Folder_Names.htm" rel="nofollow">Flexible Folder Names</a>.</span></span></span>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ignore</strong>
                        </td>
                        <td colspan="1" class="confluenceTd">true | false</td>
                        <td colspan="1" class="confluenceTd"><span style="color: rgb(51,51,51);">Do not process files in this directory and all subdirectories.&#160;<span style="color: rgb(51,51,51);">See&#160;<a href="Flexible_Folder_Names.htm" rel="nofollow">Flexible Folder Names</a>.</span></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,10);"><strong>schemaName</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>
                                <br />
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <div class="content-wrapper">
                                <p><span style="color: rgb(0,0,10);">Schema name or comma-separated list of schema names.&#160;</span>
                                </p>
                                <p><span style="color: rgb(0,0,10);">Use either a literal value or a property. (If using a property, it must exist in the changelog, see <a href="Setting_Properties_in_the_Project_Changelog.htm">Setting Properties in the Project Changelog</a>). </span>
                                </p>
                                <p><span style="color: rgb(0,0,10);">If you use fully-qualified object names in SQL scripts, the schema names in the SQL scripts must match the schema names in the project. Packager returns an error if it encounters a schema reference that is not defined in the project.&#160;</span>
                                </p>
                                <p><span style="color: rgb(0,0,10);">For multi-database projects set, <strong>schemaName</strong> in the form <code>&lt;database&gt;.&lt;schema&gt;</code>.&#160;</span><span style="color: rgb(0,0,10);">Starting in version 5.4, you can use a wildcard for the schema: <code>&lt;database&gt;.*</code>.&#160; This capability allows you to manage all SQL scripts for the database in a single folder.&#160;</span>
                                </p>
                                <div class="confluence-information-macro has-no-icon confluence-information-macro-note conf-macro output-block">
                                    <p class="title">Quoting and Casing Considerations When Setting the 'schemaName' property</p>
                                    <div class="confluence-information-macro-body">
                                        <ul>
                                            <li>In order to ensure a consistent deployment experience the casing defined for schema names in the Datical Project and the casing used to set this property MUST MATCH.&#160; If they don't match, Deploy Packager will halt with an error</li>
                                            <li>It is not necessary to quote schemaName values.&#160; Quotes will be removed during Deploy Packager execution.</li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="confluence-information-macro confluence-information-macro-warning conf-macro output-block">
                                    <p class="title">Warning</p>
                                    <div class="confluence-information-macro-body">
                                        <p>Do not&#160; use <code>schemaName</code> if you are using <code>databaseBackupMode=on_demand</code>&#160;in <code>deployPackager.properties with Datical DB versions 5.5 and lower</code>.&#160; &#160;(It is okay to use&#160;<code>databaseBackupMode=on_demand</code>&#160;in <code>deployPackager.properties with Datical DB versions 5.6 and higher.)</code></p>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisPkgName</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>filename</em>
                        </td>
                        <td colspan="1" class="confluenceTd">Name of an SSIS package file, including extension (.dtsv)</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisConfig</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>filename</em>
                        </td>
                        <td colspan="1" class="confluenceTd">Name of an SSIS configuration file, including extension (.dtsConfig)</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisDestPath</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>path</em>
                        </td>
                        <td colspan="1" class="confluenceTd">Destination directory under SSISDB in the SQL Server database.&#160;</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisDestType</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><code>SQL</code>
                        </td>
                        <td colspan="1" class="confluenceTd">How deployed SSIS files are stored on the destination SQL Server. Default is SQL - store the files in the SQL Server database on the destination server.&#160;</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisPkgName</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>name</em>
                        </td>
                        <td colspan="1" class="confluenceTd">Name of an SSIS package file (.dtsx).</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisProjectName</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>name</em>
                        </td>
                        <td colspan="1" class="confluenceTd">Name of anSSIS project file (.ispac).</td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>ssisSupportFileDestPath</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>network-path</em>
                        </td>
                        <td colspan="1" class="confluenceTd">
                            <p>Windows shared drive destination&#160;for support files that accompany an SSIS package file (.dtsx). (example: <code>\\SSIS-TEST\SSIS_SHARED</code>)&#160;</p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd"><strong>versionStrategy</strong>
                        </td>
                        <td class="confluenceTd"><strong>deployAll </strong>|&#160;deployLatest</td>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(9,30,66);">S</span>pecifies how to deploy existing versions of rerunnable changesets if multiple versions are available to deploy. Values are not case-sensitive.&#160;</p>
                            <ul>
                                <li>deployAll - (default) deploy all eligible versions in the order they appear in changelog.xml. This has been the strategy used historically (before versioning).&#160;</li>
                                <li>deployLatest - deploy only the latest eligible version.&#160;</li>
                            </ul>
                            <p>If versionStrategy is set to any other value, processing stops with an error.</p>
                            <p>A changeset is eligible to deploy if it meets criteria set in the deploy operation (label expression).</p>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="1" class="confluenceTd"><strong>folderOrder</strong>
                        </td>
                        <td colspan="1" class="confluenceTd"><em>Comma-separated list of folders</em>
                        </td>
                        <td colspan="1" class="confluenceTd">
                            <p>Specified only in the metadata.properties file at the top of the SQL code tree. That directory must be the one specifed by the&#160;<strong>sqlScmSQLBaseDir</strong>property&#160;in the&#160;<code>deployPackager.properties</code> file.</p>
                            <p>Provide a list of directories, in the order you want them packaged. Files from these directories are pulled to the front of the packaging order in front of any other folders in the packaging job. See&#160;<a href="Custom_Packaging_Order.htm" rel="nofollow">Custom Packaging Order</a>.&#160;</p>
                            <p>
                                <br />
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <h1 id="Usingthemetadata.propertiesfile-Samplemetadata.propertiesfile">Sample metadata.properties file</h1>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl hide-border-bottom" style="border-bottom-width: 1px;"><b class="code-title">Sample metadata.properties file</b><span class="collapse-source expand-control" style="display: none;"><span class="expand-control-text">Expand source</span></span>
            </div>
            <div class="codeContent panelContent pdl hide-toolbar"><pre class="syntaxhighlighter-pre" xml:space="preserve"># 	
# Placement and Precedence
#
# The metadata.properties file applies to all files and subdirectories in the directory where it is found, including the root directory for SQL scripts.
# Additional metadata.properties files can be used in the subdirectories. A property set in a subdirectory overrides the same property set in a parent directory.
#
#
# The following properties can be set in the metadata.properties file:
#
# disablePropertySubstitution - If 'true' - disables variable substitution performed by packager prior to packaging script.  Default value 'false'.
#
# disableSqlParser   - This is only for Oracle.  Overrides the project option enableSqlParser=true.  There is no effect if the project-level setting is enableSqlParser=false.  
#                      This property can be used in metadata.properties for folders that use packaging method DIRECT or SQLFILE.
#
# labels             - One or more labels that identify this set of changes so they can be easily identified and deployed as a group
#                      labelName[,labelName...]
#
# contexts           - One or more context names to associate a changes with specified environments.
#                      contextName[,contextName...]
#
# allowRepackaging   - DEPRECATED starting with Datical DB v4.37. Use [rerunnable] instead.
#                      This property previously controlled whether you can reuse a filename. The default value was 'false', but it is now deprecated.
#
# archive            - DEPRECATED starting with Datical DB v4.37. Use rerunnable instead.
#                      This property previously controlled whether files in the data_dml directory get copied to the archive directory.  
#                      The default value was 'true', but now it is deprecated.
#
# rerunnable         - Classify SQL scripts as rerunnable (true) or non-rerunnable (false). Use it in place of the [archive] and [allowRepackaging] properties.
#                      Set rerunnable to 'true' or 'false':
#                          true - SQL code file is not archived. It can be repackaged.
#                          false - SQL code file is archived. It cannot be repackaged.
#
#                      If not set, the value is assigned based on its type (the folder where it is placed in SCM):
#                          ddl - rerunnable=false
#                          data_dml - rerunnable=false
#                          ddl_direct - rerunnable=false
#                          sql_direct - rerunnable=false
#                          sql - rerunnable=false
#                          procedure - rerunnable=true
#                          package - rerunnable=true
#                          packagebody - rerunnable=true
#                          function - rerunnable=true
#                          trigger - rerunnable=true
#                          view - rerunnable=true
#
#                      Important: although the use of archive and allowRepackaging are allowed, they are deprecated.
#                      In addition, the following combinations of settings now cause an error during packaging:
#                          archive=true and allowRepackaging=true
#                          archive=false and allowRepackaging=false
#
#                      Also you can use Flexible Folder Names. When you use flexible folder names it is important to specify rerunnable correctly.
#
#
# packageMethod      - Specifies how to package the file. One of 'convert', 'ddl_direct', 'direct', 'data_dml', 'sqlfile', 'storedlogic', 'ssis'.
#                      Packager further parses storedlogic files to determine their type, one of 'function', 'procedure', 'package', 'packagebody', 'trigger', 'view'.
#                      Use the 'changelog' value when packaging Liquibase changelogs. They are processed differently than SQL scripts.
#
# ignore             - If 'true' - skip files in this directory and all subdirectories and do not process them.
#
# schemaName         - Schema name or comma-separated list of schema names.
#                      Use either a literal value or a property. The property must exist in the changelog.
#                      If you use fully-qualified object names in SQL scripts, the schema names in the SQL scripts must match the schema names in the project.
#                      Packager returns an error if it encounters a schema reference that is not defined in the project.
#
#                      For multi-database projects set, schemaName in the form &lt;database&gt;.&lt;schema&gt;.
#                      Starting in version 5.4, you can use a wildcard for the schema: &lt;database&gt;.*.
#                      This capability allows you to manage all SQL scripts for the database in a single folder.
#
#                      WARNING
#                      Do not  use [schemaName] if you are using databaseBackupMode=on_demand in deployPackager.properties.
#
# versionStrategy    - Specifies how to deploy existing versions of changesets if multiple versions are available to deploy.
#                      Values are not case-sensitive. 
#                          deployAll - Deploy all eligible versions in the order they appear in changelog.xml. Default value.
#                                      This has been the strategy used historically (before versioning).
#                          deployLatest - deploy only the latest eligible version. 
#
#                      If versionStrategy is set to any other value, processing stops with an error.
#                      A changeset is eligible to deploy if it meets criteria set in the deploy operation (label expression).
#
#
# The following property is only allowed in the root directory (sqlScmSQLBaseDir) and is not allowed in the subdirectories:
#
# folderOrder        - Comma separated list of folder names to enforce the package order of files. This can be used
#                      when packageMethod ordering (deployPacakger property) is insufficient.
#
#
### Microsoft SQL Server ###
#
# SQL Server Integration Services (SSIS) related properties
#
# ssisPkgName        - Name of an SSIS package file, including extension (.dtsv)
#
# ssisConfig         - Name of an SSIS configuration file, including extension (.dtsConfig)
#
# ssisDestPath       - Destination directory under SSISDB in the SQL Server database.
#
# ssisDestType       - How deployed SSIS files are stored on the destination SQL Server.
#                      Default is 'SQL' - store the files in the SQL Server database on the destination server.
#
# ssisPkgName        - Name of an SSIS package file (.dtsx)
#
# ssisProjectName    - Name of anSSIS project file (.ispac)
#
# ssisSupportFileDestPath -
#                      Windows shared drive destination for support files that accompany an SSIS package file (.dtsx)
#                      Example: \\SSIS-TEST\SSIS_SHARED
#
labels=
contexts=
rerunnable= 
packageMethod=
schemaName=
versionStrategy=
disablePropertySubstitution=

</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <h1 id="Usingthemetadata.propertiesfile-AssigningLabelsandContexts">Assigning Labels and Contexts</h1>
        <p>You can automatically assign labels and contexts to changesets is by using the <strong>labels</strong> property and <strong>contexts</strong> property.</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>metadata.properties</b>
            </div>
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve"># This properties file controls label and context values on Deployment Packager generated change sets
labels=label1,label2,label3
contexts=QA,PERF_TEST,UAT</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <h1 id="Usingthemetadata.propertiesfile-EnablingRepackaging">Enabling Repackaging</h1>
        <p>The allowRepackaging property has been deprecated. Use the rerunnable property instead.&#160;</p>
        <p>If for future scripts you want to be able to repackage the without changing the filename and do not want the script to be archived, set <code>rerunnable=true&#160;</code>in the metadata.properties folder.&#160; The Deployment Packager then ignores the earlier version of this file and repackages it as a change set with a higher version number than the previous version.&#160; If rerunnable is not set, the Deployment Package ignores any files already packaged and moves them to the archive folder.&#160; You cannot re-use the same script name unless you are using&#160;<code>rerunnable=true.</code></p>
        <p><strong>Note</strong>: The new script needs to account for what was already deployed by the older script.</p>
        <p>For example,&#160;</p>
        <ol>
            <li>You package a script that creates a table.&#160;</li>
            <li>You want to change the script and repackage it. The changed script still creates the same table.&#160; &#160;</li>
        </ol>
        <p>The changed script needs to drop the table before re-creating it.</p>
        <h1 class="auto-cursor-target" id="Usingthemetadata.propertiesfile-UsingschemaNamewithMulti-schemaandMulti-databaseProjects">Using schemaName with Multi-schema and Multi-database Projects</h1>
        <p>Projects that use multiple schemas require that that changesets include a schema specification for object changes.&#160;&#160;</p>
        <p>Multi-database projects are also multi-schema. Each database may have multiple schema. Use the wildcard ( * ) for the schema in the <code>schemaName</code> attribute to manage the projects using a database folder instead of a folder per schema.&#160;</p>
        <p>During deployment, Deployment Packager evaluates the <strong>schemaName</strong> property. Evaluation behavior varies with the type of script as follows:</p>
        <ul>
            <li>If a sql script (ddl directory) does not specify a schema name for an object, the first schema listed in the schemaName property is used. Fully-qualified object names are considered valid, even if they use a schema name that does not match the schemaName setting.&#160;</li>
            <li>If a stored-logic script (function, package, packagebody, procedure, trigger, view directories) specifies a schema name for an object that does not match the first schema in the schemaName list, an error is returned.</li>
            <li>If a directly-executed script (sql, sql_direct directories) specifies a schema name for an object, the object is deployed to the schema specified in the script. The script setting overrides the schemaName property setting. However, the ChangeLog entry shows the the first item in theschemaName list.</li>
        </ul>
        <div class="confluence-information-macro confluence-information-macro-information conf-macro output-block">
            <p class="title">Note</p>
            <div class="confluence-information-macro-body">If a single-schema project includes a schemaName setting in <code>metadata.properties</code>, packaging fails with an error. Schema cannot be specified for single-schema projects.&#160;</div>
        </div>
        <p>
            <br />
        </p>
        <p>The schemaName property is evaluated only for some types of scripts, corresponding with the script directories:</p>
        <div class="table-wrap">
            <table class="wrapped confluenceTable">
                <colgroup>
                    <col />
                    <col />
                </colgroup>
                <tbody>
                    <tr>
                        <th class="confluenceTh">Evaluated</th>
                        <th class="confluenceTh">Not evaluated</th>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p>data_dml</p>
                            <p>ddl</p>
                            <p><span style="color: rgb(0,51,102);">ddl_direct</span>
                            </p>
                            <p>function</p>
                            <p>package</p>
                            <p>packagebody</p>
                            <p>procedure</p>
                            <p>sql</p>
                            <p>sql_direct (*see note about Microsoft SQL Server below)</p>
                            <p>trigger</p>
                            <p>view</p>
                        </td>
                        <td class="confluenceTd">
                            <p>sqlplus</p>
                            <p>
                                <br />
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <p>*For Microsoft SQL Server scripts must use fully qualified object names and references in the sql_direct folder, unless your schema is dbo AND dbo is set as the default schema for your Datical user.</p>
        <p>
            <br />
        </p>
        <p>For examples, see near the bottom of&#160;<a href="..\..\DDKB\pages\How_To__Leverage_the__metadata_properties__file.htm">How To: Leverage the "metadata.properties" file</a>.</p>
    </body>
</html>