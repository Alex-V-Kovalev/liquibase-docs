<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Rules Overview</h1>
        <p>Rules are used to enforce policies for changes to databases.</p>
        <p>Use the three-stage forecasting process to determine if changesets comply with your requirements. If the changesets fail the rules during forecasting, you can fix them before you deploy the changesets to your databases.</p>
        <p>Some rules are provided with Datical DB software. They are described in Rules Library. You can also write your own rules, either by copying and editing the provided rules or by writing them yourself.</p>
        <p>Each project includes a Rules directory where you place the rules that you want to apply to that project.</p>
        <p>The rules engine is implemented using the open-source Drools Business Rules Management System.</p>
        <p>The rules engine contains models of objects for Datical DB and the database you are working with. Rules consist of expressions that evaluate selected objects and specify a response.</p>
        <p>Rules Location and Naming</p>
        <p>Location</p>
        <p>To use rules in a project, you place rules files (.drl) in the Rules directory hierarchy under the project.</p>
        <p>&lt;project&gt;/</p>
        <p>Rules/</p>
        <p>Forecast/</p>
        <p>PostForecast/</p>
        <p>PreForecast/</p>
        <p>SqlRules/</p>
        <p>Files that contain one or more rules</p>
        <p>Sub folders containing individual or bundled rules</p>
        <p>Rules File Naming Conventions</p>
        <p>Give each rule a short, meaningful name. All rules files must have a .drl file extension. Rule files without the extension are not picked up for forecasting.</p>
        <p>&lt;rule_name&gt;.drl</p>
        <p>Where Rules Are Applied</p>
        <p>Rules are available to be applied during packing and during each phase of the forecasting process.</p>
        <p>Script File Extension Requirements</p>
        <p>Rules only check SQL scripts with the following extensions by default: .sql, .dml, .ddl</p>
        <p>To optionally add other SQL script extensions for other file types to be checked by SqlRules, change the sqlRules.supportedScriptExtensions property in the daticaldb.properties file, which is located in the root directory for the project (&lt;project&gt;).</p>
        <p>Example:</p>
        <p>sqlRules.supportedScriptExtensions=.pkg,.trg,.prc,.proc,.ddl,.sql,.dml</p>
        <p>Packaging Rules</p>
        <p>Rules in the SqlRules directory are applied by Deployment Packager when packaging SQL scripts into changesets. They are not part of the forecasting process.</p>
        <p>Use these rules to test the SQL statements in all SQL scripts before they are packaged. Typically they are used to test for disallowed statements, such as grants.</p>
        <p>SqlRules</p>
        <p>Forecasting Rules</p>
        <p>The forecasting process allows to test the impact of changesets on the target database. You can apply rules during each stage of forecasting. Each stage of forecasting has its own directory of rules.</p>
        <p>PreForecast - applied immediately before a forecast</p>
        <p>Forecast - applied to produce a forecast of the impact of changes on the database schema</p>
        <p>PostForecast - applied to assess the results of a forecast and to perform further tests</p>
        <p>The available object data models for forecasting rules vary by stage.</p>
        <p>Rules Types</p>
        <p>SqlRules</p>
        <p>These rules are executed by the Deployment Packager at the beginning of the packaging process. When the script deployPackager.groovy is run, tests all of the SQL scripts being packaged against the rules located in the SqlRules folder.</p>
        <p>The Deployment Packager runs the runRules command to run rules on the SQL scripts slated for packaging.  This is run in both preview and active mode.  You can run the command outside of Deployment Packager as follows.</p>
        <p>hammer runRules [SQL file | List of SQL files | SQL files folder]</p>
        <p>Rules are read from the SqlRules folder.</p>
        <p>The rules engine is fired once for each script.</p>
        <p>Use commas or semicolons to separate lists of files passed to the command.  If semicolons are used, the list should surrounded by double quotes.</p>
        <p>PreForecast</p>
        <p>PreForecast rules run before forecasting starts. They can be used to test conditions of Datical DB objects and client objects that are required in order for forecasting to be performed.</p>
        <p>This is the best place to perform validation to ensure:</p>
        <p>Changelog Creator, timestamps, and comments exist</p>
        <p>Developers and DBAs follow best practices for changeset management</p>
        <p>Rules are read from the PreForecast folder.</p>
        <p>In this phase, the rules engine is fired once.</p>
        <p>Forecast</p>
        <p>Forecast rules are run during the forecast process. During forecasting, Datical DB builds a model of the database as it currently exists, and then simulates what would happen to that model as each change is applied to the database. The changes are not applied to the database. The results of a forecast help you determine if there would be undesired effects caused by the changes before you run them.</p>
        <p>Most rules are written to run during the forecast. These rules validate the change model as well and determine how the changes affect the target database schema.</p>
        <p>Some of the most common classes of rules:</p>
        <p>Verify or Enforce Corporate DDL Standards</p>
        <p>Assess the validity of DDL changes</p>
        <p>Protect against DDL changes that could have a negative impact on data</p>
        <p>Limit ability to deploy certain types of DDL (especially, grants)</p>
        <p>Processing proceeds in two steps:</p>
        <p>Run built-in forecast checks. These automatic tests basic semantic integrity. For example, when a script renames a column in a database, a built-in rule checks that both the table and the column exist.</p>
        <p>Run rules in the Forecast folder.</p>
        <p>Rules are read from the Forecast folder.</p>
        <p>In this phase, the rules engine is fired once FOR EACH CHANGE to be deployed.</p>
        <p>PostForecast</p>
        <p>PostForecast rules are run after the forecasting process finishes. You can use the rules to examine the final forecasted state of the database or parts of the Forecast object itself. For example, you could test whether a forecast threw more than a specified number of warnings.</p>
        <p>Rules are written to execute after forecast but before deployment.</p>
        <p>Rules in this stage typically:</p>
        <p>Validate rules on the database using the forecasted database model</p>
        <p>Look for DDL drift before applying additional changes</p>
        <p>Rules are read from the PostForecast folder.</p>
        <p>In this phase, the rules engine is fired once.</p>
        <p>Organizing Rules</p>
        <p>Directory Structure</p>
        <p>Rules are executed according to phase: sqlrules, pre-forecast, forecast, and post-forecast. Rules are applied to the appropriate phase based on their location in the rules subfolder:</p>
        <p>&lt;Datical DB Project&gt;/Rules/</p>
        <p>SQLRules</p>
        <p>PreForecast</p>
        <p>Forecast</p>
        <p>PostForecast</p>
        <p>In addition to these standard folders, you can also specify sub-folders to better organize your rules.</p>
        <p>Minimally, you will want to specify company specific directories so you can keep your rules separate from the Datical supplied rules.</p>
        <p>As you have more rules, consider adding additional sub-folders where needed to keep the rules from getting overwhelming. Some ideal categories are:</p>
        <p>&lt;rule goal&gt;: Security, Access Control, Dependency Validation, Data Safety, Corporate Standards, Audit and Compliance, etc.</p>
        <p>&lt;rule db object&gt;: group the rules by the primary object type we're writing the rule about (Table, Column, Index, StoredProcedure, Trigger, etc)</p>
        <p>An example of this directory structure looks as follows:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>
                <p>directory-structure</p>
            </MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">&lt;Datical DB Project&gt;/
Rules/
   Forecast/
      com.datical/
      com.my_company/
         Security/
         Table/
         Stored Logic/
         Index/
   PostForecast/
      com.datical/
      com.my_company/
   PreForecast/
      com.datical/
      com.my_company/
   SqlRules
      com.datical/
      com.my_company</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Centralized Rules</h2>
        <p>If you have many projects that all use the same set of rules, you can optionally centralize the rules by creating a rules repository in source control.</p>
        <p>See this page for more details: How to Create a Common Rules Repository</p>
    </body>
</html>