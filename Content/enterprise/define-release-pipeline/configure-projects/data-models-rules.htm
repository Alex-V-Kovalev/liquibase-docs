<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Liquibase Enterprise Documentation</title><meta name="description" content="Liquibase Enterprise Documentation" /></head>
    <body>
        <h1>Data Models for Rules</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><MadCap:snippetBlock src="../../../Z_Resources/Snippets/enterprise/DBA.flsnp" /><p>A rule tests conditions against database objects. This section describes how those objects are represented in data models used by rules.&#160;</p><h2>Database Model</h2> <h2 id="DataModelsforRules-_Toc485899252Hierarchy">Hierarchy</h2><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">DbModel                                           - import com.datical.dbsim.model.DbModel;
   Collection of Schemas                          - import com.datical.dbsim.model.Schema;
      Collection of Tables                        - import com.datical.dbsim.model.Table;
         List of Columns                          - import com.datical.dbsim.model.Column;
         Collection of Foreign Key Constraints    - import com.datical.dbsim.model.FkConstraint;
         Collection of Not Null Constraints       - import com.datical.dbsim.model.NotNullConstraint;
         Collection of Unique Constraints         - import com.datical.dbsim.model.UniqueConstraint;
         Collection of Check Constraints          - import com.datical.dbsim.model.CheckConstraint;
         Collection of Indices                    - import com.datical.dbsim.model.Index;
      Collection of Views                         - import com.datical.dbsim.model.View;
         List of Columns                          - import com.datical.dbsim.model.Column;
      Collection of Sequences                     - import com.datical.dbsim.model.Sequence;
      Collection of Procedures                    - import com.datical.dbsim.model.Procedure;
      Collection of Functions                     - import com.datical.dbsim.model.Function;
      Collection of Packages                      - import com.datical.dbsim.model.Package;
      Collection of Package Bodies                - import com.datical.dbsim.model.PackageBody;
      Collection of Triggers                      - import com.datical.dbsim.model.Trigger;
      Collection of Synonyms                      - import com.datical.dbsim.model.Synonym;</pre></div></div><p><br /></p><h2 id="DataModelsforRules-_Toc485899253DBModel">DBModel</h2><p><strong><em>import com.datical.dbsim.model.DbModel;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Collection&lt;Schema&gt; getSchemas();
Schema getSchema(String schemaName);
List&lt;DbModelChangeSet&gt; getModelChangeSets();
String getCatalogName();
</pre></div></div><h2 id="DataModelsforRules-_Toc485899254Schema">Schema</h2><p><strong><em>import com.datical.dbsim.model.Schema;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
Collection&lt;Table&gt; getTables();
Collection&lt;View&gt; getViews();
Collection&lt;Sequence&gt; getSequences();
Collection&lt;Procedure&gt; getProcedures();
Collection&lt;Function&gt; getFunctions();
Collection&lt;Package&gt; getPackages();
Collection&lt;PackageBody&gt; getPackageBodies();
Collection&lt;Trigger&gt; getTriggers();
Collection&lt;Synonym&gt; getSynonyms();
List&lt;Index&gt; getIndices();
List&lt;CheckConstraint&gt; getCheckConstraints(String tableName);
List&lt;UniqueConstraint&gt; getUniqueConstraints(String tableName);
List&lt;NotNullConstraint&gt; getNotNullConstraints(String tableName);
List&lt;FkConstraint&gt; getFkConstraints(String tableName);
boolean exists(DbModel model, Object storedLogic);</pre></div></div><h2 id="DataModelsforRules-_Toc485899255Table">Table</h2><p><strong><em>import com.datical.dbsim.model.Table;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
List&lt;Column&gt; getColumns();
Integer getRowCount();
PkConstraint getPkConstraint();
String getStorageOptions();
Collection&lt;FkConstraint&gt; getFkConstraints();
Collection&lt;NotNullConstraint&gt; getNotNullConstraints();
Collection&lt;UniqueConstraint&gt; getUniqueConstraints();
Collection&lt;Index&gt; getIndices();
Collection&lt;CheckConstraint&gt; getCheckConstraints(); 

// check to see if the Table object's name exists in the DbModel
boolean exists(DbModel model, Object table);</pre></div></div><h2 id="DataModelsforRules-_Toc485899256Column">Column</h2><p><strong><em>import com.datical.dbsim.model.Column;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getType();
boolean isPk();
boolean isAutoIncrement();
DefaultValue getDefaultValue();</pre></div></div><h2 id="DataModelsforRules-_Toc485899257ForeignKeyConstraint"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899257"></span>Foreign Key Constraint</h2><p><strong><em>import com.datical.dbsim.model.FkConstraint;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String refTableName();
String refSchemaName(); 

// check to see if the FKConstraint object's table name matches a table in the DbModel
boolean exists(DbModel model, Object fkConstraint);</pre></div></div><h2 id="DataModelsforRules-_Toc485899258NotNullConstraint">Not Null Constraint</h2><p><strong><em>import com.datical.dbsim.model.NotNullConstraint;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getColumnName(); 

// check to see if the NotNullConstraint object's table name matches a table in the DbModel
boolean exists(DbModel model, Object notNullConstraint);</pre></div></div><p><span style="font-size: 20.0px;">Unique Constraint</span></p><p><strong><em>import com.datical.dbsim.model.UniqueConstraint;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getTableName();
String getName();
String getColumnName(); 

// check to see if the UniqueConstraint object's table name matches a table in the DbModel
boolean exists(DbModel model, Object uniqueConstraint);</pre></div></div><h2 id="DataModelsforRules-_Toc485899260CheckConstraint">Check Constraint</h2><p><strong><em>import com.datical.dbsim.model.CheckConstraint;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
boolean isDisabled(); 

// check to see if the CheckConstraint object's table name matches a table in the DbModel
boolean exists(DbModel model, Object checkConstraint);</pre></div></div><h2 id="DataModelsforRules-_Toc485899261Index">Index</h2><p><strong><em>import com.datical.dbsim.model.Index;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getStorageOptions();
List&lt;String&gt; getColumns(); 

// check to see if the Index object's table name matches a table in the DbModel
boolean exists(DbModel model, Object index);</pre></div></div><h2 id="DataModelsforRules-_Toc485899262View">View</h2><p><strong><em>import com.datical.dbsim.model.View;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
List&lt;Column&gt; getColumns();</pre></div></div><h2 id="DataModelsforRules-_Toc485899263Sequence">Sequence</h2><p><strong><em>import com.datical.dbsim.model.Sequence;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName(); 

// check to see if the Sequence object's name exists in the DbModel 
boolean exists(DbModel model, Object sequence);</pre></div></div><h2 id="DataModelsforRules-_Toc485899264Procedure">Procedure</h2><p><strong><em>import com.datical.dbsim.model.Procedure;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899265Function">Function</h2><p><strong><em>import com.datical.dbsim.model.Function;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899266Package">Package</h2><p><strong><em>import com.datical.dbsim.model.Package;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899267PackageBody">PackageBody</h2><p><strong><em>import com.datical.dbsim.model.PackageBody;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899268Trigger">Trigger</h2><p><strong><em>import com.datical.dbsim.model.Trigger;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
boolean isDisabled(); 

// check to see if the Trigger object's name exists in the DbModel
boolean exists(DbModel model, Object trigger);</pre></div></div><h2 id="DataModelsforRules-_Toc485899269Synonym">Synonym</h2><p><strong><em>import com.datical.dbsim.model.Synonym;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName(); 

// check to see if the Synonym object's name exists in the DbModel
boolean exists(DbModel model, Object synonym);</pre></div></div><h2 id="DataModelsforRules-_Toc485899270DefaultValue">DefaultValue</h2><p><strong><em>import com.datical.dbsim.model.DefaultValue;</em></strong></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">enum TYPE { STRING, NUMERIC, BOOLEAN, DATE, COMPUTED } ;
TYPE getType();
String getValue(); </pre></div></div><h1 id="DataModelsforRules-_Toc485899271ChangeModels">Change Models</h1> <h2 id="DataModelsforRules-_Toc485899272AllChangeModels">All Change Models</h2><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Boolean supportsRollback()</pre></div></div><ul><li>Returns a Boolean indicating that a change model supports auto-rollback (or not)</li></ul><h2 id="DataModelsforRules-_Toc485899273AutoIncrement">Auto Increment</h2><ul><li><strong>AddAutoIncrementType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddAutoIncrementType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getColumnName();
long getIncrementBy();
String getSchemaName();
long getStartWith();
String getTableName();
boolean isSetIncrementBy();
boolean isSetStartWith();</pre></div></div><h2 id="DataModelsforRules-_Toc485899274Columns">Columns</h2><ul><li><strong>AddColumnType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddColumnType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnAddColumnType&gt; getColumn();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>ColumnAddColumnType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnAddColumnType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getAfterColumn();
String getBeforeColumn();
BigInteger getPosition();</pre></div></div><ul><li><strong>ColumnBaseType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnBaseType;<br />Note: Call the RuleFunctions class static method getText(myColumnBaseType); to get the text associated with this refactoring. <br /></em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Object getAutoIncrement();
ConstraintsType getConstraints();
String getDefaultValue();
Object getDefaultValueBoolean();
String getDefaultValueComputed();
String getDefaultValueDate();
String getDefaultValueNumeric();
String getDefaultValueSequenceCurrent();
String getDefaultValueSequenceNext();
String getEncoding();
long getIncrementBy();
String getName();
String getRemarks();
long getStartWith();
String getType();
String getValue();
String getValueBlobFile();
String getValueBoolean();
String getValueClobFile();
String getValueComputed();
String getValueDate();
String getValueNumeric();
String getValueSequenceCurrent();
String getValueSequenceNext();
boolean isSetIncrementBy();
boolean isSetStartWith();</pre></div></div><ul><li><strong>ColumnExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>ColumnLoadDataType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnLoadDataType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getDefaultValue();
Object getDefaultValueBoolean();
String getDefaultValueComputed();
String getDefaultValueDate();
String getDefaultValueNumeric();
String getHeader();
Object getIndex();
String getName();
String getType();</pre></div></div><ul><li><strong>ColumnLoadUpdateDataType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnLoadUpdateDataType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getDefaultValue();
Object getDefaultValueBoolean();
String getDefaultValueComputed();
String getDefaultValueDate();
String getDefaultValueNumeric();
String getHeader();
Object getIndex();
String getName();
String getType();</pre></div></div><ul><li><strong>ColumnType</strong><em>import org.liquibase.xml.ns.dbchangelog.ColumnType;<br />Note: Call the RuleFunctions class static method getText(myColumnType); to get the text associated with this refactoring.<br /></em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Object getAutoIncrement();
Object getComputed();
ConstraintsType getConstraints();
String getDefaultValue();
Object getDefaultValueBoolean();
String getDefaultValueComputed();
String getDefaultValueDate();
String getDefaultValueNumeric();
String getDefaultValueSequenceCurrent();
String getDefaultValueSequenceNext();
String getEncoding();
long getIncrementBy();
String getName();
String getRemarks();
long getStartWith();
String getType();
String getValue();
String getValueBlobFile();
String getValueBoolean();
String getValueClobFile();
String getValueComputed();
String getValueDate();
String getValueNumeric();
String getValueSequenceCurrent();
String getValueSequenceNext();
boolean isSetIncrementBy();
boolean isSetStartWith();</pre></div></div><ul><li><strong>DropColumnType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropColumnType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>MergeColumnsType</strong><em>import org.liquibase.xml.ns.dbchangelog.MergeColumnsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumn1Name();
String getColumn2Name();
String getFinalColumnName();
String getFinalColumnType();
String getJoinString();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>RenameColumnType</strong><em>import org.liquibase.xml.ns.dbchangelog.RenameColumnType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getNewColumnName();
String getOldColumnName();
String getRemarks();
String getSchemaName();
String getTableName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899275Constraints">Constraints</h2><ul><li><strong>ConstraintsType</strong><em>import org.liquibase.xml.ns.dbchangelog.ConstraintsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCheckConstraint();
Object getDeferrable();
Object getDeleteCascade();
String getForeignKeyName();
Object getInitiallyDeferred();
Object getNullable();
Object getPrimaryKey();
String getPrimaryKeyName();
String getPrimaryKeyTablespace();
String getReferencedColumnNames();
String getReferencedTableName();
String getReferences();
Object getUnique();
String getUniqueConstraintName();</pre></div></div><h3 id="DataModelsforRules-_Toc485899276CheckConstraints"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899276"></span>Check Constraints</h3><ul><li><strong>AddCheckConstraintType</strong><em>import com.datical.xml.ns.storedlogic.AddCheckConstraintType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myAddCheckConstraintType);</strong> to get the text associated with this refactoring.&#160;</li></ul><p><br /></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
Boolean getDisabled();
String getSchemaName();
String getTableName();
String getXmlns();
</pre></div></div><ul><li><strong>DisableCheckConstraintType</strong><em>import com.datical.xml.ns.storedlogic.DisableCheckConstraintType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myDisableCheckConstraintType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
String getSchemaName();
String getTableName();
String getXmlns();</pre></div></div><ul><li><strong>DropCheckConstraintType</strong><em>import com.datical.xml.ns.storedlogic.DropCheckConstraintType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
String getSchemaName();
String getTableName();
String getXmlns();</pre></div></div><ul><li><strong>EnableCheckConstraintType</strong><em>import com.datical.xml.ns.storedlogic.EnableCheckConstraintType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myEnableCheckConstraintType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
String getSchemaName();
String getTableName();
String getXmlns();</pre></div></div><h3 id="DataModelsforRules-_Toc485899277ForeignKeyConstraints"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899277"></span>Foreign Key Constraints</h3><ul><li><strong>AddForeignKeyConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getBaseColumnNames();
String getBaseTableCatalogName();
String getBaseTableName();
String getBaseTableSchemaName();
String getConstraintName();
Object getDeferrable();
Object getDeleteCascade();
Object getInitiallyDeferred();
FkCascadeActionOptions getOnDelete();
FkCascadeActionOptions getOnUpdate();
String getReferencedColumnNames();
String getReferencedTableCatalogName();
String getReferencedTableName();
String getReferencedTableSchemaName();
Object getReferencesUniqueColumn();
boolean isSetOnDelete();
boolean isSetOnUpdate();</pre></div></div><ul><li><strong>DropAllForeignKeyConstraintsType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropAllForeignKeyConstraintsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getBaseTableCatalogName();
String getBaseTableName();
String getBaseTableSchemaName();</pre></div></div><ul><li><strong>DropForeignKeyConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropForeignKeyConstraintType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getBaseTableCatalogName();
String getBaseTableName();
String getBaseTableSchemaName();
String getConstraintName();</pre></div></div><ul><li><strong>ForeignKeyConstraintExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getForeignKeyName();
String getForeignKeyTableName();
String getSchemaName();</pre></div></div><h3 id="DataModelsforRules-_Toc485899278NotNullConstraints"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899278"></span>Not Null Constraints</h3><ul><li><strong>AddNotNullConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddNotNullConstraintType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getColumnName();
String getDefaultNullValue();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>DropNotNullConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropNotNullConstraintType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getColumnName();
String getSchemaName();
String getTableName();</pre></div></div><h3 id="DataModelsforRules-_Toc485899279UniqueConstraints"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899279"></span>Unique Constraints</h3><ul><li><strong>AddUniqueConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddUniqueConstraintType;</em></li></ul><p><br /></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnNames();
String getConstraintName();
Object getDeferrable();
Object getDisabled();
Object getInitiallyDeferred();
String getSchemaName();
String getTableName();
String getTablespace();
</pre></div></div><ul><li><strong>DropUniqueConstraintType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropUniqueConstraintType;</em></li></ul><p><br /></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
String getSchemaName();
String getTableName();
String getUniqueColumns();
</pre></div></div><h2 id="DataModelsforRules-_Toc485899280DefaultValues">Default Values</h2><ul><li><strong>AddDefaultValueType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddDefaultValueType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getColumnName();
String getDefaultValue();
String getDefaultValueBoolean();
String getDefaultValueComputed();
String getDefaultValueDate();
String getDefaultValueNumeric();
String getDefaultValueSequenceNext();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>DropDefaultValueType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropDefaultValueType;</em></li></ul><p><br /></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnDataType();
String getColumnName();
String getSchemaName();
String getTableName();
</pre></div></div><h2 id="DataModelsforRules-_Toc485899281Functions">Functions</h2><ul><li><strong>CreateFunctionType</strong><em>import com.datical.xml.ns.storedlogic.CreateFunctionType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCreateFunctionType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getDbms();
String getEncoding();
String getFunctionName();
String getPath();
String getSchemaName();
String getXmlns();
boolean isSetRelativeToChangelogFile();
boolean isSetReplaceIfExists();</pre></div></div><ul><li><strong>DropFunctionType</strong><em>import com.datical.xml.ns.storedlogic.DropFunctionType;</em></li></ul><p><br /></p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getFunctionName();
String getSchemaName();
</pre></div></div><h2 id="DataModelsforRules-_Toc485899282Indices">Indices</h2><ul><li><strong>CreateIndexType</strong><em>import org.liquibase.xml.ns.dbchangelog.CreateIndexType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getAssociatedWith();
String getCatalogName();
Object getClustered();
List&lt;ColumnType&gt; getColumn();
String getIndexName();
String getSchemaName();
StorageOptionsType getStorageOptions();
String getTableName();
String getTablespace();
Object getUnique();</pre></div></div><ul><li><strong>DropIndexType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropIndexType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getAssociatedWith();
String getCatalogName();
String getIndexName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>IndexExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.IndexExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnNames();
String getIndexName();
String getSchemaName();
String getTableName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899283Packages">Packages</h2><ul><li><strong>CreatePackageBodyType</strong><em>import com.datical.xml.ns.storedlogic.CreatePackageBodyType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCreatePackageBodyType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getDbms();
String getEncoding();
String getPackageBodyName();
String getPath();
String getSchemaName();
boolean isSetRelativeToChangelogFile();</pre></div></div><ul><li><strong>CreatePackageType</strong><em>import com.datical.xml.ns.storedlogic.CreatePackageType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCreatePackageType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getDbms();
String getEncoding();
String getPackageName();
String getPath();
String getSchemaName();
boolean isSetRelativeToChangelogFile();</pre></div></div><ul><li><strong>DropPackageBodyType</strong><em>import com.datical.xml.ns.storedlogic.DropPackageBodyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getPackageBodyName();
String getSchemaName();</pre></div></div><ul><li><strong>DropPackageType</strong><em>import com.datical.xml.ns.storedlogic.DropPackageType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getPackageName();
String getSchemaName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899284PrimaryKeys">Primary Keys</h2><ul><li><strong>AddPrimaryKeyType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnNames();
String getConstraintName();
String getSchemaName();
String getTableName();
String getTablespace();</pre></div></div><ul><li><strong>DropPrimaryKeyType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropPrimaryKeyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getConstraintName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>PrimaryKeyExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.PrimaryKeyExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getPrimaryKeyName();
String getSchemaName();
String getTableName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899285Procedures">Procedures</h2><ul><li><strong>CreateProcedureType</strong><em>import org.liquibase.xml.ns.dbchangelog.CreateProcedureType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCreateProcedureType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getComment();
String getDbms();
String getEncoding();
String getPath();
String getProcedureName();
Object getRelativeToChangelogFile();
Object getReplaceIfExists();
String getSchemaName();</pre></div></div><ul><li><strong>DropProcedureType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropProcedureType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getProcedureName();
String getSchemaName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899286Rollback">Rollback</h2><ul><li><strong>RollbackType</strong><em>import org.liquibase.xml.ns.dbchangelog.RollbackType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myRollbackType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AddAutoIncrementType&gt; getAddAutoIncrement();
List&lt;AddColumnType&gt; getAddColumn();
List&lt;AddDefaultValueType&gt; getAddDefaultValue();
List&lt;AddForeignKeyConstraintType&gt; getAddForeignKeyConstraint();
List&lt;AddLookupTableType&gt; getAddLookupTable();
List&lt;AddNotNullConstraintType&gt; getAddNotNullConstraint();
List&lt;AddPrimaryKeyType&gt; getAddPrimaryKey();
List&lt;AddUniqueConstraintType&gt; getAddUniqueConstraint();
List&lt;AlterSequenceType&gt; getAlterSequence();
FeatureMap getAny();
String getChangeSetAuthor();
FeatureMap getChangeSetChildren();
String getChangeSetId();
String getChangeSetPath();
List&lt;String&gt; getComments();
List&lt;CreateIndexType&gt; getCreateIndex();
List&lt;CreateProcedureType&gt; getCreateProcedure();
List&lt;CreateSequenceType&gt; getCreateSequence();
List&lt;CreateTableType&gt; getCreateTable();
List&lt;CreateViewType&gt; getCreateView();
List&lt;CustomChangeType&gt; getCustomChange();
List&lt;DeleteType&gt; getDelete();
List&lt;DropAllForeignKeyConstraintsType&gt; getDropAllForeignKeyConstraints();
List&lt;DropColumnType&gt; getDropColumn();
List&lt;DropDefaultValueType&gt; getDropDefaultValue();
List&lt;DropForeignKeyConstraintType&gt; getDropForeignKeyConstraint();
List&lt;DropIndexType&gt; getDropIndex();
List&lt;DropNotNullConstraintType&gt; getDropNotNullConstraint();
List&lt;DropPrimaryKeyType&gt; getDropPrimaryKey();
List&lt;DropSequenceType&gt; getDropSequence();
List&lt;DropTableType&gt; getDropTable();
List&lt;DropUniqueConstraintType&gt; getDropUniqueConstraint();
List&lt;DropViewType&gt; getDropView();
List&lt;ExecuteCommandType&gt; getExecuteCommand();
List&lt;InsertType&gt; getInsert();
List&lt;LoadDataType&gt; getLoadData();
List&lt;LoadUpdateDataType&gt; getLoadUpdateData();
List&lt;MergeColumnsType&gt; getMergeColumns();
List&lt;ModifyDataTypeType&gt; getModifyDataType();
List&lt;RenameColumnType&gt; getRenameColumn();
List&lt;RenameTableType&gt; getRenameTable();
List&lt;RenameViewType&gt; getRenameView();
List&lt;RollbackType&gt; getRollback();
List&lt;SqlType&gt; getSql();
List&lt;SqlFileType&gt; getSqlFile();
List&lt;StopType&gt; getStop();
List&lt;UpdateType&gt; getUpdate();</pre></div></div><h2 id="DataModelsforRules-_Toc485899287Sequences">Sequences</h2><ul><li><strong>AlterSequenceType</strong><em>import org.liquibase.xml.ns.dbchangelog.AlterSequenceType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getIncrementBy();
String getMaxValue();
String getMinValue();
Object getOrdered();
String getSchemaName();
String getSequenceName();
String getStartValue();</pre></div></div><ul><li><strong>CreateSequenceType</strong><em>import org.liquibase.xml.ns.dbchangelog.CreateSequenceType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">int getCacheSize();
String getCatalogName();
Object getCycle();
String getIncrementBy();
String getMaxValue();
String getMinValue();
Object getOrdered();
String getSchemaName();
String getSequenceName();
String getStartValue();
boolean isSetCacheSize();</pre></div></div><ul><li><strong>DropSequenceType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropSequenceType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getIncrementBy();
String getMaxValue();
String getMinValue();
Object getOrdered();
String getSchemaName();
String getSequenceName();
String getStartValue();</pre></div></div><ul><li><strong>SequenceExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.SequenceExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getSequenceName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899288SQL">SQL</h2><ul><li><strong>ModifySqlType</strong><em>import org.liquibase.xml.ns.dbchangelog.ModifySqlType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AppendType&gt; getAppend();
Object getApplyToRollback();
String getContext();
String getDbms();
String getLabels();
FeatureMap getModifySqlChildren();
List&lt;PrependType&gt; getPrepend();
List&lt;RegExpReplaceType&gt; getRegExpReplace();
List&lt;ReplaceType&gt; getReplace();</pre></div></div><ul><li><strong>SqlFileType</strong><em>import org.liquibase.xml.ns.dbchangelog.SqlFileType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getDbms();
String getEncoding();
String getEndDelimiter();
String getPath();
Object getRelativeToChangelogFile();
Object getSplitStatements();
Object getStripComments();
boolean isSetEncoding();</pre></div></div><ul><li><strong>SqlType</strong><em>import org.liquibase.xml.ns.dbchangelog.SqlType</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Note: Call the RuleFunctions class static method getText(mySqlType); to get the text associated with this refactoring. 
String getComment();
String getDbms();
String getEndDelimiter();
Object getSplitStatements();
Object getStripComments();</pre></div></div><h2 id="DataModelsforRules-_Toc485899289StorageOptions">Storage Options</h2><ul><li><strong>StorageOptionsType</strong><em>import com.datical.xml.ns.appdba.StorageOptionsType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myStorageOptionsType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getContext();
String getDbms();
String getPath();
boolean isSetRelativeToChangelogFile();</pre></div></div><ul><li><strong>IndexStorageOptionsType</strong><em>import com.datical.xml.ns.appdba.IndexStorageOptionsType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myIndexStorageOptionsType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getIndexName();
String getPath();
String getTableName();</pre></div></div><ul><li><strong>TableStorageOptionsType</strong><em>import com.datical.xml.ns.appdba.TableStorageOptionsType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myTableStorageOptionsType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getPath();
String getTableName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899290Synonyms">Synonyms</h2><ul><li><strong>CreateSynonymType</strong><em>import com.datical.xml.ns.appdba.CreateSynonymType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getObjectCatalogName();
String getObjectName();
String getObjectSchemaName();
String getObjectType();
String getSynonymCatalogName();
String getSynonymName();
String getSynonymSchemaName();
boolean isSetPrivate();
boolean isSetReplaceIfExists();</pre></div></div><ul><li><strong>DropSynonymType</strong><em>import com.datical.xml.ns.appdba.DropSynonymType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getObjectType();
String getSynonymCatalogName();
String getSynonymName();
String getSynonymSchemaName();
boolean isSetPrivate();</pre></div></div><h2 id="DataModelsforRules-_Toc485899291Tables">Tables</h2><ul><li><strong>CreateTableType</strong><em>import org.liquibase.xml.ns.dbchangelog.CreateTableType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnType&gt; getColumn();
String getRemarks();
String getSchemaName();
StorageOptionsType getStorageOptions();
String getTableName();
String getTablespace();
String getTemporary();</pre></div></div><ul><li><strong>DropTableType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropTableType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Object getCascadeConstraints();
String getCatalogName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>RenameTableType</strong><em>import org.liquibase.xml.ns.dbchangelog.RenameTableType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getNewTableName();
String getOldTableName();
String getSchemaName();</pre></div></div><ul><li><strong>TableExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.TableExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>TableIsEmptyType</strong><em>import org.liquibase.xml.ns.dbchangelog.TableIsEmptyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getTableName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899292Triggers">Triggers</h2><ul><li><strong>CreateTriggerType</strong><em>import com.datical.xml.ns.storedlogic.CreateTriggerType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCreateTriggerType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getDbms();
String getEncoding();
String getPath();
String getSchemaName();
String getScope();
String getTableName();
String getTriggerName();
String getXmlns();
boolean isSetDisabled();
boolean isSetRelativeToChangelogFile();
boolean isSetReplaceIfExists();</pre></div></div><ul><li><strong>DisableTriggerType</strong><em>import com.datical.xml.ns.storedlogic.DisableTriggerType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getScope();
String getTriggerName();
String getXmlns();</pre></div></div><ul><li><strong>DropTriggerType</strong><em>import com.datical.xml.ns.storedlogic.DropTriggerType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myDropTriggerType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getScope();
String getTriggerName();
String getXmlns();</pre></div></div><ul><li><strong>EnableTriggerType</strong><em>import com.datical.xml.ns.storedlogic.EnableTriggerType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myEnableTriggerType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getScope();
String getTriggerName();
String getXmlns();</pre></div></div><ul><li><strong>RenameTriggerType</strong><em>import com.datical.xml.ns.storedlogic.RenameTriggerType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myRenameTriggerType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getNewTriggerName();
String getOldTriggerName();
String getSchemaName();
String getXmlns();</pre></div></div><h2 id="DataModelsforRules-_Toc485899293Views">Views</h2><ul><li><strong>CreateViewType</strong><em>import org.liquibase.xml.ns.dbchangelog.CreateViewType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
Object getFullDefinition();
Object getReplaceIfExists();
String getSchemaName();
String getValue();
String getViewName();</pre></div></div><ul><li><strong>DropViewType</strong><em>import org.liquibase.xml.ns.dbchangelog.DropViewType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getViewName();</pre></div></div><ul><li><strong>RenameViewType</strong><em>import org.liquibase.xml.ns.dbchangelog.RenameViewType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getNewViewName();
String getOldViewName();
String getSchemaName();</pre></div></div><ul><li><strong>ViewExistsType</strong><em>import org.liquibase.xml.ns.dbchangelog.ViewExistsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getViewName();</pre></div></div><h2 id="DataModelsforRules-_Toc485899294Miscellaneous">Miscellaneous</h2><h3 id="DataModelsforRules-_Toc485899295ChangeLogsandChangeSets"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899295"></span>ChangeLogs and ChangeSets</h3><ul><li><strong>ChangeLogPropertyDefinedType</strong><em>import org.liquibase.xml.ns.dbchangelog.ChangeLogPropertyDefinedType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getProperty();
String getValue();</pre></div></div><ul><li><strong>ChangeSetExecutedType</strong><em>import org.liquibase.xml.ns.dbchangelog.ChangeSetExecutedType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getAuthor();
String getChangeLogFile();
String getId();</pre></div></div><ul><li><strong>ChangeSetType</strong><em>import org.liquibase.xml.ns.dbchangelog.ChangeSetType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myChangeSetType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AddAutoIncrementType&gt; getAddAutoIncrement();
List&lt;AddCheckConstraintType&gt; getAddCheckConstraint();
List&lt;AddColumnType&gt; getAddColumn();
List&lt;AddDefaultValueType&gt; getAddDefaultValue();
List&lt;AddForeignKeyConstraintType&gt; getAddForeignKeyConstraint();
List&lt;AddLookupTableType&gt; getAddLookupTable();
List&lt;AddNotNullConstraintType&gt; getAddNotNullConstraint();
List&lt;AddPrimaryKeyType&gt; getAddPrimaryKey();
List&lt;AddUniqueConstraintType&gt; getAddUniqueConstraint();
List&lt;AlterSequenceType&gt; getAlterSequence();
FeatureMap getAny();
FeatureMap getAnyAttribute();
String getAuthor();
FeatureMap getChangeSetChildren();
List&lt;CommentType&gt; getComments();
String getContext();
List&lt;CreateFunctionType&gt; getCreateFunction();
List&lt;CreateIndexType&gt; getCreateIndex();
List&lt;CreatePackageType&gt; getCreatePackage();
List&lt;CreatePackageBodyType&gt; getCreatePackageBody();
List&lt;CreateProcedureType&gt; getCreateProcedure();
List&lt;CreateSequenceType&gt; getCreateSequence();
List&lt;CreateSynonymType&gt; getCreateSynonym();
List&lt;CreateTableType&gt; getCreateTable();
List&lt;CreateTriggerType&gt; getCreateTrigger();
List&lt;CreateViewType&gt; getCreateView();
List&lt;CustomChangeType&gt; getCustomChange();
String getDbms();
List&lt;DeleteType&gt; getDelete();
List&lt;DisableCheckConstraintType&gt; getDisableCheckConstraint();
List&lt;DisableTriggerType&gt; getDisableTrigger();
List&lt;DropAllForeignKeyConstraintsType&gt; getDropAllForeignKeyConstraints();
List&lt;DropCheckConstraintType&gt; getDropCheckConstraint();
List&lt;DropColumnType&gt; getDropColumn();
List&lt;DropDefaultValueType&gt; getDropDefaultValue();
List&lt;DropForeignKeyConstraintType&gt; getDropForeignKeyConstraint();
List&lt;DropFunctionType&gt; getDropFunction();
List&lt;DropIndexType&gt; getDropIndex();
List&lt;DropNotNullConstraintType&gt; getDropNotNullConstraint();
List&lt;DropPackageType&gt; getDropPackage();
List&lt;DropPackageBodyType&gt; getDropPackageBody();
List&lt;DropPrimaryKeyType&gt; getDropPrimaryKey();
List&lt;DropProcedureType&gt; getDropProcedure();
List&lt;DropSequenceType&gt; getDropSequence();
List&lt;DropSynonymType&gt; getDropSynonym();
List&lt;DropTableType&gt; getDropTable();
List&lt;DropTriggerType&gt; getDropTrigger();
List&lt;DropUniqueConstraintType&gt; getDropUniqueConstraint();
List&lt;DropViewType&gt; getDropView();
List&lt;EnableCheckConstraintType&gt; getEnableCheckConstraint();
List&lt;EnableTriggerType&gt; getEnableTrigger();
List&lt;ExecuteCommandType&gt; getExecuteCommand();
Object getFailOnError();
String getId();
List&lt;InsertType&gt; getInsert();
String getLabels();
List&lt;LoadDataType&gt; getLoadData();
List&lt;LoadUpdateDataType&gt; getLoadUpdateData();
String getLogicalFilePath();
List&lt;MergeColumnsType&gt; getMergeColumns();
List&lt;ModifyDataTypeType&gt; getModifyDataType();
List&lt;ModifySqlType&gt; getModifySql();
ObjectQuotingStrategy getObjectQuotingStrategy();
OnChangeSetValidationFail getOnValidationFail();
List&lt;OutputType&gt; getOutput();
PreConditionsType getPreConditions();
List&lt;RenameColumnType&gt; getRenameColumn();
List&lt;RenameTableType&gt; getRenameTable();
List&lt;RenameTriggerType&gt; getRenameTrigger();
List&lt;RenameViewType&gt; getRenameView();
List&lt;RollbackType&gt; getRollback();
Object getRunAlways();
Object getRunInTransaction();
Object getRunOnChange();
List&lt;SqlType&gt; getSql();
List&lt;SqlFileType&gt; getSqlFile();
List&lt;StopType&gt; getStop();
TagDatabaseType getTagDatabase();
List&lt;UpdateType&gt; getUpdate();
List&lt;ValidCheckSumType&gt; getValidCheckSum();
boolean isSetObjectQuotingStrategy();
boolean isSetOnValidationFail();
boolean isSetRunInTransaction();</pre></div></div><ul><li><strong>CommentType</strong><em>import org.liquibase.xml.ns.dbchangelog.CommentType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myCommentType);</strong> to get the text associated with this refactoring.</li></ul><p><br /></p><ul><li><strong>DatabaseChangeLogType</strong><em>import</em><em>org.liquibase.xml.ns.dbchangelog.DatabaseChangeLogType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">FeatureMap getAnyAttribute();
List&lt;ChangeSetType&gt; getChangeSet();
FeatureMap getGroup();
List&lt;IncludeType&gt; getInclude();
List&lt;IncludeAllType&gt; getIncludeAll();
String getLogicalFilePath();
ObjectQuotingStrategy getObjectQuotingStrategy();
PreConditionsType1 getPreConditions();
List&lt;PropertyType&gt; getProperty();
boolean isSetObjectQuotingStrategy();</pre></div></div><h3 id="DataModelsforRules-_Toc485899296DML-DataLoading"><span class="confluence-anchor-link conf-macro output-inline" id="DataModelsforRules-_Toc485899296"></span>DML - Data Loading</h3><ul><li><strong>AddLookupTableType</strong><em>import org.liquibase.xml.ns.dbchangelog.AddLookupTableType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getConstraintName();
String getExistingColumnName();
String getExistingTableCatalogName();
String getExistingTableName();
String getExistingTableSchemaName();
String getNewColumnDataType();
String getNewColumnName();
String getNewTableCatalogName();
String getNewTableName();
String getNewTableSchemaName();</pre></div></div><ul><li><strong>LoadDataType</strong><em>import org.liquibase.xml.ns.dbchangelog.LoadDataType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myLoadDataType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnLoadDataType&gt; getColumn();
String getEncoding();
String getFile();
String getQuotchar();
String getSchemaName();
String getSeparator();
String getTableName();
boolean isSetEncoding();
boolean isSetQuotchar();
boolean isSetSeparator();</pre></div></div><ul><li><strong>LoadUpdateDataType</strong><em>import org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myLoadUpdateDataType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnLoadUpdateDataType&gt; getColumn();
String getEncoding();
String getFile();
String getPrimaryKey();
String getQuotchar();
String getSchemaName();
String getSeparator();
String getTableName();
boolean isSetEncoding();
boolean isSetQuotchar();
boolean isSetSeparator();</pre></div></div><h3 id="DataModelsforRules-_Toc485899297Miscellaneous">Miscellaneous</h3><ul><li><strong>AndType</strong><em>import org.liquibase.xml.ns.dbchangelog.AndType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AndType&gt; getAnd();
FeatureMap getAny();
List&lt;ChangeLogPropertyDefinedType&gt; getChangeLogPropertyDefined();
List&lt;ChangeSetExecutedType&gt; getChangeSetExecuted();
List&lt;ColumnExistsType&gt; getColumnExists();
List&lt;CustomPreconditionType&gt; getCustomPrecondition();
List&lt;DbmsType&gt; getDbms();
List&lt;ExpectedQuotingStrategyType&gt; getExpectedQuotingStrategy();
List&lt;ForeignKeyConstraintExistsType&gt; getForeignKeyConstraintExists();
FeatureMap getGroup();
List&lt;IndexExistsType&gt; getIndexExists();
List&lt;NotType&gt; getNot();
List&lt;OrType&gt; getOr();
List&lt;PrimaryKeyExistsType&gt; getPrimaryKeyExists();
List&lt;RowCountType&gt; getRowCount();
List&lt;RunningAsType&gt; getRunningAs();
List&lt;SequenceExistsType&gt; getSequenceExists();
List&lt;SqlCheckType&gt; getSqlCheck();
List&lt;TableExistsType&gt; getTableExists();
List&lt;TableIsEmptyType&gt; getTableIsEmpty();
List&lt;ViewExistsType&gt; getViewExists();</pre></div></div><ul><li><strong>AppendType</strong><em>import org.liquibase.xml.ns.dbchangelog.AppendType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getValue();</pre></div></div><ul><li><strong>ArgType</strong><em>import org.liquibase.xml.ns.dbchangelog.ArgType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getValue();</pre></div></div><ul><li><strong>CustomChangeType</strong><em>import org.liquibase.xml.ns.dbchangelog.CustomChangeType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">FeatureMap getAnyAttribute();
String getClass_();
List&lt;ParamType1&gt; getParam();</pre></div></div><ul><li><strong>CustomPreconditionType</strong><em>import org.liquibase.xml.ns.dbchangelog.CustomPreconditionType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getClassName();
List&lt;ParamType2&gt; getParam();</pre></div></div><ul><li><strong>DbmsType</strong><em>import org.liquibase.xml.ns.dbchangelog.DbmsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getType();</pre></div></div><ul><li><strong>DeleteType</strong><em>import org.liquibase.xml.ns.dbchangelog.DeleteType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myDeleteType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getSchemaName();
String getTableName();
EObject getWhere();
WhereParamsType getWhereParams();</pre></div></div><ul><li><strong>ExecuteCommandType</strong><em>import org.liquibase.xml.ns.dbchangelog.ExecuteCommandType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;ArgType&gt; getArg();
String getExecutable();
String getOs();</pre></div></div><ul><li><strong>ExpectedQuotingStrategyType</strong><em>import org.liquibase.xml.ns.dbchangelog.ExpectedQuotingStrategyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getStrategy();</pre></div></div><ul><li><strong>IncludeAllType</strong><em>import org.liquibase.xml.ns.dbchangelog.IncludeAllType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">FeatureMap getAnyAttribute();
String getFilter();
String getPath();
Object getRelativeToChangelogFile();</pre></div></div><ul><li><strong>IncludeType</strong><em>import org.liquibase.xml.ns.dbchangelog.IncludeType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">FeatureMap getAnyAttribute();
String getFile();
Object getRelativeToChangelogFile();</pre></div></div><ul><li><strong>InsertType</strong><em>import org.liquibase.xml.ns.dbchangelog.InsertType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnType&gt; getColumn();
String getDbms();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>ModifyDataTypeType</strong><em>import org.liquibase.xml.ns.dbchangelog.ModifyDataTypeType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
String getColumnName();
String getNewDataType();
String getSchemaName();
String getTableName();</pre></div></div><ul><li><strong>NotType</strong><em>import org.liquibase.xml.ns.dbchangelog.NotType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AndType&gt; getAnd();
FeatureMap getAny();
List&lt;ChangeLogPropertyDefinedType&gt; getChangeLogPropertyDefined();
List&lt;ChangeSetExecutedType&gt; getChangeSetExecuted();
List&lt;ColumnExistsType&gt; getColumnExists();
List&lt;CustomPreconditionType&gt; getCustomPrecondition();
List&lt;DbmsType&gt; getDbms();
List&lt;ExpectedQuotingStrategyType&gt; getExpectedQuotingStrategy();
List&lt;ForeignKeyConstraintExistsType&gt; getForeignKeyConstraintExists();
FeatureMap getGroup();
List&lt;IndexExistsType&gt; getIndexExists();
List&lt;NotType&gt; getNot();
List&lt;OrType&gt; getOr();
List&lt;PrimaryKeyExistsType&gt; getPrimaryKeyExists();
List&lt;RowCountType&gt; getRowCount();
List&lt;RunningAsType&gt; getRunningAs();
List&lt;SequenceExistsType&gt; getSequenceExists();
List&lt;SqlCheckType&gt; getSqlCheck();
List&lt;TableExistsType&gt; getTableExists();
List&lt;TableIsEmptyType&gt; getTableIsEmpty();
List&lt;ViewExistsType&gt; getViewExists();</pre></div></div><ul><li><strong>OrType</strong><em>import org.liquibase.xml.ns.dbchangelog.OrType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AndType&gt; getAnd();
FeatureMap getAny();
List&lt;ChangeLogPropertyDefinedType&gt; getChangeLogPropertyDefined();
List&lt;ChangeSetExecutedType&gt; getChangeSetExecuted();
List&lt;ColumnExistsType&gt; getColumnExists();
List&lt;CustomPreconditionType&gt; getCustomPrecondition();
List&lt;DbmsType&gt; getDbms();
List&lt;ExpectedQuotingStrategyType&gt; getExpectedQuotingStrategy();
List&lt;ForeignKeyConstraintExistsType&gt; getForeignKeyConstraintExists();
FeatureMap getGroup();
List&lt;IndexExistsType&gt; getIndexExists();
List&lt;NotType&gt; getNot();
List&lt;OrType&gt; getOr();
List&lt;PrimaryKeyExistsType&gt; getPrimaryKeyExists();
List&lt;RowCountType&gt; getRowCount();
List&lt;RunningAsType&gt; getRunningAs();
List&lt;SequenceExistsType&gt; getSequenceExists();
List&lt;SqlCheckType&gt; getSqlCheck();
List&lt;TableExistsType&gt; getTableExists();
List&lt;TableIsEmptyType&gt; getTableIsEmpty();
List&lt;ViewExistsType&gt; getViewExists();</pre></div></div><ul><li><strong>OutputType</strong><em>import org.liquibase.xml.ns.dbchangelog.OutputType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myOutputType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getTarget();</pre></div></div><ul><li><strong>ParamType</strong><em>import org.liquibase.xml.ns.dbchangelog.ParamType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getValue();
String getValueBoolean();
String getValueComputed();
String getValueDate();
String getValueNumeric();
String getValueSequenceCurrent();
String getValueSequenceNext();</pre></div></div><ul><li><strong>PreConditionsType</strong><em>import org.liquibase.xml.ns.dbchangelog.PreConditionsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;AndType&gt; getAnd();
FeatureMap getAny();
List&lt;ChangeLogPropertyDefinedType&gt; getChangeLogPropertyDefined();
List&lt;ChangeSetExecutedType&gt; getChangeSetExecuted();
List&lt;ColumnExistsType&gt; getColumnExists();
List&lt;CustomPreconditionType&gt; getCustomPrecondition();
List&lt;DbmsType&gt; getDbms();
List&lt;ExpectedQuotingStrategyType&gt; getExpectedQuotingStrategy();
List&lt;ForeignKeyConstraintExistsType&gt; getForeignKeyConstraintExists();
FeatureMap getGroup();
List&lt;IndexExistsType&gt; getIndexExists();
List&lt;NotType&gt; getNot();
OnChangeSetPreconditionErrorOrFail getOnError();
String getOnErrorMessage();
OnChangeSetPreconditionErrorOrFail getOnFail();
String getOnFailMessage();
OnChangeLogPreconditionOnSqlOutput getOnSqlOutput();
List&lt;OrType&gt; getOr();
List&lt;PrimaryKeyExistsType&gt; getPrimaryKeyExists();
List&lt;RowCountType&gt; getRowCount();
List&lt;RunningAsType&gt; getRunningAs();
List&lt;SequenceExistsType&gt; getSequenceExists();
List&lt;SqlCheckType&gt; getSqlCheck();
List&lt;TableExistsType&gt; getTableExists();
List&lt;TableIsEmptyType&gt; getTableIsEmpty();
List&lt;ViewExistsType&gt; getViewExists();
boolean isSetOnError();
boolean isSetOnFail();
boolean isSetOnSqlOutput();</pre></div></div><ul><li><strong>PrependType</strong><em>import org.liquibase.xml.ns.dbchangelog.PrependType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getValue();</pre></div></div><ul><li><strong>PropertyType</strong><em>import org.liquibase.xml.ns.dbchangelog.PropertyType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getContext();
String getDbms();
String getFile();
String getLabels();
String getName();
String getValue();</pre></div></div><ul><li><strong>RegExpReplaceType</strong><em>import org.liquibase.xml.ns.dbchangelog.RegExpReplaceType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getReplace();
String getWith();</pre></div></div><ul><li><strong>ReplaceType</strong><em>import org.liquibase.xml.ns.dbchangelog.ReplaceType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getReplace();
String getWith();</pre></div></div><ul><li><strong>RowCountType</strong><em>import org.liquibase.xml.ns.dbchangelog.RowCountType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
int getExpectedRows();
String getSchemaName();
String getTableName();
boolean isSetExpectedRows();</pre></div></div><ul><li><strong>RunningAsType</strong><em>import org.liquibase.xml.ns.dbchangelog.RunningAsType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getUsername();</pre></div></div><ul><li><strong>SqlCheckType</strong><em>import org.liquibase.xml.ns.dbchangelog.SqlCheckType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(mySqlCheckType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getExpectedResult();</pre></div></div><ul><li><strong>StopType</strong><em>import org.liquibase.xml.ns.dbchangelog.StopType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myStopType);</strong> to get the text associated with this refactoring.</li></ul><p><br /></p><ul><li><strong>TagDatabaseType</strong><em>import org.liquibase.xml.ns.dbchangelog.TagDatabaseType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getTag();</pre></div></div><ul><li><strong>UpdateType</strong><em>import org.liquibase.xml.ns.dbchangelog.UpdateType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myUpdateType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getCatalogName();
List&lt;ColumnType&gt; getColumn();
String getSchemaName();
String getTableName();
EObject getWhere();
WhereParamsType getWhereParams();</pre></div></div><ul><li><strong>ValidCheckSumType</strong><em>import org.liquibase.xml.ns.dbchangelog.ValidCheckSumType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myValidCheckSumType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getComment();</pre></div></div><ul><li><strong>WhereParamsType</strong><em>import org.liquibase.xml.ns.dbchangelog.WhereParamsType;<br /></em><strong>Note:</strong> Call the RuleFunctions class static method <strong>getText(myWhereParamsType);</strong> to get the text associated with this refactoring.&#160;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">List&lt;ParamType&gt; getParam();</pre></div></div><h2>Project Model</h2> <ul><li><strong>Project</strong><em>import com.datical.db.project.Project;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getDescription();
List&lt;DatabaseDef&gt; getDbDefs();
List&lt;Plan&gt; getPlans();
DatabaseChangeLogType getChangelog();
boolean isStoredLogicExternal();
String getChangelogPath();
String getChangelogResourcePath();
List&lt;String&gt; getFolders();</pre></div></div><ul><li><strong>Plan</strong><em>import com.datical.db.project.Plan;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getName();
String getDescription();
List&lt;DatabaseDef&gt; getDatabaseDefs();
List&lt;Step&gt; getSteps();</pre></div></div><ul><li><strong>Step</strong><em>import com.datical.db.project.Step;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">DatabaseDef getFrom();
DatabaseDef getTo();</pre></div></div><ul><li><strong>DatabaseChangeLogType</strong><em>import org.liquibase.xml.ns.dbchangelog.DatabaseChangeLogType;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">FeatureMap getAnyAttribute();
List&lt;ChangeSetType&gt; getChangeSet();
FeatureMap getGroup();
List&lt;IncludeType&gt; getInclude();
List&lt;IncludeAllType&gt; getIncludeAll();
String getLogicalFilePath();
ObjectQuotingStrategy getObjectQuotingStrategy();
PreConditionsType1 getPreConditions();
List&lt;PropertyType&gt; getProperty();
boolean isSetObjectQuotingStrategy();</pre></div></div><h2>Client System Model</h2> <ul><li><strong>ClientSystemInfo</strong><em>import com.datical.hammer.core.rules.ClientSystemInfo;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">Date getCurrentDate();
String getDaticalVersion();
String getHostname();
String getIpAddress();
String getJavaVersion();
String getOsVersion();
String getUserName();</pre></div></div><h2>Database System Model</h2> <ul><li><strong>DatabaseDef</strong><em>import com.datical.db.project.DatabaseDef;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getContexts();
String getDefaultCatalogName();
String getDefaultSchemaName();
String getDriver();
String getHostname();
String getName();
String getPassword();
Integer getPort();
String getUrl();
String getUsername();
boolean isStorageOptionCollectedAtSnapshot();</pre></div></div><h2>GeneratedSQL</h2> <ul><li><strong>GeneratedSQL</strong><em> Import com.datical.hammer.core.rules.GeneratedSQL;</em></li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">String getOutputRollbackSQL();
String getOutputSQL();</pre></div></div><h2>Forecast Model</h2> <ul><li><strong>Forecast</strong> Import com.datical.db.forecastmodel.Forecast;</li></ul><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">int getCountRuleErrors()
int getCountRuleInfos()
int getCountRuleWarnings()</pre></div></div></body>
</html>