<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
	<head>
		<title>Liquibase Enterprise Documentation</title>
	</head>
	<body>
		<h1>Object Models Available for Rules</h1>
		<MadCap:snippetText src="../../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>The available object data models vary by type of rule. See <a href="Data Models for Rules.htm">Data Models for Rules</a>&#160;for a listing of objects available to rules.</p>
		<h2>SqlRules Objects</h2>
		<p>The <strong>list of available models</strong> for the rules in this phase include:</p>
		<ul>
			<li>
				<p>WithComments() - include comments in the SQL scripts during processing</p>
			</li>
			<li>
				<p>WithoutComments() - strip comments from the SQL scripts before processing</p>
			</li>
		</ul>
		<h2>PreForecast Objects</h2>
		<p>The <strong>list of available models</strong> for the rules in this phase include:</p>
		<ul>
			<li>
				<p>ClientSystemInfo()There is one of these objects available, and it has properties like the operating system version, the user name, and other aspects of the system that <MadCap:variable name="General.DaticalDB" /> is running on.</p>
			</li>
			<li>
				<p>Project()This is a model of the project itself, and includes properties including the project name. Some of the other properties available in the project (the list of databases, the changelog) are also exposed directly to the rules engine.</p>
			</li>
			<li>
				<p>ProjectResources()This is used to find the location of project resources files. It is required by the static getText() function.</p>
			</li>
			<li>
				<p>DatabaseDef()There may be multiple instances of this kind of object available, one for each database connection that is defined in the project. Each DatabaseDef will have properties like the name of the connection, the driver, the hostname, the username, and more.</p>
			</li>
			<li>
				<p>DatabaseChangeLog()This model comprises all of the changes that have ever been applied to the database as well as the changes that are about to be applied to the database.</p>
			</li>
			<li>
				<p>DbModel()This is a model of the target database at the time of the forecast.</p>
			</li>
			<li>
				<p>GeneratedSQL()This model has two properties – one contains all the SQL statements that would be applied for this update, and one contains all the SQL statements that would be included in a rollback of this update.</p>
			</li>
			<li>
				<p>ChangeSetType()There will be one of these objects for each change set that is about to be deployed – that is, only the change sets that have not already been deployed. This object is a model of the changeset, which has properties like the author, id, and file path, the list of contexts, the DBMS type, and a variety of others.</p>
			</li>
		</ul>
		<h2>Forecast Objects</h2>
		<p>The <strong>list of available models</strong> for the rules in this phase include:</p>
		<ul>
			<li>
				<p>ClientSystemInfo()There is one of these objects available, and it has properties like the operating system version, the user name, and other aspects of the system that <MadCap:variable name="General.DaticalDB" /> is running on.</p>
			</li>
			<li>
				<p>Project()This is a model of the project itself, and includes properties including the project name. Some of the other properties available in the project (the list of databases, the changelog) are also exposed directly to the rules engine.</p>
			</li>
			<li>
				<p>ProjectResources()This is used to find the location of project resources files. It is required by the static getText() function.</p>
			</li>
			<li>
				<p>DatabaseDef() This DatabaseDef() is specific to the step that's being forecasted. The DatabaseDef has properties like the name of the connection, the driver, the hostname, the username, and more.</p>
			</li>
			<li>
				<p>DbModel()The DbModel is a container that is used during the simulation and forecast process. It can contain multiple Schema models (described below), a collection of messages that result from simulation and forecast operations, and a list of change set identifiers used to build the model.</p>
			</li>
			<li>
				<p>Schema() The Schema is the root object in a tree of objects representing the structure of the database including the tables, views, procedures, constraints, etc. Details on this object are documented later in this document. This object is also available as one of the Schema objects in the DbModel object, but is provided on its own for convenience.</p>
			</li>
			<li>
				<p>ChangeSetType() This object is a model of the changeset - a container for changes being made to a database that logically belong together. During the forecasting process, the rules engine is 'fired' once for every change that will be deployed to the database. Each change belongs to a changeset, which has properties like the author, id, and file path, the list of contexts, the DBMS type, and a variety of others.</p>
			</li>
			<li>
				<p>The ChangeRules in this phase have access to the objects that represent the actual change being made to the database. There are different objects for each of the different changes available, including things like AddTableType, DropTableType, etc. A full list of the different change types is included later in this document.</p>
			</li>
		</ul>
		<h2>PostForecast Objects</h2>
		<p>The <strong>list of available models</strong> for the rules in this phase includes:</p>
		<ul>
			<li>
				<p>ClientSystemInfo()There is one of these objects available, and it has properties like the operating system version, the user name, and other aspects of the system that <MadCap:variable name="General.DaticalDB" /> is running on.</p>
			</li>
			<li>
				<p>DatabaseDef()There may be multiple instances of this kind of object available, one for each database connection that is defined in the project. Each DatabaseDef will have properties like the name of the connection, the driver, the hostname, the username, and more.</p>
			</li>
			<li>
				<p>Project()This is a model of the project itself, and includes properties including the project name. Some of the other properties available in the project (the list of databases, the changelog) are also exposed directly to the rules engine.</p>
			</li>
			<li>
				<p>DatabaseChangeLog()This model comprises all of the changes that have ever been applied to the database as well as the changes that are about to be applied to the database.</p>
			</li>
			<li>
				<p>DbModel()The DbModel is a container that is used during the simulation and forecast process. It can contain multiple Schema models, a collection of messages that result from simulation and forecast operations, and a list of change set identifiers used to build the model. The DbModel that is available at the PostForecast stage contains the final model of the database schemas after all changes have been applied.</p>
			</li>
			<li>
				<p>ChangeSetType()This object is a model of the changeset - a container for changes being made to a database that logically belong together. During the post-forecast stage all of the changesets that were applied are available to the rules. Each changeset has properties like the author, id, and file path, the list of contexts, and the DBMS type.</p>
			</li>
			<li>
				<p>Forecast()This object is a model of the results of the Forecast operation. It is a complex object with nested objects.</p>
			</li>
		</ul>
	</body>
</html>