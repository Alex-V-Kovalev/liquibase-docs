<?xml version="1.0" encoding="utf-8"?>
<html MadCap:sourceDocument="C:\Users\Amber Williams\Documents\My Projects\Practice Project MadCap Flare\Content\Enterprise Documentation\datical-db-documentation\datical-projects-defining-the-release-pipeline\initialize-database-project\baseline-initialize-project\Baseline_a_Project.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Liquibase Enterprise Documentation</title><meta name="description" content="Liquibase Enterprise Documentation /></head>
    <body>
        <h1>Baseline a Project</h1>
        <p>Baselining a project is the process of capturing the "current state" snapshot of all databases for a project/schema. Once baselined, you will review the results to</p>
        <ul>
            <li>Label any changes that are in-process (in some databases, but not yet others) so they can be deployed to the remaining environments</li>
            <li>Identify inconsistencies across databases (missing or extra objects)</li>
        </ul>
        <p>Datical DB supports 3 types of baselining</p>
        <ol>
            <li>Full Baseline</li>
            <li>Partial Baseline</li>
            <li>No Baseline</li>
        </ol>
        <p>The goal of the <strong>full-baseline</strong> is to capture the full state of your project, label any in-process changes, and clean up any inconsistencies in your project databases. While this process takes time, it gives you the knowledge that any inconsistencies that have emerged over time have been fixed, and that all changes are accounted for.</p>
        <p>The goal of the <strong>partial-baseline</strong> is to speed up provisioning, capture the full state of your project and label any in-process changes. However, it postpones the cleanup of database inconsistencies, which can be performed when time is available. Until the cleanup process is complete, you might run into forecast/deployment errors as a result of any unexpected or missing objects in a database.</p>
        <p>The goal of the <strong>no-baseline</strong> option is to speed up provisioning and start using Datical DB to deploy changes quickly. With this process, you will not be capturing the current state of your databases. Without this information in Datical, you will be responsible for figuring out what changes have already been deployed and for identifying database inconsistencies over time as you deploy changes.</p>
        <h1 id="BaselineaProject-UsetheProjectBaselineScript">Use the Project Baseline Script</h1>
        <p>This script will baseline all of the databases in each of the pipelines.</p>
        <h2 id="BaselineaProject-HowToUseproject_baseline.groovy">How To Use project_baseline.groovy</h2>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">hammer groovy project_baseline.groovy [baselinePrimaryDBOnly] [skip | force] [noSync] [zip] </pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <div class="table-wrap">
            <table class="wrapped confluenceTable">
                <colgroup>
                    <col />
                    <col />
                </colgroup>
                <tbody>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,0);"><strong>Required Parameters</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>
                                <br />
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>None</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>
                                <br />
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <p>
            <br />
        </p>
        <div class="table-wrap">
            <table class="wrapped confluenceTable">
                <colgroup>
                    <col />
                    <col />
                </colgroup>
                <tbody>
                    <tr>
                        <td class="confluenceTd">
                            <p><span style="color: rgb(0,0,0);"><strong>Optional Parameters</strong></span>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p />
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>baselinePrimaryDBOnly</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>Flag to only baseline the last DB in the first pipeline</p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>skip | force</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <ul>
                                <li><strong>skip</strong> - Flag to skip any table that has already been baselined</li>
                                <li><strong>force</strong> - Flag to remove any pre-existing DATABASECHANGELOG and DATABASECHANGELOGLOCK tables (use with caution)</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>noSync</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>Flag to optionally NOT run changelogSync on each of the Reference DBs</p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>zip</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>Flag to create a zip file of the baselined project</p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>useStorageOptions</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>Flag to enable storage options during baselining. The default is to not use storage options during diffChangelog</p>
                        </td>
                    </tr>
                    <tr>
                        <td class="confluenceTd">
                            <p><strong>skipExtraObjects</strong>
                            </p>
                        </td>
                        <td class="confluenceTd">
                            <p>Flag to skip the collection of objects not natively supported by Datical DB (grants/revokes, user defined types, materialized views, and database links)</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <h2 id="BaselineaProject-Prerequisites">Prerequisites</h2>
        <ul>
            <li>Ensure that the Datical DB CLI directory is in your path. Otherwise, you will need to specify the full path to the CLI tool â€“ hammer.</li>
        </ul>
        <h2 id="BaselineaProject-ExampleonWindows">Example on Windows</h2>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">% cd &lt;datical_working_dir&gt;/&lt;desired_project&gt;% hammer groovy "&lt;windows_script_path&gt;\project_baseline.groovy" force zip </pre>
            </div>
        </div>
        <h2 id="BaselineaProject-ExampleonLinux">Example on Linux</h2>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">% cd &lt;datical_working_dir&gt;/&lt;desired_project&gt;% hammer groovy "/home/user/scripts/project_baseline.groovy" force zip</pre>
            </div>
        </div>
        <h2 id="BaselineaProject-Results">Results</h2>
        <ol>
            <li>All connections are validated</li>
            <li>All project databases are baselined and tagged appropriately</li>
        </ol>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>