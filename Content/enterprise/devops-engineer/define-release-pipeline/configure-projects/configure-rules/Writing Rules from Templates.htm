<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title></title>
        <link href="../../../../../Resources/Stylesheets/Data+Models+for+Rules.css" rel="stylesheet" />
    </head>
    <body>
        <h1 class="Heading1">Writing Rules from Templates</h1> <MadCap:snippetText src="../../../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><h2 class="Heading2">Getting Started</h2><ol start="1" class="ol_1"><li class="li_1"><p class="p_1">Create a simple Datical project </p><ol start="1" class="ol_1"><li class="li_1"><p class="p_1">Create 2 empty databases on your desired DB platform</p></li><li class="li_1"><p class="p_1">Create project with 2 steps pointing to these databases</p></li></ol></li><li class="li_1"><p class="p_1">Identify a new rule that needs to be created</p></li><li class="li_1"><p class="p_1">Look for the Rule in the Rules Library below </p><ul class="ul_1"><li class="li_1"><p class="p_1">Types of rules (so far) </p><ul class="ul_2"><li class="li_1"><p class="p_1">Standards - Naming</p></li><li class="li_1"><p class="p_1">Standards - Datatype</p></li><li class="li_1"><p class="p_1">Security</p></li><li class="li_1"><p class="p_1">Performance</p></li><li class="li_1"><p class="p_1">Structure</p></li></ul></li></ul></li></ol><ol start="4" class="ol_1"><li class="li_1"><p class="p_1">Creating a Rule - either copy a rule from the library or create a new rule from the following templates (create your rule file using a meaningful name - see examples in library below)</p><ol start="0" class="ol_1"><li class="NormalWeb"><p class="NormalWeb">SqlRule Rule Template&#160;</p><p><span class="expand-control-icon">&#160;</span><span class="expand-control-text">Expand source</span> </p><p class="HTMLPreformatted">/*</p><p class="HTMLPreformatted">@author &lt;add your name here&gt;</p><p class="HTMLPreformatted">@version 1.0</p><p class="HTMLPreformatted">@date &lt;add current date here&gt;</p><p class="HTMLPreformatted">@description &lt;add the description of the rule here&gt;</p><p class="HTMLPreformatted">*/</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Setting the rule type ensures that people using the rule will know where to place it in the directory structure</p><p class="HTMLPreformatted">package com.datical.hammer.core.sqlrules</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">dialect "mvel"</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Java Utilities</p><p class="HTMLPreformatted">import java.util.List;</p><p class="HTMLPreformatted">import java.util.Arrays;</p><p class="HTMLPreformatted">import java.util.ArrayList;</p><p class="HTMLPreformatted">import org.apache.commons.lang.StringUtils;</p><p class="HTMLPreformatted">import org.apache.commons.collections.ListUtils;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rules Engine Utility Methods (used by all rules)</p><p class="HTMLPreformatted">import com.datical.db.project.DatabaseDef;</p><p class="HTMLPreformatted">import com.datical.db.project.Project;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ClientSystemInfo;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ProjectResources;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response.ResponseType;</p><p class="HTMLPreformatted">import com.datical.hammer.core.forecast.rules.RuleFunctions;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rules Engine Utility Methods (for SQLRules Only)</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.WithComments;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.WithoutComments;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Development tip: Use regex creation and debugging site: https://regex101.com</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rule(s)</p><p class="HTMLPreformatted">rule "CreateIndex: Parallel attribute is missing and needs to be specified"</p><p class="HTMLPreformatted">&#160;&#160;&#160; salience 1</p><p class="HTMLPreformatted">&#160;&#160;&#160; when</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160; wc : WithoutComments(getText().toLowerCase() matches ".*(create)(\\s+)(index)(?!.*parallel.*)([^;]+)[;].*" )</p><p class="HTMLPreformatted">&#160;&#160;&#160; then</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String errorMessage = </p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The parallel options is missing and needs to be specified in the Create Index SQL script: " +</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; wc.getSqlFile().getName();</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160; insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName()));</p><p class="HTMLPreformatted">end</p></li><li class="NormalWeb"><p class="NormalWeb">PreForecast Rule Template&#160;</p><p><span class="expand-control-icon">&#160;</span><span class="expand-control-text">Expand source</span> </p><p class="HTMLPreformatted">/*</p><p class="HTMLPreformatted">@author &lt;add your name here&gt;</p><p class="HTMLPreformatted">@version 1.0</p><p class="HTMLPreformatted">@date &lt;add current date here&gt;</p><p class="HTMLPreformatted">@description &lt;add the description of the rule here&gt;</p><p class="HTMLPreformatted">*/</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Setting the rule type ensures that people using the rule will know where to place it in the directory structure</p><p class="HTMLPreformatted">package com.datical.hammer.core.preforecast</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">dialect "mvel"</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Java Utilities</p><p class="HTMLPreformatted">import java.util.List;</p><p class="HTMLPreformatted">import java.util.Arrays;</p><p class="HTMLPreformatted">import java.util.ArrayList;</p><p class="HTMLPreformatted">import org.apache.commons.lang.StringUtils;</p><p class="HTMLPreformatted">import org.apache.commons.collections.ListUtils;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rules Engine Utility Methods (used by all rules)</p><p class="HTMLPreformatted">import com.datical.db.project.DatabaseDef;</p><p class="HTMLPreformatted">import com.datical.db.project.Project;</p><p class="HTMLPreformatted">import com.datical.hammer.core.forecast.rules.RuleFunctions;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ClientSystemInfo;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.GeneratedSQL;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ProjectResources;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response.ResponseType;</p><p class="HTMLPreformatted">import com.datical.hammer.core.status.ChangeMetaDataContainer;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Import Models for Objects (the following are the commonly used models)</p><p class="HTMLPreformatted">// Models: Liquibase Base Object Models</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ChangeSetType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnAddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnBaseType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateIndexType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateProcedureType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateSequenceType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.DropTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.SqlType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical Stored Logic Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateTriggerType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateFunctionType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageBodyType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.RenameTriggerType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical AppDBA Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.appdba.CreateSynonymType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rule(s)</p><p class="HTMLPreformatted">rule "Change Set Must Have a Comment"</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;salience 10000</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;when</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$changeSet : ChangeSetType(&#160; )</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$comments : List( size == 0 )</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from collect(CommentType()</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from $changeSet.comments)</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;then</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String errorMessage = "Change Set ID " + $changeSet.getId() + " has no comment.";</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName(), $changeSet.getId()));</p><p class="HTMLPreformatted">end</p></li><li class="NormalWeb"><p class="NormalWeb">Forecast Rule Template&#160;</p><p><span class="expand-control-icon">&#160;</span><span class="expand-control-text">Expand source</span> </p><p class="HTMLPreformatted">/*</p><p class="HTMLPreformatted">@author &lt;add your name here&gt;</p><p class="HTMLPreformatted">@version 1.0</p><p class="HTMLPreformatted">@date &lt;add current date here&gt;</p><p class="HTMLPreformatted">@description &lt;add the description of the rule here&gt;</p><p class="HTMLPreformatted">*/</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Setting the rule type ensures that people using the rule will know where to place it in the directory structure</p><p class="HTMLPreformatted">package com.datical.hammer.core.forecast</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">dialect "mvel"</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Java Utilities</p><p class="HTMLPreformatted">import java.util.List;</p><p class="HTMLPreformatted">import java.util.Arrays;</p><p class="HTMLPreformatted">import java.util.ArrayList;</p><p class="HTMLPreformatted">import org.apache.commons.lang.StringUtils;</p><p class="HTMLPreformatted">import org.apache.commons.collections.ListUtils;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rules Engine Utility Methods (used by all rules)</p><p class="HTMLPreformatted">import com.datical.db.project.DatabaseDef;</p><p class="HTMLPreformatted">import com.datical.db.project.Project;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ClientSystemInfo;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ProjectResources;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response.ResponseType;</p><p class="HTMLPreformatted">import com.datical.hammer.core.forecast.rules.RuleFunctions;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Import Models for Objects (the following are the commonly used models)</p><p class="HTMLPreformatted">// Models: Liquibase Base Object Models</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ChangeSetType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnAddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnBaseType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateIndexType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateProcedureType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateSequenceType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.DropTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.SqlType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical Stored Logic Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateTriggerType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateFunctionType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageBodyType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.RenameTriggerType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical AppDBA Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.appdba.CreateSynonymType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical Database Models</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Column;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.DbModel;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.FkConstraint;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Function;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Index;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.PackageBody;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Procedure;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Schema;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Table;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Trigger;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.View;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rule(s)</p><p class="HTMLPreformatted">rule "Columns added to new tables should not have defaultValue set"</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;when</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$createTable : CreateTableType( )</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$defaultValues : List( size &gt; 0 )</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from collect(ColumnType ( defaultValue not matches null</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| defaultValueNumeric not matches null</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| defaultValueBoolean not matches null</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| defaultValueDate not matches null</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| defaultValueComputed not matches null)</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from $createTable.getColumn())</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;then</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String errorMessage = drools.getRule().getName();</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName()));</p><p class="HTMLPreformatted">end</p></li><li class="NormalWeb"><p class="NormalWeb">PostForecast Rule Template&#160;</p><p><span class="expand-control-icon">&#160;</span><span class="expand-control-text">Expand source</span> </p><p class="HTMLPreformatted">/*</p><p class="HTMLPreformatted">@author &lt;add your name here&gt;</p><p class="HTMLPreformatted">@version 1.0</p><p class="HTMLPreformatted">@date &lt;add current date here&gt;</p><p class="HTMLPreformatted">@description &lt;add the description of the rule here&gt;</p><p class="HTMLPreformatted">*/</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Setting the rule type ensures that people using the rule will know where to place it in the directory structure</p><p class="HTMLPreformatted">package com.datical.hammer.core.postforecast</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">dialect "mvel"</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Java Utilities</p><p class="HTMLPreformatted">import java.util.List;</p><p class="HTMLPreformatted">import java.util.Arrays;</p><p class="HTMLPreformatted">import java.util.ArrayList;</p><p class="HTMLPreformatted">import org.apache.commons.lang.StringUtils;</p><p class="HTMLPreformatted">import org.apache.commons.collections.ListUtils;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rules Engine Utility Methods (used by all rules)</p><p class="HTMLPreformatted">import com.datical.db.project.DatabaseDef;</p><p class="HTMLPreformatted">import com.datical.db.project.Project;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ClientSystemInfo;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.ProjectResources;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response;</p><p class="HTMLPreformatted">import com.datical.hammer.core.rules.Response.ResponseType;</p><p class="HTMLPreformatted">import com.datical.hammer.core.forecast.rules.RuleFunctions;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Import Models for Objects (the following are the commonly used models)</p><p class="HTMLPreformatted">// Models: Liquibase Base Object Models</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ChangeSetType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnAddColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnBaseType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateIndexType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateProcedureType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateSequenceType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.CreateViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.DropTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameColumnType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameTableType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.RenameViewType;</p><p class="HTMLPreformatted">import org.liquibase.xml.ns.dbchangelog.SqlType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical Stored Logic Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateTriggerType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreateFunctionType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageBodyType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.CreatePackageType;</p><p class="HTMLPreformatted">import com.datical.xml.ns.storedlogic.RenameTriggerType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical AppDBA Extension Models</p><p class="HTMLPreformatted">import com.datical.xml.ns.appdba.CreateSynonymType;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Models: Datical Database Models</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Column;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.DbModel;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.FkConstraint;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Function;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Index;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.PackageBody;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Procedure;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Schema;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Table;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.Trigger;</p><p class="HTMLPreformatted">import com.datical.dbsim.model.View;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">// Rule(s)</p><p class="HTMLPreformatted">rule "All tables should have a primary key or unique constraint"</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;when</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$db_model_container : ModelContainer( )</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;then</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String errorMessage = "";</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (Schema schema : $db_model_container.getNewModel().getSchemas()) {</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (Table table : schema.getTables()) {</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!table.getName().toUpperCase().equals("DATABASECHANGELOGLOCK") &amp;&amp; !table.getName().toUpperCase().equals("DATABASECHANGELOG")) {</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((table.getPkConstraint() == null) &amp;&amp; table.getUniqueConstraints().isEmpty()) {</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errorMessage += "Table (" + table.getName() + ") needs to have either a primary key or unique constraint.&lt;br/&gt;\n";</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (errorMessage != "") {</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insert(new Response(ResponseType.FAIL, errorMessage, drools.getRule().getName()));</p><p class="HTMLPreformatted">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="HTMLPreformatted">end</p><p class="HTMLPreformatted">&#160;</p><p class="HTMLPreformatted">&#160;</p></li></ol></li></ol><ol start="5" class="ol_1"><li class="li_1"><p class="p_1">Testing a Rule </p><ol start="0" class="ol_1"><li class="li_1"><p class="p_1">Copy your rule into the appropriate Rules subfolder</p></li><li class="li_1"><p class="p_1">In the GUI, right-click on the Rules folder and select "Check Rules" (this will detect any syntax errors) </p><ul class="ul_2"><li class="li_1"><p class="p_1">Note, this does not check SqlRules</p></li></ul></li></ol></li><ol start="2" class="ol_2"><li class="li_1"><p class="p_1">Create one or more SQL scripts named the same as your rule with a .sql ending that </p><ul class="ul_2"><li class="li_1"><p class="p_1">exercises a positive case&#160;</p></li><li class="li_1"><p class="p_1">exercises a negative case</p></li><li class="li_1"><p class="p_1">exercises one or more edge cases</p></li></ul></li><li class="auto-cursor-target"><p class="auto-cursor-target">If this is a <span class="Strong">SQLFile rule</span>, run the Datical command line as shown below or&#160;run the SQL script through the Packager (preview mode should be okay)</p></li><li class="HTMLPreformatted"><p class="HTMLPreformatted">cd &lt;datical project workspace&gt;</p></li><li class="HTMLPreformatted"><p class="HTMLPreformatted">hammer runRules [SQL file | SQL files folder]</p></li><li class="HTMLPreformatted"><p class="HTMLPreformatted">&#160;</p></li><li class="li_1"><p class="p_1">If this is a <span class="Strong">Pre-Forecast, Forecast or PostForecast rule</span>, then </p><ul class="ul_2"><li class="li_1"><p class="p_1">Run the SQL script through <span class="Strong">convert SQL</span> to get it converted into change sets (save the relevant change sets in a file named the same as your rule with a .xml ending). The QA team will thank you.</p></li><li class="li_1"><p class="p_1">Run Forecast on the second step in your project to test the rules on the undeployed changes now in your changelog</p></li></ul></li></ol></ol></body>
</html>