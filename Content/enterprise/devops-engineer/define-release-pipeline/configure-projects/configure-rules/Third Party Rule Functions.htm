<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title></title>
        <link href="../../../../../Resources/Stylesheets/Data+Models+for+Rules.css" rel="stylesheet" />
    </head>
    <body>
        <h1 class="Heading1">Third Party Rule Functions</h1>
        <h2 class="Heading2">List</h2>
        <p class="NormalWeb"><span class="Emphasis">import java.util.List;</span>
        </p>
        <p class="NormalWeb">boolean <span class="Strong">add</span>(E e)</p>
        <p class="NormalWeb_2">Appends the specified element to the end of this list (optional operation).</p>
        <p class="NormalWeb">void <span class="Strong">add</span>(int index, E element)</p>
        <p class="NormalWeb_2">Inserts the specified element at the specified position in this list (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">addAll</span>(Collection&lt;? extends E&gt; c)</p>
        <p class="NormalWeb_2">Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">addAll</span>(int index, Collection&lt;? extends E&gt; c)</p>
        <p class="NormalWeb_2">Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</p>
        <p class="NormalWeb">void <span class="Strong">clear</span>()</p>
        <p class="NormalWeb_2">Removes all of the elements from this list (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">contains</span>(Object o)</p>
        <p class="NormalWeb_2">Returns true if this list contains the specified element.</p>
        <p class="NormalWeb">boolean <span class="Strong">containsAll</span>(Collection&lt;?&gt; c)</p>
        <p class="NormalWeb_2">Returns true if this list contains all of the elements of the specified collection.</p>
        <p class="NormalWeb">boolean <span class="Strong">equals</span>(Object o)</p>
        <p class="NormalWeb_2">Compares the specified object with this list for equality.</p>
        <p class="NormalWeb">E <span class="Strong">get</span>(int index)</p>
        <p class="NormalWeb">Returns the element at the specified position in this list.</p>
        <p class="NormalWeb">int <span class="Strong">hashCode</span>()</p>
        <p class="NormalWeb_2">Returns the hash code value for this list.</p>
        <p class="NormalWeb">int <span class="Strong">indexOf</span>(Object o)</p>
        <p class="NormalWeb_2">Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p class="NormalWeb">boolean <span class="Strong">isEmpty</span>()</p>
        <p class="NormalWeb_2">Returns true if this list contains no elements.</p>
        <p class="NormalWeb">Iterator&lt;E&gt; <span class="Strong">iterator</span>()</p>
        <p class="NormalWeb_2">Returns an iterator over the elements in this list in proper sequence.</p>
        <p class="NormalWeb">int <span class="Strong">lastIndexOf</span>(Object o)</p>
        <p class="NormalWeb_2">Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p class="NormalWeb">ListIterator&lt;E&gt; <span class="Strong">listIterator</span>()</p>
        <p class="NormalWeb_2">Returns a list iterator over the elements in this list (in proper sequence).</p>
        <p class="NormalWeb">ListIterator&lt;E&gt; <span class="Strong">listIterator</span>(int index)</p>
        <p class="NormalWeb_2">Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.</p>
        <p class="NormalWeb">E <span class="Strong">remove</span>(int index)</p>
        <p class="NormalWeb">Removes the element at the specified position in this list (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">remove</span>(Object o)</p>
        <p class="NormalWeb_2">Removes the first occurrence of the specified element from this list, if it is present (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">removeAll</span>(Collection&lt;?&gt; c)</p>
        <p class="NormalWeb_2">Removes from this list all of its elements that are contained in the specified collection (optional operation).</p>
        <p class="NormalWeb">boolean <span class="Strong">retainAll</span>(Collection&lt;?&gt; c)</p>
        <p class="NormalWeb_2">Retains only the elements in this list that are contained in the specified collection (optional operation).</p>
        <p class="NormalWeb">E <span class="Strong">set</span>(int index, E element)</p>
        <p class="NormalWeb_2">Replaces the element at the specified position in this list with the specified element (optional operation).</p>
        <p class="NormalWeb">int <span class="Strong">size</span>()</p>
        <p class="NormalWeb_2">Returns the number of elements in this list.</p>
        <p class="NormalWeb">List&lt;E&gt; <span class="Strong">subList</span>(int fromIndex, int toIndex)</p>
        <p class="NormalWeb_2">Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</p>
        <p class="NormalWeb">Object[] <span class="Strong">toArray</span>()</p>
        <p class="NormalWeb_2">Returns an array containing all of the elements in this list in proper sequence (from first to last element).</p>
        <p class="NormalWeb">&lt;T&gt; T[] <span class="Strong">toArray</span>(T[] a)</p>
        <p class="NormalWeb_2">Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.</p>
        <h2 class="Heading2">ArrayList</h2>
        <p class="NormalWeb"><span class="Emphasis">import java.util.ArrayList;</span>
            <br />boolean <span class="Strong">add</span>(E e)</p>
        <p class="NormalWeb_2">Appends the specified element to the end of this list.</p>
        <p class="NormalWeb">void <span class="Strong">add</span>(int index, E element)</p>
        <p class="NormalWeb_2">Inserts the specified element at the specified position in this list.</p>
        <p class="NormalWeb">boolean <span class="Strong">addAll</span>(Collection&lt;? extends E&gt; c)</p>
        <p class="NormalWeb_2">Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.</p>
        <p class="NormalWeb">boolean <span class="Strong">addAll</span>(int index, Collection&lt;? extends E&gt; c)</p>
        <p class="NormalWeb_2">Inserts all of the elements in the specified collection into this list, starting at the specified position.</p>
        <p class="NormalWeb">void <span class="Strong">clear</span>()</p>
        <p class="NormalWeb_2">Removes all of the elements from this list.</p>
        <p class="NormalWeb">Object <span class="Strong">clone</span>()</p>
        <p class="NormalWeb_2">Returns a shallow copy of this ArrayList instance.</p>
        <p class="NormalWeb">boolean <span class="Strong">contains</span>(Object o)</p>
        <p class="NormalWeb_2">Returns true if this list contains the specified element.</p>
        <p class="NormalWeb">void <span class="Strong">ensureCapacity</span>(int minCapacity)</p>
        <p class="NormalWeb_2">Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.</p>
        <p class="NormalWeb">E <span class="Strong">get</span>(int index)</p>
        <p class="NormalWeb_2">Returns the element at the specified position in this list.</p>
        <p class="NormalWeb">int <span class="Strong">indexOf</span>(Object o)</p>
        <p class="NormalWeb_2">Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p class="NormalWeb">boolean <span class="Strong">isEmpty</span>()</p>
        <p class="NormalWeb_2">Returns true if this list contains no elements.</p>
        <p class="NormalWeb">Iterator&lt;E&gt; <span class="Strong">iterator</span>()</p>
        <p class="NormalWeb_2">Returns an iterator over the elements in this list in proper sequence.</p>
        <p class="NormalWeb">int <span class="Strong">lastIndexOf</span>(Object o)</p>
        <p class="NormalWeb_2">Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p class="NormalWeb">ListIterator&lt;E&gt; <span class="Strong">listIterator</span>()</p>
        <p class="NormalWeb_2">Returns a list iterator over the elements in this list (in proper sequence).</p>
        <p class="NormalWeb">ListIterator&lt;E&gt; <span class="Strong">listIterator</span>(int index)</p>
        <p class="NormalWeb_2">Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.</p>
        <p class="NormalWeb">E <span class="Strong">remove</span>(int index)</p>
        <p class="NormalWeb_2">Removes the element at the specified position in this list.</p>
        <p class="NormalWeb">boolean <span class="Strong">remove</span>(Object o)</p>
        <p class="NormalWeb_2">Removes the first occurrence of the specified element from this list, if it is present.</p>
        <p class="NormalWeb">boolean <span class="Strong">removeAll</span>(Collection&lt;?&gt; c)</p>
        <p class="NormalWeb_2">Removes from this list all of its elements that are contained in the specified collection.</p>
        <p class="NormalWeb">protected void <span class="Strong">removeRange</span>(int fromIndex, int toIndex)</p>
        <p class="NormalWeb_2">Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.</p>
        <p class="NormalWeb">boolean <span class="Strong">retainAll</span>(Collection&lt;?&gt; c)</p>
        <p class="NormalWeb_2">Retains only the elements in this list that are contained in the specified collection.</p>
        <p class="NormalWeb">E <span class="Strong">set</span>(int index, E element)</p>
        <p class="NormalWeb_2">Replaces the element at the specified position in this list with the specified element.</p>
        <p class="NormalWeb">int <span class="Strong">size</span>()</p>
        <p class="NormalWeb_2">Returns the number of elements in this list.</p>
        <p class="NormalWeb">List&lt;E&gt; <span class="Strong">subList</span>(int fromIndex, int toIndex)</p>
        <p class="NormalWeb_2">Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</p>
        <p class="NormalWeb">Object[] <span class="Strong">toArray</span>()</p>
        <p class="NormalWeb_2">Returns an array containing all of the elements in this list in proper sequence (from first to last element).</p>
        <p class="NormalWeb">&lt;T&gt; T[] <span class="Strong">toArray</span>(T[] a)</p>
        <p class="NormalWeb_2">Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.</p>
        <p class="NormalWeb">void <span class="Strong">trimToSize</span>()</p>
        <p class="NormalWeb_2">Trims the capacity of this ArrayList instance to be the list's current size.</p>
        <h2 class="Heading2">StringUtils (v2.6)</h2>
        <p class="NormalWeb"><span class="Emphasis">import org.apache.commons.lang.StringUtils;</span>
            <br /><span class="Emphasis">Overview</span>
        </p>
        <ul class="ul_3">
            <li class="li_1">
                <p class="p_1"><span class="Strong">IsEmpty/IsBlank</span> - checks if a String contains text</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Trim/Strip</span> - removes leading and trailing whitespace</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Equals</span> - compares two strings null-safe</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">startsWith</span> - check if a String starts with a prefix null-safe</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">endsWith</span> - check if a String ends with a suffix null-safe</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">IndexOf/LastIndexOf/Contains</span> - null-safe index-of checks</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</span> - index-of any of a set of Strings</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">ContainsOnly/ContainsNone/ContainsAny</span> - does String contains only/none/any of these characters</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Substring/Left/Right/Mid</span> - null-safe substring extractions</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">SubstringBefore/SubstringAfter/SubstringBetween</span> - substring extraction relative to other strings</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Split/Join</span> - splits a String into an array of substrings and vice versa</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Remove/Delete</span> - removes part of a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Replace/Overlay</span> - Searches a String and replaces one String with another</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Chomp/Chop</span> - removes the last part of a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">LeftPad/RightPad/Center/Repeat</span> - pads a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</span> - changes the case of a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">CountMatches</span> - counts the number of occurrences of one String in another</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</span> - checks the characters in a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">DefaultString</span> - protects against a null input String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Reverse/ReverseDelimited</span> - reverses a String</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Abbreviate</span> - abbreviates a string using ellipsis</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">Difference</span> - compares Strings and reports on their differences</p>
            </li>
            <li class="li_1">
                <p class="p_1"><span class="Strong">LevensteinDistance</span> - the number of changes needed to change one String into another</p>
            </li>
        </ul>
        <p class="NormalWeb"><span class="Strong">static String abbreviate(String str, int maxWidth)</span>
        </p>
        <p class="NormalWeb_2">Abbreviates a String using ellipses.</p>
        <p class="NormalWeb"><span class="Strong">static String abbreviate(String str, int offset, int maxWidth)</span>
        </p>
        <p class="NormalWeb_2">Abbreviates a String using ellipses.</p>
        <p class="NormalWeb"><span class="Strong">static String abbreviateMiddle(String str, String middle, int length)</span>
        </p>
        <p class="NormalWeb_2">Abbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.</p>
        <p class="NormalWeb"><span class="Strong">static String capitalize(String str)</span>
        </p>
        <p class="NormalWeb_2">Capitalizes a String changing the first letter to title case as per Character.toTitleCase(char).</p>
        <p class="NormalWeb"><span class="Strong">static String center(String str, int size)</span>
        </p>
        <p class="NormalWeb_2">Centers a String in a larger String of size size using the space character (' ').</p>
        <p class="NormalWeb"><span class="Strong">static String center(String str, int size, char padChar)</span>
        </p>
        <p class="NormalWeb_2">Centers a String in a larger String of size size.</p>
        <p class="NormalWeb"><span class="Strong">static String center(String str, int size, String padStr)</span>
        </p>
        <p class="NormalWeb_2">Centers a String in a larger String of size size.</p>
        <p class="NormalWeb"><span class="Strong">static String chomp(String str)</span>
        </p>
        <p class="NormalWeb_2">Removes one newline from end of a String if it's there, otherwise leave it alone.</p>
        <p class="NormalWeb"><span class="Strong">static String chomp(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Removes separator from the end of str if it's there, otherwise leave it alone.</p>
        <p class="NormalWeb"><span class="Strong">static String chop(String str)</span>
        </p>
        <p class="NormalWeb_2">Remove the last character from a String.</p>
        <p class="NormalWeb"><span class="Strong">static boolean contains(String str, char searchChar)</span>
        </p>
        <p class="NormalWeb_2">Checks if String contains a search character, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean contains(String str, String searchStr)</span>
        </p>
        <p class="NormalWeb_2">Checks if String contains a search String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsAny(String str, char[] searchChars)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains any character in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsAny(String str, String searchChars)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains any character in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsIgnoreCase(String str, String searchStr)</span>
        </p>
        <p class="NormalWeb_2">Checks if String contains a search String irrespective of case, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsNone(String str, char[] searchChars)</span>
        </p>
        <p class="NormalWeb_2">Checks that the String does not contain certain characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsNone(String str, String invalidChars)</span>
        </p>
        <p class="NormalWeb_2">Checks that the String does not contain certain characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsOnly(String str, char[] valid)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only certain characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean containsOnly(String str, String validChars)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only certain characters.</p>
        <p class="NormalWeb"><span class="Strong">static int countMatches(String str, String sub)</span>
        </p>
        <p class="NormalWeb_2">Counts how many times the substring appears in the larger String.</p>
        <p class="NormalWeb"><span class="Strong">static String defaultIfBlank(String str, String defaultStr)</span>
        </p>
        <p class="NormalWeb_2">Returns either the passed in String, or if the String is whitespace, empty ("") or null, the value of defaultStr.</p>
        <p class="NormalWeb"><span class="Strong">static String defaultIfEmpty(String str, String defaultStr)</span>
        </p>
        <p class="NormalWeb_2">Returns either the passed in String, or if the String is empty or null, the value of defaultStr.</p>
        <p class="NormalWeb"><span class="Strong">static String defaultString(String str)</span>
        </p>
        <p class="NormalWeb_2">Returns either the passed in String, or if the String is null, an empty String ("").</p>
        <p class="NormalWeb"><span class="Strong">static String defaultString(String str, String defaultStr)</span>
        </p>
        <p class="NormalWeb_2">Returns either the passed in String, or if the String is null, the value of defaultStr.</p>
        <p class="NormalWeb"><span class="Strong">static String deleteWhitespace(String str)</span>
        </p>
        <p class="NormalWeb_2">Deletes all whitespaces from a String as defined by Character.isWhitespace(char).</p>
        <p class="NormalWeb"><span class="Strong">static String difference(String str1, String str2)</span>
        </p>
        <p class="NormalWeb_2">Compares two Strings, and returns the portion where they differ.</p>
        <p class="NormalWeb"><span class="Strong">static boolean endsWith(String str, String suffix)</span>
        </p>
        <p class="NormalWeb_2">Check if a String ends with a specified suffix.</p>
        <p class="NormalWeb"><span class="Strong">static boolean endsWithAny(String string, String[] searchStrings)</span>
        </p>
        <p class="NormalWeb_2">Check if a String ends with any of an array of specified strings.</p>
        <p class="NormalWeb"><span class="Strong">static boolean endsWithIgnoreCase(String str, String suffix)</span>
        </p>
        <p class="NormalWeb_2">Case insensitive check if a String ends with a specified suffix.</p>
        <p class="NormalWeb"><span class="Strong">static boolean equals(String str1, String str2)</span>
        </p>
        <p class="NormalWeb_2">Compares two Strings, returning true if they are equal.</p>
        <p class="NormalWeb"><span class="Strong">static boolean equalsIgnoreCase(String str1, String str2)</span>
        </p>
        <p class="NormalWeb_2">Compares two Strings, returning true if they are equal ignoring the case.</p>
        <p class="NormalWeb"><span class="Strong">static String</span> <span class="Strong">escape(String str)</span></p>
        <p class="NormalWeb_2">Deprecated. Use StringEscapeUtils.escapeJava(String) This method will be removed in Commons Lang 3.0</p>
        <p class="NormalWeb"><span class="Strong">static String</span> <span class="Strong">getChomp(String str, String sep)</span></p>
        <p class="NormalWeb_2">Deprecated. Use substringAfterLast(String, String) instead (although this doesn't include the separator) Method will be removed in Commons Lang 3.0.</p>
        <p class="NormalWeb"><span class="Strong">static String</span> <span class="Strong">getCommonPrefix(String[] strs)</span></p>
        <p class="NormalWeb_2">Compares all Strings in an array and returns the initial sequence of characters that is common to all of them.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">getLevenshteinDistance(String s, String t)</span></p>
        <p class="NormalWeb_2">Find the Levenshtein distance between two Strings.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOf(String str, char searchChar)</span></p>
        <p class="NormalWeb_2">Finds the first index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOf(String str, char searchChar, int startPos)</span></p>
        <p class="NormalWeb_2">Finds the first index within a String from a start position, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOf(String str, String searchStr)</span></p>
        <p class="NormalWeb_2">Finds the first index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOf(String str, String searchStr, int startPos)</span></p>
        <p class="NormalWeb_2">Finds the first index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfAny(String str, char[] searchChars)</span></p>
        <p class="NormalWeb_2">Search a String to find the first index of any character in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfAny(String str, String searchChars)</span></p>
        <p class="NormalWeb_2">Search a String to find the first index of any character in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfAny(String str, String[] searchStrs)</span></p>
        <p class="NormalWeb_2">Find the first index of any of a set of potential substrings.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfAnyBut(String str, char[] searchChars)</span></p>
        <p class="NormalWeb_2">Search a String to find the first index of any character not in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfAnyBut(String str, String searchChars)</span></p>
        <p class="NormalWeb_2">Search a String to find the first index of any character not in the given set of characters.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfDifference(String[] strs)</span></p>
        <p class="NormalWeb_2">Compares all Strings in an array and returns the index at which the Strings begin to differ.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfDifference(String str1, String str2)</span></p>
        <p class="NormalWeb_2">Compares two Strings, and returns the index at which the Strings begin to differ.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfIgnoreCase(String str, String searchStr)</span></p>
        <p class="NormalWeb_2">Case in-sensitive find of the first index within a String.</p>
        <p class="NormalWeb"><span class="Strong">static int</span> <span class="Strong">indexOfIgnoreCase(String str, String searchStr, int startPos)</span></p>
        <p class="NormalWeb_2">Case in-sensitive find of the first index within a String from the specified position.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAllLowerCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only lowercase characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAllUpperCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only uppercase characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAlpha(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode letters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAlphanumeric(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode letters or digits.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAlphanumericSpace(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode letters, digits or space (' ').</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAlphaSpace(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode letters and space (' ').</p>
        <p class="NormalWeb"><span class="Strong">static boolean isAsciiPrintable(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the string contains only ASCII printable characters.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isBlank(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if a String is whitespace, empty ("") or null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isEmpty(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if a String is empty ("") or null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isNotBlank(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if a String is not empty (""), not null and not whitespace only.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isNotEmpty(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if a String is not empty ("") and not null.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isNumeric(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode digits.</p>
        <p class="NormalWeb"><span class="Strong">static boolean isNumericSpace(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only unicode digits or space (' ').</p>
        <p class="NormalWeb"><span class="Strong">static boolean isWhitespace(String str)</span>
        </p>
        <p class="NormalWeb_2">Checks if the String contains only whitespace.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Collection collection, char separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided Collection into a single String containing the provided elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Collection collection, String separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided Collection into a single String containing the provided elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Iterator iterator, char separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided Iterator into a single String containing the provided elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Iterator iterator, String separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided Iterator into a single String containing the provided elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Object[] array)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Object[] array, char separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Object[] array, char separator, int startIndex, int endIndex)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Object[] array, String separator)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p class="NormalWeb"><span class="Strong">static String join(Object[] array, String separator, int startIndex, int endIndex)</span>
        </p>
        <p class="NormalWeb_2">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOf(String str, char searchChar)</span>
        </p>
        <p class="NormalWeb_2">Finds the last index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOf(String str, char searchChar, int startPos)</span>
        </p>
        <p class="NormalWeb_2">Finds the last index within a String from a start position, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOf(String str, String searchStr)</span>
        </p>
        <p class="NormalWeb_2">Finds the last index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOf(String str, String searchStr, int startPos)</span>
        </p>
        <p class="NormalWeb_2">Finds the first index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOfAny(String str, String[] searchStrs)</span>
        </p>
        <p class="NormalWeb_2">Find the latest index of any of a set of potential substrings.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOfIgnoreCase(String str, String searchStr)</span>
        </p>
        <p class="NormalWeb_2">Case in-sensitive find of the last index within a String.</p>
        <p class="NormalWeb"><span class="Strong">static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos)</span>
        </p>
        <p class="NormalWeb_2">Case in-sensitive find of the last index within a String from the specified position.</p>
        <p class="NormalWeb"><span class="Strong">static int lastOrdinalIndexOf(String str, String searchStr, int ordinal)</span>
        </p>
        <p class="NormalWeb_2">Finds the n-th last index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static String left(String str, int len)</span>
        </p>
        <p class="NormalWeb_2">Gets the leftmost len characters of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String leftPad(String str, int size)</span>
        </p>
        <p class="NormalWeb_2">Left pad a String with spaces (' ').</p>
        <p class="NormalWeb"><span class="Strong">static String leftPad(String str, int size, char padChar)</span>
        </p>
        <p class="NormalWeb_2">Left pad a String with a specified character.</p>
        <p class="NormalWeb"><span class="Strong">static String leftPad(String str, int size, String padStr)</span>
        </p>
        <p class="NormalWeb_2">Left pad a String with a specified String.</p>
        <p class="NormalWeb"><span class="Strong">static int length(String str)</span>
        </p>
        <p class="NormalWeb_2">Gets a String's length or 0 if the String is null.</p>
        <p class="NormalWeb"><span class="Strong">static String lowerCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Converts a String to lower case as per String.toLowerCase().</p>
        <p class="NormalWeb"><span class="Strong">static String lowerCase(String str, Locale locale)</span>
        </p>
        <p class="NormalWeb_2">Converts a String to lower case as per String.toLowerCase(Locale).</p>
        <p class="NormalWeb"><span class="Strong">static String mid(String str, int pos, int len)</span>
        </p>
        <p class="NormalWeb_2">Gets len characters from the middle of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String normalizeSpace(String str)</span>
        </p>
        <p class="NormalWeb_2">Similar to <a href="http://www.w3.org/TR/xpath/#function-normalize" class="Hyperlink">http://www.w3.org/TR/xpath/#function-normalize</a> -space</p>
        <p class="NormalWeb"><span class="Strong">static int ordinalIndexOf(String str, String searchStr, int ordinal)</span>
        </p>
        <p class="NormalWeb_2">Finds the n-th index within a String, handling null.</p>
        <p class="NormalWeb"><span class="Strong">static String overlay(String str, String overlay, int start, int end)</span>
        </p>
        <p class="NormalWeb_2">Overlays part of a String with another String.</p>
        <p class="NormalWeb"><span class="Strong">static String remove(String str, char remove)</span>
        </p>
        <p class="NormalWeb_2">Removes all occurrences of a character from within the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String remove(String str, String remove)</span>
        </p>
        <p class="NormalWeb_2">Removes all occurrences of a substring from within the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String removeEnd(String str, String remove)</span>
        </p>
        <p class="NormalWeb_2">Removes a substring only if it is at the end of a source string, otherwise returns the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String removeEndIgnoreCase(String str, String remove)</span>
        </p>
        <p class="NormalWeb_2">Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String removeStart(String str, String remove)</span>
        </p>
        <p class="NormalWeb_2">Removes a substring only if it is at the begining of a source string, otherwise returns the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String removeStartIgnoreCase(String str, String remove)</span>
        </p>
        <p class="NormalWeb_2">Case insensitive removal of a substring if it is at the begining of a source string, otherwise returns the source string.</p>
        <p class="NormalWeb"><span class="Strong">static String repeat(String str, int repeat)</span>
        </p>
        <p class="NormalWeb_2">Repeat a String repeat times to form a new String.</p>
        <p class="NormalWeb"><span class="Strong">static String repeat(String str, String separator, int repeat)</span>
        </p>
        <p class="NormalWeb_2">Repeat a String repeat times to form a new String, with a String separator injected each time.</p>
        <p class="NormalWeb"><span class="Strong">static String replace(String text, String searchString, String replacement)</span>
        </p>
        <p class="NormalWeb_2">Replaces all occurrences of a String within another String.</p>
        <p class="NormalWeb"><span class="Strong">static String replace(String text, String searchString, String replacement, int max)</span>
        </p>
        <p class="NormalWeb_2">Replaces a String with another String inside a larger String, for the first max values of the search String.</p>
        <p class="NormalWeb"><span class="Strong">static String replaceChars(String str, char searchChar, char replaceChar)</span>
        </p>
        <p class="NormalWeb_2">Replaces all occurrences of a character in a String with another.</p>
        <p class="NormalWeb"><span class="Strong">static String replaceChars(String str, String searchChars, String replaceChars)</span>
        </p>
        <p class="NormalWeb_2">Replaces multiple characters in a String in one go.</p>
        <p class="NormalWeb"><span class="Strong">static String replaceEach(String text, String[] searchList, String[] replacementList)</span>
        </p>
        <p class="NormalWeb_2">Replaces all occurrences of Strings within another String.</p>
        <p class="NormalWeb"><span class="Strong">static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)</span>
        </p>
        <p class="NormalWeb_2">Replaces all occurrences of Strings within another String.</p>
        <p class="NormalWeb"><span class="Strong">static String replaceOnce(String text, String searchString, String replacement)</span>
        </p>
        <p class="NormalWeb_2">Replaces a String with another String inside a larger String, once.</p>
        <p class="NormalWeb"><span class="Strong">static String reverse(String str)</span>
        </p>
        <p class="NormalWeb_2">Reverses a String as per StrBuilder.reverse().</p>
        <p class="NormalWeb"><span class="Strong">static String reverseDelimited(String str, char separatorChar)</span>
        </p>
        <p class="NormalWeb_2">Reverses a String that is delimited by a specific character.</p>
        <p class="NormalWeb"><span class="Strong">static String right(String str, int len)</span>
        </p>
        <p class="NormalWeb_2">Gets the rightmost len characters of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String rightPad(String str, int size)</span>
        </p>
        <p class="NormalWeb_2">Right pad a String with spaces (' ').</p>
        <p class="NormalWeb"><span class="Strong">static String rightPad(String str, int size, char padChar)</span>
        </p>
        <p class="NormalWeb_2">Right pad a String with a specified character.</p>
        <p class="NormalWeb"><span class="Strong">static String rightPad(String str, int size, String padStr)</span>
        </p>
        <p class="NormalWeb_2">Right pad a String with a specified String.</p>
        <p class="NormalWeb"><span class="Strong">static String[] split(String str)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, using whitespace as the separator.</p>
        <p class="NormalWeb"><span class="Strong">static String[] split(String str, char separatorChar)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] split(String str, String separatorChars)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separators specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] split(String str, String separatorChars, int max)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array with a maximum length, separators specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByCharacterType(String str)</span>
        </p>
        <p class="NormalWeb_2">Splits a String by Character type as returned by java.lang.Character.getType(char).</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByCharacterTypeCamelCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Splits a String by Character type as returned by java.lang.Character.getType(char).</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByWholeSeparator(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator string specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByWholeSeparator(String str, String separator, int max)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator string specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator string specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator string specified.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitPreserveAllTokens(String str)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitPreserveAllTokens(String str, char separatorChar)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitPreserveAllTokens(String str, String separatorChars)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p class="NormalWeb"><span class="Strong">static String[] splitPreserveAllTokens(String str, String separatorChars, int max)</span>
        </p>
        <p class="NormalWeb_2">Splits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p class="NormalWeb"><span class="Strong">static boolean startsWith(String str, String prefix)</span>
        </p>
        <p class="NormalWeb_2">Check if a String starts with a specified prefix.</p>
        <p class="NormalWeb"><span class="Strong">static boolean startsWithAny(String string, String[] searchStrings)</span>
        </p>
        <p class="NormalWeb_2">Check if a String starts with any of an array of specified strings.</p>
        <p class="NormalWeb"><span class="Strong">static boolean startsWithIgnoreCase(String str, String prefix)</span>
        </p>
        <p class="NormalWeb_2">Case insensitive check if a String starts with a specified prefix.</p>
        <p class="NormalWeb"><span class="Strong">static String strip(String str)</span>
        </p>
        <p class="NormalWeb_2">Strips whitespace from the start and end of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String strip(String str, String stripChars)</span>
        </p>
        <p class="NormalWeb_2">Strips any of a set of characters from the start and end of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String[] stripAll(String[] strs)</span>
        </p>
        <p class="NormalWeb_2">Strips whitespace from the start and end of every String in an array.</p>
        <p class="NormalWeb"><span class="Strong">static String[] stripAll(String[] strs, String stripChars)</span>
        </p>
        <p class="NormalWeb_2">Strips any of a set of characters from the start and end of every String in an array.</p>
        <p class="NormalWeb"><span class="Strong">static String stripEnd(String str, String stripChars)</span>
        </p>
        <p class="NormalWeb_2">Strips any of a set of characters from the end of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String stripStart(String str, String stripChars)</span>
        </p>
        <p class="NormalWeb_2">Strips any of a set of characters from the start of a String.</p>
        <p class="NormalWeb"><span class="Strong">static String stripToEmpty(String str)</span>
        </p>
        <p class="NormalWeb_2">Strips whitespace from the start and end of a String returning an empty String if null input.</p>
        <p class="NormalWeb"><span class="Strong">static String stripToNull(String str)</span>
        </p>
        <p class="NormalWeb_2">Strips whitespace from the start and end of a String returning null if the String is empty ("") after the strip.</p>
        <p class="NormalWeb"><span class="Strong">static String substring(String str, int start)</span>
        </p>
        <p class="NormalWeb_2">Gets a substring from the specified String avoiding exceptions.</p>
        <p class="NormalWeb"><span class="Strong">static String substring(String str, int start, int end)</span>
        </p>
        <p class="NormalWeb_2">Gets a substring from the specified String avoiding exceptions.</p>
        <p class="NormalWeb"><span class="Strong">static String substringAfter(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Gets the substring after the first occurrence of a separator.</p>
        <p class="NormalWeb"><span class="Strong">static String substringAfterLast(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Gets the substring after the last occurrence of a separator.</p>
        <p class="NormalWeb"><span class="Strong">static String substringBefore(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Gets the substring before the first occurrence of a separator.</p>
        <p class="NormalWeb"><span class="Strong">static String substringBeforeLast(String str, String separator)</span>
        </p>
        <p class="NormalWeb_2">Gets the substring before the last occurrence of a separator.</p>
        <p class="NormalWeb"><span class="Strong">static String substringBetween(String str, String tag)</span>
        </p>
        <p class="NormalWeb_2">Gets the String that is nested in between two instances of the same String.</p>
        <p class="NormalWeb"><span class="Strong">static String substringBetween(String str, String open, String close)</span>
        </p>
        <p class="NormalWeb_2">Gets the String that is nested in between two Strings.</p>
        <p class="NormalWeb"><span class="Strong">static String[] substringsBetween(String str, String open, String close)</span>
        </p>
        <p class="NormalWeb_2">Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.</p>
        <p class="NormalWeb"><span class="Strong">static String swapCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.</p>
        <p class="NormalWeb"><span class="Strong">static String trim(String str)</span>
        </p>
        <p class="NormalWeb_2">Removes control characters (char &lt;= 32) from both ends of this String, handling null by returning null.</p>
        <p class="NormalWeb"><span class="Strong">static String trimToEmpty(String str)</span>
        </p>
        <p class="NormalWeb_2">Removes control characters (char &lt;= 32) from both ends of this String returning an empty String ("") if the String is empty ("") after the trim or if it is null.</p>
        <p class="NormalWeb"><span class="Strong">static String trimToNull(String str)</span>
        </p>
        <p class="NormalWeb_2">Removes control characters (char &lt;= 32) from both ends of this String returning null if the String is empty ("") after the trim or if it is null.</p>
        <p class="NormalWeb"><span class="Strong">static String uncapitalize(String str)</span>
        </p>
        <p class="NormalWeb_2">Uncapitalizes a String changing the first letter to title case as per Character.toLowerCase(char).</p>
        <p class="NormalWeb"><span class="Strong">static String upperCase(String str)</span>
        </p>
        <p class="NormalWeb_2">Converts a String to upper case as per String.toUpperCase().</p>
        <p class="NormalWeb"><span class="Strong">static String upperCase(String str, Locale locale)</span>
        </p>
        <p class="NormalWeb_2">Converts a String to upper case as per String.toUpperCase(Locale).</p>
        <p class="NormalWeb">&#160;</p>
    </body>
</html>