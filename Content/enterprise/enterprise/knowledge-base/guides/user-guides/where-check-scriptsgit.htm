<?xml version="1.0" encoding="utf-8"?>
<html>
    <head><title></title>
    </head>
    <body>
        <h1>User Guide: Where Do I Check In Database Scripts (Git)</h1>
        <p>This documentation shows database developers - those creating SQL scripts for changes to databases - where to place their scripts so that those scripts are picked up by <MadCap:variable name="General.CompanyName" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" />'s Deployment Packager for creating database change artifacts.</p>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Prerequisites">Prerequisites</h2>
        <p>You will need access to your Git server, e.g. Bitbucket, Github or Gitlab, such that you have read/write access to the repository.&#160;</p>
        <p>You will also need to setup appropriate branches where developers can commit/check-in their database files.&#160;</p>
        <p>You may setup your Git repository in such a way that your database scripts reside in the application code repository. Or you could setup a separate repository just for database files which would be separate from your application code repository.</p>
        <p>Make sure to review&#160;<a href="..\..\DDOC\pages\Placing_Files_in_the_SCM_Repository.htm">Placing Files in the SCM Repository</a> to understand how Datical processes database changes (SQL files) when those are checked into Git. There is additional information for Oracle and SQL Server:</p>
        <ul>
            <li><a href="..\..\DDOC\pages\Oracle_Database_Objects_and_Packaging.htm">Oracle Database Objects and Packaging</a>
            </li>
            <li><a href="..\..\DDOC\pages\SQL_Server_Database_Objects_and_Packaging.htm">SQL Server Database Objects and Packaging</a>
            </li>
        </ul>
        <p>Download a Git tool&#160;<span style="color: rgb(51,51,51);"><span>such as <a class="external-link" href="https://git-for-windows.github.io/" rel="nofollow">Git Bash</a>&#160;or&#160;<a class="external-link" href="https://tortoisegit.org/" rel="nofollow">Tortoise Git</a>.</span></span></p>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Overview">Overview</h2>
        <p><span style="color: rgb(38,38,38);">As a developer who creates database files you will now be checking your scripts into Git. </span>
        </p>
        <p><span style="color: rgb(38,38,38);">Make sure to review "Developer SCM Packaging" links mentioned in Prerequisites to become familiar with directory structure necessary for Datical's Deployment Packager to work correctly.</span>
        </p>
        <h3 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Git"><span style="color: rgb(51,51,51);"><span style="margin-left: 0.0px;">Git</span></span>
        </h3>
        <p><span style="color: rgb(51,51,51);"><span style="margin-left: 0.0px;">You will have a Git URL which you can point to for committing your database files. The Git URL may look like this:</span></span>
        </p>
        <ul>
            <li>HTTP: http://<span style="color: rgb(153,153,153);"><em>&lt;git_server&gt;</em></span>/myproject/myproject_sql.git</li>
            <li><span style="color: rgb(51,51,51);"><span style="margin-left: 0.0px;">SSH:&#160;git@<span style="color: rgb(153,153,153);"><em>&lt;git_server&gt;</em></span>:myproject/myproject_sql.git</span></span>
            </li>
        </ul>
        <p><span style="color: rgb(51,51,51);"><span style="margin-left: 0.0px;">Within a Git repository, you will be setup with a branch to commit your code. Let's assume that you are setup with a "developer" branch. Using</span></span><span style="color: rgb(51,51,51);"><span style="margin-left: 0.0px;">&#160;a web browser or a Git tool (such as <a class="external-link" href="https://git-for-windows.github.io/" rel="nofollow">Git Bash</a> or&#160;<a class="external-link" href="https://tortoisegit.org/" rel="nofollow">Tortoise Git</a>), switch to the "developer" branch and commit your files. Here are a series of commands to setup connection to Git repository from your own machine:</span></span>
        </p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Git commands</b>
            </div>
            <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve"># Setup user name and email so that all commits are given this identity
git config --global user.name "&lt;user_name&gt;"git config --global user.email "&lt;user_email&gt;"# Change to directory on your local machine to create local repository
cd &lt;existing_<MadCap:variable name="General.DaticalDB" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" />_project_directory&gt;# Initialize this directory for git
git init
# Switch to "developer" branch on your local repository
git checkout -b developer
# Connect your local "developer" repository to remote "developer" repository
git remote add developer &lt;repository_URL_of_remote_repo&gt;# Always perform a "git pull" before committing your files
git pull developer developer
# Add your files so that they can be committed to remote repository
#   You can use "--all" for all files or specify individual files instead of "--all"git add --all
# Commit your files to local repository
#   You would typically provide a brief commit message to include ticket number or service ID
#   If you enclose your ticket number or service ID in square brackets, then Datical will use the string inside square brackets as a label
#	For example, git commit -m "Fixes [JIRA-90210]"git commit -m "&lt;your commit message&gt;"# Perform a "git push" to update changes to remote repository
git push -u developer developer</pre>
            </div>
        </div>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Relatedarticles">Related articles</h2>
        <p />
        <p />
        <ul class="content-by-label conf-macro output-block">
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="How_To__Configure_Packaging_Order_with_ddl_Folder_Set_to_DIRECT_or_DDL_DIRECT.htm">How To: Configure Packaging Order with ddl Folder Set to DIRECT or DDL_DIRECT</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="How_To__Improve_Packager_Performance.htm">How To: Improve Packager Performance</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="How_To__Improve_Deployment_Performance.htm">How To: Improve Deployment Performance</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="How_To__Remove_abandonded_changes_from_Datical_and_lower_environments.htm">How To: Remove abandonded changes from Datical and lower environments</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="How_To__Abandon_changes.htm">How To: Abandon changes</a>
                </div>
            </li>
        </ul>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>