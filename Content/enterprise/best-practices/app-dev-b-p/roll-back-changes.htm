<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
	<head>
		<title>Liquibase Enterprise Documentation</title>
		<meta name="description" content="Liquibase Enterprise Documentation" />
	</head>
	<body>
		<h1>Rolling Back Changes</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>The
			<MadCap:variable name="General.DaticalDB" /> DB rollback feature allows you to undo changes you have deployed to a database. The changelog for the project maintains a sequential record of all changesets. To perform a rollback operation, you must specify which changeset you want to roll back to.
			<MadCap:variable name="General.DaticalDB" /> then does the work to undo all the changes that have been deployed to the database since that changeset and removes changesets from the changelog back to the specified changeset that you want to roll back to.</p>
		<h1 id="RollingBackChanges-RunningRollbackOperations">Running Rollback Operations</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>While there are several supported rollback methods, customers typically roll back the last deployment. This can be performed from either the Desktop GUI or Desktop CLI. When you run the rollback last deploy operation, all rollback scripts associated with the changesets from the last deployment are rolled back and the record of their deployment is removed from the DATABASECHANGELOG table.</p>
		<p>After rollback, changesets are retained in the changelog.xml file and will be available for redeployment.</p>
		<p>For more information, see the following documents:</p>
		<ul class="childpages-macro conf-macro output-block">
			<li>Performing Rollback Operations in the GUI</li>
			<li><a href="rollback-operations-cli.htm">Performing Rollback Operations in the CLI</a></li>
		</ul>
		<h1 id="RollingBackChanges-SpecifyingRollbackScripts">Specifying Rollback Scripts</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>The best practice is to provide a rollback script for each SQL script. You check it in to your SCM along with the SQL script. During a rollback operation,
			<MadCap:variable name="General.DaticalDB" /> DB automatically runs the rollback script.&#160;</p>
		<p>For more information see:&#160;<a href="../../move-operations-changes-release-pipeline/roll-back-changes/associate-rollback-scripts-sql.htm">Associating Rollback Scripts with SQL Scripts</a></p>
		<h1 id="RollingBackChanges-RollbackFileValidationDuringPackaging">Rollback File Validation During Packaging</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>When you package a non-rerunnable script (most DDL and DML scripts) with a provided rollback file, you have the option of validating the rollback file. Depending on the setting of <code>validateRollback</code> in <code>deployPackager.properties</code>, validation is performed in the following ways:</p>
		<ul>
			<li><strong>none&#160;</strong>- Do not test rollback scripts. <span style="color: rgb(255,0,0);"><strong>THIS IS THE DEFAULT.</strong></span></li>
			<li><strong>withoutCompare</strong> - Validate that the rollback scripts execute successfully. This does NOT test the effect of the rollback scripts on the database.
				<ul>
					<li>If the rollback script execution fails, packager exits with an ERROR.</li>
				</ul>
			</li>
			<li><strong>withCompare</strong> - Validate that the rollback scripts execute successfully and compare the before/after state of the database to ensure the rollback scripts completely returned the database to its original state.<ul>
					<li>If the rollback script execution fails, packager exits with an ERROR.</li>
					<li>If the "rollback effective" validation fails, packager continues and shows a WARNING message in the log.</li>
				</ul>
			</li>
		</ul>
		<p>For more information see: <a href="rollback-validation-during-packaging.htm">Rollback File Validation During Packaging</a></p>
		<h1 id="RollingBackChanges-RollingBackStoredLogic">Rolling Back Stored Logic</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>Stored logic collectively refers to database objects that are programmatic (function, package, packagebody,&#160;procedure, trigger, view). <MadCap:variable name="General.DaticalDB" /> manages them in place and allows them to be redeployed. </p>
		<p>Starting with version 4.29, all stored logic changesets are marked with a version. Every time a stored logic script is packaged, it will be assigned a version number starting at 1. The version number is incremented with each subsequent packaging job.</p>
		<p>Running Rollback Last Deploy on stored logic rolls back the current version to the previously deployed version. If you need to roll back more than one deployment, then you must perform a&#160;Rollback Last Deploy operation once per deployment until you get to the desired state.</p>
		<p>For each stored logic deployment,
			<MadCap:variable name="General.DaticalDB" /> keeps track of the previously deployed version number.
			<MadCap:variable name="General.DaticalDB" /> uses this "previously deployed version number" to know what version to rollback to.</p>
		<h2 id="RollingBackChanges-RequirementsforStartingtoUseDaticalwithExistingStoredLogic">Requirements for Starting to Use
			<MadCap:variable name="General.DaticalDB" /> with Existing Stored Logic</h2>
		<ul>
			<li>The stored logic in your REF environment should be the same as in your PROD environment. This is a normal part of starting to use
				<MadCap:variable name="General.DaticalDB" />. See <a href="../../define-release-pipeline/create-manage-projects/initialize-databases.htm" rel="nofollow">Initializing Databases in the Project</a>. </li>
			<li>Remove stray stored logic scripts from all steps in the release pipeline BEFORE beginning to package and deploy changes.</li>
		</ul>
		<h2 id="RollingBackChanges-RollingBackStoredLogictoVersion0">Rolling Back Stored Logic to Version 0</h2>
		<p>The first time a package, packagebody, trigger, view, function, or procedure script is packaged â€“ we look to see if that object exists in the Reference Database (used for packaging).</p>
		<ul>
			<li>If it exists, we create a "version 0" of the script to be the pre-existing version for rollback</li>
			<li>If it doesn't exist, we create a "version 0" which is a DROP of the object for rollback</li>
		</ul>
		<p>The first script packaged of the object will be version 1</p>
		<p>When running rollback, the previously deployed version will be re-deployed.</p>
		<p>For backwards compatibility, if no version 0 exists and you perform a rollback that would require a version 0 change,
			<MadCap:variable name="General.DaticalDB" /> will:</p>
		<ol>
			<li>Output a warning message to the console</li>
			<li>Leave the stored logic object deployed to the database</li>
			<li>Update the DATABASECHANGELOG tracking table to remove the deployment record of the stored logic object</li>
		</ol>
		<p>Effectively, if no version 0 exists,
			<MadCap:variable name="General.DaticalDB" /> will NOT perform a rollback of the stored logic object but WILL rollback the record of the stored logic deployment in the environment. This way, you can re-deploy the stored logic object and you don't suffer from
			<MadCap:variable name="General.DaticalDB" /> accidentally doing a DROP on the stored logic object.</p>
		<p>Limitations</p>
		<p>Rollback to 0 is not supported on the following database platforms:</p>
		<ul>
			<li>Postgres EnterpriseDB</li>
			<li>DB2 on z/OS</li>
		</ul>
		<h1 id="RollingBackChanges-DevelopmentWorkflows">Development Workflows</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>In addition to rollback capabilities, Datical supports Developer Workflow features that can be used as an alternative to rollback in order to undo or rework database changes.</p>
		<p>Datical's rollback capabilities are not compatible with Datical's Developer Workflow features. Do NOT use rollback in conjunction with Developer Workflow features.</p>
		<p>To learn more:&#160;<a href="workflows-managing-changesets-development.htm" rel="nofollow">Developer Workflows: Managing Changesets During Development and Test</a></p>
	</body>
</html>