<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title>Liquibase Enterprise Documentation</title>
        <link href="../../../../Resources/Stylesheets/Developer+Workflows_+Managing+Changesets+During+Development+and+Test.css" rel="stylesheet" />
    </head>
    <body>
        <h1 class="Heading1">Overview</h1> <MadCap:snippetText src="../../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>The normal flow of deployment goes through stages. Depending on your environment, you may have more or fewer stages.&#160;</p><p>Development &gt; Test &gt; Production</p><h2 class="Heading2">Developer Workflow</h2><p>During development and test you may find problems with the original SQL scripts that were packaged and deployed to test. A failed test might indicate a need to remove or replace changesets that were deployed to Test and make adjustments in the Development environment. These adjustments might require the developer to:</p><ul><li class="li_1"><p class="p_1"><span class="Strong">Ignore a changeset</span> -&#160;Abandon changeset in place and prevent it from being deployed further. &#160;If needed, you can recover it (unignore) later.&#160;</p></li><li class="li_1"><p class="p_1"><span class="Strong">Clean up&#160; a previously deployed changeset</span> - Ignore deployed changeset, create changesets to clean up any changes that were created.</p></li><li class="li_1"><p class="p_1"><span class="Strong">Replace a previously deployed changeset</span> - Replace the changes in a changeset with other changes. This usually implies running a cleanup first.</p></li><li class="li_1"><p class="p_1"><span class="Strong">Use versions with changesets</span> - Deploy only the latest version of a changeset. This capability is intended for use with programmatic parts of the database (stored logic).&#160;</p></li></ul><p>To enable this capabilty, new changeset attributes are added to all changesets generated from a SQL script.&#160;</p><h2 class="Heading2">Comparison to Rollback</h2><p>The normal release workflow allows you to deploy and roll back changesets throughout a project pipeline. Rollbacks can be automatic for some changes or be performed by custom rollback scripts you supply. See&#160;<a href="https://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896570268/Rolling+Back+Changes" class="Hyperlink">Rolling Back Changes</a>.&#160;</p><p>However, the development workflow is for making changes to the changesets (and other changesets they affect).&#160; When you use the -ignore, -cleanup, and -replace scripts, they mark the original changesets so that they are no longer deployed. Changes are anticipated at these stages in a pipeline.&#160; They are not expected in later stages.&#160;</p><p>See&#160;<a href="../../../package-sql-scripts-for-deployment/workflow-deploy-changesets/rollback-script-handling.htm" class="Hyperlink">Rollback Script Handling</a> for more information on how to work with existing rollback scripts in a development workflow.&#160;</p><h2 class="Heading2">Example: ignoring a deployed changeset.&#160;</h2><p>To signal a change, you create a special file using the same base name as the original SQL script, apply a suffix (for example, -ignore), and place it in the same directory where you placed the original file.&#160;</p><ul><li class="li_1"><p class="p_1"><span class="HTMLCode_1">invoice_columns.sql</span></p></li><li class="li_1"><p class="p_1"><span class="HTMLCode_1">invoice_columns-ignore.sql or invoice_columns_ignore.sql</span></p></li></ul><p>When <span class="HTMLCode_1">invoice_columns-ignore.sql or invoice_columns_ignore.sql</span> is processed, the <span class="HTMLCode_1">ignore</span> attribute is set on all of the original changesets produced by <span class="HTMLCode_1">invoice_columns.sql</span>.&#160; The changesets are no longer deployed.&#160;</p><p>Do not use more than one suffix when working in a development workflow (-ignore, -unignore, -replace, -cleanup, -rollback). For example, when you update a <span class="HTMLCode_1">myscript-rollback.sql or myscript_rollback.sql</span> file, you update it in place. Do not create a <span class="HTMLCode_1">myscript-rollback-replace</span> script.&#160;It causes an error during packaging.&#160;&#160;</p><h4 class="Heading4">It is important to maintain consistent case in workflow file names!</h4><p>When creating a new workflow file it is important to maintain file name casing that is consistent with the original file. <span class="HTMLCode_1">MYSCRIPT-ignore.sql</span> will not match&#160;<span class="HTMLCode_1">myscript.sql</span>.</p><p>If you are using git, you may have to run the following command to configure your repository to enforce consistent file name case:&#160;<span class="HTMLCode_2">git config core.ignorecase false</span></p></body>
</html>