<?xml version="1.0" encoding="utf-8"?>
<html>
    <head><title></title>
    </head>
    <body>
        <h1>Implementation Guide: Best Practices for Datical and SQL Code Repositories<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" /></h1> <MadCap:snippetText src="../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-Overview">Overview</h2>
        <p>The idea for this topic is to think about what are best practices for Datical and SQL SCM repositories.</p>
        <p>In some instances, it makes sense to use separate SCM repositories for Datical project and SQL code. This may not be ideal when application code has dependent SQL code.</p>
        <p>Therefore, where you put your SQL repository depends on your usage pattern.</p>
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-Considerations">Considerations</h2>
        <h3 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-AppcodeandSQLcodeinthesamerepository">App code and SQL code in the same repository</h3>
        <p>This setup implies that database changes are part of an application release process where application releases have dependent database changes.</p>
        <p>It is important to note that with this type of repository setup, it is expected that each repository gets its own database or at least its own schema(s). This setup is not possible if schemas are shared across different application components where each component has its own separate repository.</p>
        <h3 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-AppcodeandSQLcodeinseparaterepositories">App code and SQL code in separate repositories</h3>
        <p>Keeping application and SQL code in separate repositories is sometimes useful. This covers a number of use cases such as:</p>
        <ul>
            <li>Database changes are scripted by non-developers (i.e., developers submit a change request and those requests are typically handled by DBAs or data architects)</li>
            <li>Different types of changes are scripted by different roles (e.g., DDL changes are scripted by developers, stored logic changes are created by developers and DML changes come from business analysts)</li>
            <li>Database changes are independent of application changes - this is typically the case when majority of database changes are just DML changes</li>
        </ul>
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-ApplicationRepository">Application Repository</h2>
        <p>Each application repository already has an application code directory ("<code>app_code</code>"). The database code directory needs to sit somewhere in the repository's directory structure. For example, the database code directory, called&#160;"<code>sql_code</code>" may reside parallel to the "<code>app_code</code>" directory. The resulting structure may look like this:</p>
        <ul>
            <li><code>app_billing</code>  &#160; <em>(this is the repository name)</em><ul><li style="margin-left: 0.0px;"><code>app_code</code><ul><li style="margin-left: 0.0px;"><code>main</code><ul><li style="margin-left: 0.0px;"><code>...</code></li><li style="margin-left: 0.0px;"><code>...</code></li></ul></li></ul></li><li style="margin-left: 0.0px;"><code>sql_code</code><ul><li style="margin-left: 0.0px;"><code>data_dml</code></li><li style="margin-left: 0.0px;"><code>ddl</code></li><li style="margin-left: 0.0px;"><code>function</code></li><li style="margin-left: 0.0px;"><code>package</code></li><li style="margin-left: 0.0px;"><code>packagebody</code></li><li style="margin-left: 0.0px;"><code>procedure</code></li><li style="margin-left: 0.0px;"><code>sql_direct</code></li><li style="margin-left: 0.0px;"><code>trigger</code></li><li style="margin-left: 0.0px;"><code>view</code></li></ul></li></ul></li>
        </ul>
        <p>The benefit of using this approach is that, in Git, when you branch your repository, your database code directory is included in the branch. As an example, if you are working on a particular story or a sprint, you can branch the repository and then check-in your code changes and database changes in the specific branch.</p>
        <p>For working with microservices architecture, you may have several different repositories corresponding to each microservice. Each microservice may also have its own database or schema(s).</p>
        <p>Let's assume that there are 5 different code repositories used for an application with microservices architecture. In Git, each repository may show up as:</p>
        <ol>
            <li><code>app_core</code>
            </li>
            <li><code>app_cart</code>
            </li>
            <li><code>app_online</code>
            </li>
            <li><code>app_billing</code>
            </li>
            <li><code>app_payments_history</code>
            </li>
            <li><code>app_inventory</code>
            </li>
        </ol>
        <p>This means that every microservice that depends on a database will now need a "<code>sql_code</code>" directory. Your resulting structure may look like this:</p>
        <ol style="margin-left: 0.0px;">
            <li><code>app_core</code>
                <ul>
                    <li style="margin-left: 0.0px;"><code>app_code</code>
                    </li>
                    <li style="margin-left: 0.0px;"><code>sql_code</code>
                    </li>
                </ul>
            </li>
            <li><code>app_cart</code>
                <ul>
                    <li><code>app_code</code>
                    </li>
                    <li><code>sql_code</code>
                    </li>
                </ul>
            </li>
            <li><code>app_online</code>
                <ul>
                    <li><code>app_code</code>
                    </li>
                    <li><code>sql_code</code>
                    </li>
                </ul>
            </li>
            <li><code>app_billing</code>
                <ul>
                    <li><code>app_code</code>
                    </li>
                    <li><code>sql_code</code>
                    </li>
                </ul>
            </li>
            <li><code>app_payments_history</code>
                <ul>
                    <li><code>app_code</code>
                    </li>
                    <li><code>sql_code</code>
                    </li>
                </ul>
            </li>
            <li><code>app_inventory</code>
                <ul>
                    <li><code>app_code</code>
                    </li>
                    <li><code>sql_code</code>
                    </li>
                </ul>
            </li>
        </ol>
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-DaticalRepository">Datical Repository</h2>
        <p>There will be a separate Datical project for each application repository. In the example above, there would be a dedicated Datical project for each microservice. As a result, since there are six (6) distinct repositories (i.e., microservices), there will be six (6) different Datical projects. As such, each Datical project would have its own code repository.</p>
        <p>The list of repositories may look like this:</p>
        <ul>
            <li><code>app_core</code>
            </li>
            <li><code>app_core_datical</code>
            </li>
            <li><code>app_cart</code>
            </li>
            <li><code>app_cart_datical</code>
            </li>
            <li><code>app_online</code>
            </li>
            <li><code>app_online_datical</code>
            </li>
            <li><code>app_billing</code>
            </li>
            <li><code>app_billing_datical</code>
            </li>
            <li><code>app_payments_history</code>
            </li>
            <li><code>app_payments_history_datical</code>
            </li>
            <li><code>app_inventory</code>
            </li>
            <li><code>app_inventory_datical</code>
            </li>
        </ul>
        <p>
            <br />
        </p>
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-BuildSetup">Build Setup</h2>
        <p>Whether you setup continuous integration builds or nightly builds (or both), you will now need to think about how to accommodate database changes in your build process. For building database changes with Datical, you will need to invoke Datical's Deployment Packager.</p>
        <p>Refer to these existing documents for learning more about Deployment Packager:</p>
        <ul>
            <li><a href="best-practices-sql-repos.htm">Placing Files in the SCM Repository</a>
            </li>
            <li><a href="best-practices-sql-repos.htm">Oracle Database Objects and Packaging</a>
            </li>
            <li><a href="best-practices-sql-repos.htm">SQL Server Database Objects and Packaging</a>
            </li>
            <li><a href="best-practices-sql-repos.htm">Implementation Guide: Deploy Packager Configuration</a>
            </li>
        </ul>
        <p>You may choose to keep you current build setup as is and create a separate build job for database changes. Or you may update your build setup to now include database changes. Either way, your process will now require you to checkout code from two different repositories: one from application repository and the other from the corresponding Datical repository. Here is what the pseudo code for Datical's Deployment Packager would look like:</p>
        <ul>
            <li>Checkout code from application repository</li>
            <li>Checkout code from corresponding Datical repository</li>
            <li>Build application code</li>
            <li>Invoke Datical's Deployment Packager to build database changes</li>
            <li>Create an artifact version for application</li>
            <li>Create an artifact version for database changes</li>
        </ul>
        <h2 id="ImplementationGuide:BestPracticesforDaticalandSQLCodeRepositories-Relatedarticles">Related articles</h2>
        <p />
        <p />
        <ul class="content-by-label conf-macro output-block">
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="best-practices-sql-repos.htm">How To: Configure Packaging Order with ddl Folder Set to DIRECT or DDL_DIRECT</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="best-practices-sql-repos.htm">How To: Improve Packager Performance</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="best-practices-sql-repos.htm">How To: Improve Deployment Performance</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="best-practices-sql-repos.htm">How To: Remove abandonded changes from Datical and lower environments</a>
                </div>
            </li>
            <li>
                <div><span class="icon aui-icon aui-icon-small aui-iconfont-page-default" title="Page">Page:</span>
                </div>
                <div class="details"><a href="best-practices-sql-repos.htm">How To: Abandon changes</a>
                </div>
            </li>
        </ul>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>