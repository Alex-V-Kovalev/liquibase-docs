<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body> <h1>Best Practices for Developer Workflows <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /></h1><h2>Development Process</h2><p>•	Use in the DEV and TEST Stages</p><p>•	Do not use on the PROD Stage</p><p>Use this capability to make changes in a feedback loop between DEV and TEST.</p><p>1.	Deploy to DEV</p><p>2.	Deploy to TEST</p><p>3.	Testers communicate changes needed and testing results back to developers.</p><p>4.	Developers use the changeset management capabilities to amend/replace/version changesets and redeploy to TEST</p><p>5.	Continue until ready to deploy to PROD</p><p>6.	Analyze the net effect of tested changes and use new changesets to deploy to PROD.</p><p>Caution</p><p>Do not use the changeset-modification tools on changes that have been deployed to steps later than TEST. They may work but may have undesired side effects.</p><h2>Use Cases for Development Workflow</h2><p>The Datical DB Knowledge Base contains User Guide: Developer Workflow, which describes how to move from your first SCM repository check-in through various activities in the Development Workflow.</p><h2>Usage with SQL Script Types</h2><p>Deployment Packager distinguishes SQL script types. When using SCM tools, you place scripts into a directory structure according to type. Deployment Packager processes the files according to type. It packages by type in two general ways:</p><p>•	Process and archive. Done for "non-rerunnable" types: DDL folder or packageMethod=CONVERT, DDL_DIRECT folder or packageMethod=DDL_DIRECT, DATA_DML folder or packageMethod=DATA_DML, SQL folder or packageMethod=SQLFILE, SQL_DIRECT folder or packageMethod=DIRECT.  These changes are typically only deployed once.  Use ignore/unignore or cleanup/replace with these types.</p><p>•	Processed in place. Done for stored logic folders FUNCTION, PACKAGE, PACKAGEBODY, PROCEDURE, TRIGGER, VIEW, or packageMethod=STOREDLOGIC.  Use versioning with these types.  These changes are stored in place and can be modified and deployed multiple times.</p><p>You should be familiar with how Deployment Packager processes scripts in order to use the changeset-management tools effectively.</p><p>See Other Means of Getting Changes into the Release Pipeline for details on the directory structure in SCM repositories and script execution order.</p><h3>Ignore and Unignore</h3><p>•	Use on any change scripts.</p><p>•	Cleanup and replace internally set the ignore attribute on changesets they affect.</p><h3>Cleanup and Replace</h3><p>•	Use on changes that are deployed once and archived</p><p>•	Do not use on stored logic and other changes that are maintained in place and deployed multiple times.</p><h3>Version</h3><p>•	Use on changes that are maintained in place and deployed multiple times, such as stored logic.</p><p>•	Use the versionStrategy setting in the metadata.properties file to specify deployment behavior (deployAll is the default, deployLatest can be specified).</p><h2>Use Small Scopes for SQL Scripts</h2><p>The changeset-modification tools work best with SQL scripts that contain a small number of changes.</p><p>When an application change calls for a multiple object changes in the database schema, it is better to break those changes into several small SQL scripts rather than use one large one. This is particularly true for changes deployed to DEV and TEST, when it is important to be able to make changes quickly in order to converge on passing test criteria.Best Practices for Developer Workflows</p><p>•	Development Process</p><p>•	Use Cases for Development Workflow</p><p>•	Usage with SQL Script Types</p><p>o	Ignore and Unignore</p><p>o	Cleanup and Replace</p><p>o	Version</p><p>•	Use Small Scopes for SQL Scripts</p><p>Development Process</p><p>•	Use in the DEV and TEST Stages</p><p>•	Do not use on the PROD Stage</p><p>Use this capability to make changes in a feedback loop between DEV and TEST.</p><p>1.	Deploy to DEV</p><p>2.	Deploy to TEST</p><p>3.	Testers communicate changes needed and testing results back to developers.</p><p>4.	Developers use the changeset management capabilities to amend/replace/version changesets and redeploy to TEST</p><p>5.	Continue until ready to deploy to PROD</p><p>6.	Analyze the net effect of tested changes and use new changesets to deploy to PROD.</p><p>Caution</p><p>Do not use the changeset-modification tools on changes that have been deployed to steps later than TEST. They may work but may have undesired side effects.</p><p>Use Cases for Development Workflow</p><p>The Datical DB Knowledge Base contains User Guide: Developer Workflow, which describes how to move from your first SCM repository check-in through various activities in the Development Workflow.</p><p>Usage with SQL Script Types</p><p>Deployment Packager distinguishes SQL script types. When using SCM tools, you place scripts into a directory structure according to type. Deployment Packager processes the files according to type. It packages by type in two general ways:</p><p>•	Process and archive. Done for "non-rerunnable" types: DDL folder or packageMethod=CONVERT, DDL_DIRECT folder or packageMethod=DDL_DIRECT, DATA_DML folder or packageMethod=DATA_DML, SQL folder or packageMethod=SQLFILE, SQL_DIRECT folder or packageMethod=DIRECT.  These changes are typically only deployed once.  Use ignore/unignore or cleanup/replace with these types.</p><p>•	Processed in place. Done for stored logic folders FUNCTION, PACKAGE, PACKAGEBODY, PROCEDURE, TRIGGER, VIEW, or packageMethod=STOREDLOGIC.  Use versioning with these types.  These changes are stored in place and can be modified and deployed multiple times.</p><p>You should be familiar with how Deployment Packager processes scripts in order to use the changeset-management tools effectively.</p><p>See Other Means of Getting Changes into the Release Pipeline for details on the directory structure in SCM repositories and script execution order.</p><p>Ignore and Unignore</p><p>•	Use on any change scripts.</p><p>•	Cleanup and replace internally set the ignore attribute on changesets they affect.</p><p>Cleanup and Replace</p><p>•	Use on changes that are deployed once and archived</p><p>•	Do not use on stored logic and other changes that are maintained in place and deployed multiple times.</p><p>Version</p><p>•	Use on changes that are maintained in place and deployed multiple times, such as stored logic.</p><p>•	Use the versionStrategy setting in the metadata.properties file to specify deployment behavior (deployAll is the default, deployLatest can be specified).</p><p>Use Small Scopes for SQL Scripts</p><p>The changeset-modification tools work best with SQL scripts that contain a small number of changes.</p><p>When an application change calls for a multiple object changes in the database schema, it is better to break those changes into several small SQL scripts rather than use one large one. This is particularly true for changes deployed to DEV and TEST, when it is important to be able to make changes quickly in order to converge on passing test criteria.</p></body>
</html>