<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Liquibase Enterprise Documentation</title>
        <meta name="description" content="Liquibase Enterprise Documentation" />
    </head>
    <body>
        <h1>Oracle Database Objects and Packaging</h1>
        <MadCap:snippetText src="../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
        <h2>Qualifying Object Names</h2>
        <ul>
            <li>For a <strong>Single-Schema</strong> project, you can qualify object names with the <strong>schema name</strong>. If they are left unqualified, <MadCap:variable name="General.DaticalDB" /> uses the Connection Schema, or the Default Schema (if specified).</li>
            <li>For a <strong>Multi-Schema Project</strong>, you must qualify object names with the <strong>schema name</strong> so they get deployed to the correct schema during packaging.</li>
            <li>You can use the <code>schemaName</code> attribute in the <code>metadata.properties</code> file to indicate the default schema. See <a href="metadata-properties-file.htm" rel="nofollow">Using the metadata.properties file</a>.</li>
        </ul>
        <h2>Oracle SCM Packaging Patterns</h2>
        <p>Note that <MadCap:variable name="General.DaticalDB" /> packages non-transient files differently from transient files. Place scripts for Oracle objects in packaging folders as follows.</p>
        <ul>
            <li><b>Non-transient</b> – In-place editing, packaging and <strong>no</strong> archiving of database changes so they can be managed similar to application code. This applies to the following object types:
				<ul><li>Procedures – <code>procedure</code> folder</li><li>Functions – <code>function</code> folder</li><li>Package – <code>package</code> folder</li><li>Package Body – <code>packagebody</code> folder</li><li>Views – <code>view</code> folder</li><li>Triggers – <code>trigger</code> folder</li></ul></li>
            <li><b>Transient</b> – Database changes are archived after packaging (all other folders).</li>
        </ul>
        <h2>Oracle Packaging Folders</h2>
        <p>Use the specified folder for listed Oracle database operations.</p>
        <p>Note that using <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone (see Notes) allows stored-logic SQL scripts to be modified and repackaged.</p>
        <table style="width: 66.8737%;">
            <colgroup>
                <col style="width: 25.4153%;" />
                <col style="width: 23.6669%;" />
                <col style="width: 18.792%;" />
                <col style="width: 9.30552%;" />
                <col style="width: 22.9221%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>Object Type</th>
                    <th>Packaging Folders (fixed folders)</th>
                    <th>Package Methods (flexible folders)</th>
                    <th>Archived?</th>
                    <th>Notes</th>
                </tr>
                <tr>
                    <td>CREATE/ALTER/DROP <strong>DATABASE LINK</strong></td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>FUNCTION</strong>
                    </td>
                    <td><code>function</code>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each function must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>INDEX</strong>
                    </td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>QUEUE</strong>
                    </td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>SEQUENCE</strong>
                    </td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td>CREATE/ALTER/DROP <strong>PUBLIC SYNONYM</strong></td>
                    <td><code><code>sql_direct</code></code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>Alternatively, use Datical Auto-Synonyms.</td>
                </tr>
                <tr>
                    <td>CREATE/ALTER/DROP <strong>PRIVATE SYNONYM</strong></td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <p>For <code>ALTER</code> and <code>CREATE OR REPLACE</code> synonym use <code>ddl_direct</code> or <code>sql_direct</code>/<code>direct</code>. (Do not use <code>ddl</code>/<code>convert</code> with <code>ALTER</code> and <code>CREATE OR REPLACE</code> synonym.)</p>
                        <p>Alternatively, use Datical Auto-Synonyms.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><span>CREATE/<span>ALTER/</span>DROP</span><strong>TABLE</strong>
                        </p>
                    </td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>GLOBAL TEMPORARY TABLE</strong>
                    </td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>MATERIALIZED VIEW</strong>
                    </td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>PACKAGE</strong>
                    </td>
                    <td><code>package</code>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each package must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>PACKAGE BODY</strong>
                    </td>
                    <td><code>packagebody</code>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each package body must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>PROCEDURE</strong>
                    </td>
                    <td><code>procedure</code>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each procedure must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>TRIGGER</strong>
                    </td>
                    <td>
                        <p><code>trigger</code>
                        </p>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each trigger must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>TYPE</strong>
                    </td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>Each type must be in its own file and end with a '<code>/</code>'.</td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>VIEW</strong>
                    </td>
                    <td>
                        <p><code>view</code>
                        </p>
                    </td>
                    <td>storedlogic</td>
                    <td>No</td>
                    <td>
                        <p>Use <code>CREATE OR REPLACE</code> rather than <code>CREATE</code> alone.</p>
                        <p>Each view must be in its own file and end with a '<code>/</code>'.</p>
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>VIEW INDEX</strong>
                    </td>
                    <td><code>ddl</code>, <code>ddl_direct</code>, <code>sql_direct</code></td>
                    <td>convert, ddl_direct, direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>CURSOR</strong>
                    </td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td><span>CREATE/<span>ALTER/</span>DROP</span><strong>DIRECTORY</strong>
                    </td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td>RENAME<strong> &lt;DB_OBJECT&gt;</strong></td>
                    <td><code>sql_direct</code>
                    </td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 64.3892%;">
            <colgroup>
                <col style="width: 32.4034%;" />
                <col style="width: 14.9142%;" />
                <col style="width: 17.4893%;" />
                <col style="width: 9.65665%;" />
                <col style="width: 25.5365%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>Operation</th>
                    <th>Packaging Folder (fixed folders)</th>
                    <th>Package Methods (flexible folders)</th>
                    <th>Archived?</th>
                    <th>Notes</th>
                </tr>
                <tr>
                    <td>INSERT, UPDATE, DELETE<span>, SELECT</span></td>
                    <td>data_dml</td>
                    <td>data_dml</td>
                    <td>Yes</td>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td>GRANT, REVOKE</td>
                    <td>sql_direct</td>
                    <td>direct</td>
                    <td>Yes</td>
                    <td>Alternatively, use Datical Auto-Permissions.</td>
                </tr>
            </tbody>
        </table>
        <h2>Error Handling</h2>
        <p>Do not put error-handling statements in the SQL scripts.</p>
        <p>For Oracle databases, do not include <code>WHENEVER SQLERROR</code> statements with an object definition.</p>
        <p>Datical DB has its own error-handling that wraps SQL scripts. Specifying error-handling within the statements is not necessary.</p>
        <p>Deployment Packager fails with an error if it encounters statements before an object definition for scripts in a stored logic folders or where packageMethod is defined as <code>packageMethod=STOREDLOGIC</code>.</p>
        <h3>Oracle and PL/SQL</h3>
        <ul>
            <li>We recommend that you do not put error handling statements in your scripts, because <MadCap:variable name="General.DaticalDB" /> has its own error-handling that wraps SQL scripts. However, If you include error-handling code, use the<code>raise_application_error()</code>method as part of your catch routine. Datical relies on <code>raise_application_error()</code> to determine the status of a change (success, failure).</li>
            <li>Datical creates and uses a <code>DATICAL_SPERRORLOG</code> table in the Datical tracking schema. It is re-created as needed when a sqlplus change is deployed.</li>
        </ul>
        <p>See also these pages for overview of packaging workflows, which packaging methods or folders to use for which types of changes, and SQL Parser for Oracle:</p>
        <ul>
            <li>
                <MadCap:xref href="../developer/overview-packaging-developer.htm">Overview of Packaging</MadCap:xref>
            </li>
            <li><a href="../developer/write-sql-scripts/write-sql-scripts.htm">Writing SQL Scripts for Datical DB</a>
            </li>
            <li><a href="../dba/package-sql-scripts-for-deployment/place-files-scm-repo/fixed-folder-names.htm">Fixed Folder Names</a>
            </li>
            <li><a href="../dba/package-sql-scripts-for-deployment/place-files-scm-repo/flexible-folder-names.htm">Flexible Folder Names</a>
            </li>
            <li><a href="../dba/package-sql-scripts-for-deployment/configure-packaging/sql-parser.htm">Using SQL Parser</a>
            </li>
        </ul>
    </body>
</html>