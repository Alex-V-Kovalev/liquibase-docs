<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Liquibase Enterprise Documentation</title>
        <meta name="description" content="Liquibase Enterprise Documentation" />
    </head>
    <body>
        <h1>Overview of Packaging</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><h1 id="OverviewofPackaging-Introduction">Introduction</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>Packaging is the first step in the deployment workflow. Packaging is the process of getting SQL scripts refactored and deployed to the first database in the project workflow. By convention the first database is the REF database.&#160;</p><p>The refactoring performed depends on the type of change:</p><ul><li>Non-rerunnable changes - SQL scripts that meant to be run only once considered transient. Changes are refactored into XML files. The object model enables easy forecasting of the impact of the change.<ul><li><strong style="margin-left: 0.0px;">Example</strong>: most DDL files, some DML files. Creating tables, adding columns, dropping indexes, inserting records, etc..</li></ul></li><li>Rerunnable changes - SQL scripts that perform other functions are managed as SQL scripts. A native SQL interpreter runs them from within the packager to make the changes.<ul><li><strong style="margin-left: 0.0px;">Example</strong>: Creating stored-logic objects, like packages, procedures, functions, and views.&#160;</li><li><strong>Example</strong>: Native SQL scripts that must run through an interpreter provided with the database (SQL*Plus for Oracle, SQLCMD for SQL Server)</li></ul></li></ul><p>During deployment, the scripts are checked for rules compliance. If they pass, the changes are deployed to the REF database.&#160;</p><h1 id="OverviewofPackaging-PackagingTool">Packaging Tool&#160;</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>The Deployment Packager can be run from the CLI or the GUI. You provide a configuration file for the project that specifies the options to use during packaging. See&#160;<a href="required-deploy-packager-properties.htm" rel="nofollow">Using the required deployPackager.properties file</a>.&#160;</p><h1 id="OverviewofPackaging-PackagingSources">Packaging Sources</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p><span style="color: rgb(51,51,51);">You can package SQL scripts from the following sources.&#160;</span></p><ul><li><strong><strong>Source Code Management (SCM) Repository</strong></strong>: Place SQL scripts in a defined location in a source code repository.&#160;<span style="color: rgb(51,51,51);">C</span><span style="color: rgb(51,51,51);"><span style="color: rgb(51,51,51);">onfigure a properties file with information about source code management repositories where SQL scripts and the Datical DB Project reside. During processing, the Deployment Packager reads the properties file and gets the SQL scripts from the SCM.&#160;</span></span></li><li><strong>Manifest File</strong><span style="color: rgb(51,51,51);">: D<span style="color: rgb(51,51,51);">efine a manifest file to identify the SQL scripts to be processed and provide metadata about the scripts.&#160; The manifest file is passed to the Deployment Packager.</span></span></li></ul><h1 id="OverviewofPackaging-Workflow">Workflow</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>Deployment Packager uses the following workflow for changes checked into an SCM. When packaging with a manifest file, the manifest file specifies the files to package (steps 1 and 2 below).&#160;</p><ol style="margin-left: 0.0px;"><li>Prereq:<ol><li style="margin-left: 0.0px;">Get Project - Check out Datical project from the SCM (DDB SCM)</li><li style="margin-left: 0.0px;">Get Scripts - Check out SQL scripts from the SCM (SQL SCM)</li></ol></li><li style="margin-left: 0.0px;">Determine list of scripts to package from SQL SCM - This is determined by what changes have been introduced to SQL SCM since last successful packaging job (If this is the first packaging job then all scripts will be packaged)</li><li>Check Scripts for Rules Compliance - Run validation routines, which are a combination of Datical-provided rules and user-defined rules.&#160; Rules ensure that changes are valid and compliant with organizational standards and best practices.</li><li>Back Up REF Database - If the changes fail, the database is restored to its original state from this backup.&#160;</li><li>Validate - Check the files against built-in Datical rules and rules provided for the project.&#160; End process if validation fails. (Note: rules validation can be set to fail according to different criteria).&#160;</li><li>Process Files<ul><li>For scripts that use the convert method (If using Fixed Folders these are scripts packaged in /ddl folder only.&#160; If using Flexible Folders these are scripts that use packageMethod CONVERT.)<ul><li>Snapshot1 the existing schema of the REF database.</li><li>Convert transient files (like DDL) to an XML object model (changelog) (basic: take DDL, apply to DB using native tools, snapshot again, compare snapshots. The compare produces the object model.)</li><li>Snapshot2 the schema to record the changes produced by processing the files.&#160;</li><li>Save a copy of the changelog as it was updated by the changes.&#160;</li></ul></li><li>For scripts that use all other methods (If using Fixed folders these are scripts packaged in all other folders such as <span style="color: rgb(0,51,102);">/ddl_direct</span>, /data_dml, /function, /procedure, /sql_direct, /ssis, etc.&#160; If using Flexible Folders these are scripts that use packageMethod STOREDLOGIC, SSIS, SQLFILE, DIRECT, <span style="color: rgb(0,51,102);">DDL_DIRECT</span>, or DATA_DML)<ul><li>Prepare non-transient files to be run. (changeset includes a deployPackagerNative callâ€“some analysis of SQL and sanitization)</li></ul></li><li>IF there were any CONVERT/DDL scripts, restore the REF database from backup in preparation for Forecast.</li></ul></li><li>Forecast Changes - Simulate applying the changes. [ Apply changes represented in the object model (changelog) to an in-memory copy of Snapshot1 ].&#160; &#160;Produce a forecast report.&#160;<ul><li style="margin-left: 0.0px;">Proceed if forecasting succeeds.&#160;</li><li>End process and restore the REF database from backup if an error is encountered during the forecast.</li></ul></li><li>Deploy Changes to the REF Database.</li><li>(optional) If there are rollbacks, run the rollbacks for the scripts that were packaged, if validateRollback is enabled.<ul><li>Redeploy Changes to the REF Database.</li></ul></li><li>Move non-rerunnable SQL Files to the archive.</li><li>Commit Changes to SCM repos.</li><li>Update the packagerReport.html to show details of the Deployment Packager results.</li></ol><p>The following diagrams illustrate the workflow.&#160; Click on an image to enlarge it:</p><p><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="262" width="672" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1569858662885&amp;cacheVersion=1&amp;api=v2&amp;width=672&amp;height=261" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1569858662885&amp;cacheVersion=1&amp;api=v2&amp;width=900&amp;height=350 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/worddava89d1ee2375e8bb49b18ff53fd2bbbd8.png?version=1&amp;modificationDate=1569858662885&amp;cacheVersion=1&amp;api=v2&amp;width=672&amp;height=261 1x" /></span></p><p><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="400" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/PackagerProcess.jpg?version=1&amp;modificationDate=1642116682603&amp;cacheVersion=1&amp;api=v2&amp;width=711&amp;height=400" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/PackagerProcess.jpg?version=1&amp;modificationDate=1642116682603&amp;cacheVersion=1&amp;api=v2&amp;width=1301&amp;height=731 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569925/PackagerProcess.jpg?version=1&amp;modificationDate=1642116682603&amp;cacheVersion=1&amp;api=v2&amp;width=711&amp;height=400 1x" /></span></p><h1 id="OverviewofPackaging-CONVERT/ddlfolderversusDIRECT/sql_directfolder">CONVERT/ddl folder versus <span style="color: rgb(51,51,51);">DIRECT/sql_direct</span> folder</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><div><p>If you use version 7.15 and later, use the DDL_DIRECT package method/<span class="code">ddl_direct folder instead of&#160;DIRECT package method/sql_direct folder</span>.</p><p>The <span class="code">ddl_direct</span> package method allows you to have more control over the processing order of scripts using the <span class="code">DIRECT</span> package method so that scripts with DDL statements run before scripts with data changes that rely on those DDL changes.</p><p>You can use ddl_direct as follows:</p><ul class="ak-ul"><li><p><span class="code">A ddl_direct</span> fixed folder name</p></li><li><p>A <span class="code">ddl_direct</span> package method set for any other folder. You can set it using the metadata.properties file in any flexible folder where you want to use it: <span class="code">packageMethod=ddl_direct</span></p></li></ul><p>An example of the new processing order for <a class="external-link" href="http://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896569969" rel="nofollow">fixed folders</a>: <span class="code">ddl</span>, <span class="code">ddl_direct</span>, <span class="code">view</span>, <span class="code">function</span>, <span class="code">procedure</span>, <span class="code">package</span>, <span class="code">packageBody</span>, <span class="code">trigger</span>, <span class="code">sql</span>, <span class="code">sql_direct</span>, <span class="code">data_dml</span>.</p><p>An example of the new processing order when using <a class="external-link" href="http://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896569975" rel="nofollow">flexible folders</a> (where packageMethod is defined in <a class="external-link" href="http://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896570155" rel="nofollow">metadata.properties</a>): <span class="code">convert</span>, <span class="code">ddl_direct</span>, <span class="code">storedlogic</span>, <span class="code">sqlfile</span>, <span class="code">direct</span>, <span class="code">data_dml</span>.</p><p>If you use version 7.14 or earlier, refer to the following instructions.</p><p>The CONVERT packaging method (which is used by default in the ddl folder) does not run the actual sql script during the final deploy.&#160; The CONVERT packaging method (ddl folder) will deploy the change set that was created by comparing the "before" snapshot to the "after" snapshot where the change set is based on the difference between the two.&#160; The CONVERT method (ddl folder) may not preserve the order of statements and it may not include statements that do not result in a change set during the diff process. The CONVERT packaging method is typically slower than other packaging methods.</p><p>If the order of the statements in the script is critical or if the script contains statements that would not be represented in a change set generated by diffing the before and after states of the database, you could instead package those scripts with the DIRECT&#160;method (which is used by default in the <span style="color: rgb(51,51,51);">sql_direct</span> folder). Scripts packaged with the DIRECT&#160;method in the&#160;<span style="color: rgb(51,51,51);">sql_direct </span>folder&#160;(or other folders that you have set to use the DIRECT&#160;packaging method) will run the actual script, thereby preserving the statements and the order of the statements.</p><p>Note that the possible drawback with using the DIRECT&#160;method/<span style="color: rgb(51,51,51);">sql_direct</span> folder with some configurations is losing some of the simulation/forecasting/modeling/profiling abilities that may happen with the CONVERT method/ddl folder. For Oracle you could use Datical's optional <a href="../../package-sql-scripts-for-deployment/configure-packaging/sql-parser.htm" rel="nofollow">SQL Parser</a> feature to add forecasting to the DIRECT&#160;method<span style="color: rgb(51,51,51);">/sql_direct</span> folder&#160;(or other folders that you have set to use the DIRECT&#160;packaging method).</p><p>Here are pages with additional information about packaging methods, packaging folders, packager performance, and which methods/folders to use for different types of changes:</p><p><a href="files-scm-repository.htm">Placing Files in the SCM Repository</a></p><p style="margin-left: 30.0px;"><a href="../../package-sql-scripts-for-deployment/place-files-scm-repo/fixed-folder-names.htm">Fixed Folder Names</a></p><p style="margin-left: 30.0px;"><a href="../../package-sql-scripts-for-deployment/place-files-scm-repo/flexible-folder-names.htm">Flexible Folder Names</a></p><p><a href="../../developer-get-started-guide/write-sql-scripts/write-sql-scripts.htm">Writing SQL Scripts for Datical DB</a></p><p style="margin-left: 30.0px;"><a href="sql-objects-packaging.htm">SQL Server Database Objects and Packaging</a></p><p style="margin-left: 30.0px;"><a href="../../package-sql-scripts-for-deployment/place-files-scm-repo/oracle-packaging.htm">Oracle Database Objects and Packaging</a></p><p><a href="../../package-sql-scripts-for-deployment/configure-packaging/sql-parser.htm">Using SQL Parser</a></p><p><a href="../../troubleshoot/difference-between-ddl-sql-folders.htm">What is the difference between "ddl" and "sql_direct" folders?</a></p><p><a href="../app-dev-how-to-guides/choose-btw-CONVERT-ddl-packaging.htm">How To: Choose Between CONVERT (ddl) and DDL_DIRECT (ddl_direct) Packaging Methods</a></p><p><a href="improve-packager-performance.htm">How To: Improve Packager Performance</a></p></body>
</html>