<?xml version="1.0" encoding="utf-8"?>
<html>
    <head><title></title>
    </head>
    <body>
        <h1>Using the metadata-variables.properties file</h1>
        <p />
        <div class="toc-macro client-side-toc-macro  conf-macro output-block">
        </div>
        <h1 id="Usingthemetadata-variables.propertiesfile-PlacementandPrecedence">Placement and Precedence</h1>
        <p><span style="color: rgb(9,30,66);">The</span><code>metadata-variables.properties</code><span style="color: rgb(9,30,66);">file applies to all files and subdirectories in the directory where it is found, including the root directory for SQL scripts.&#160; &#160;Additional</span><code>metadata-variables.properties</code><span style="color: rgb(9,30,66);">files can be used in the subdirectories. A property set in a subdirectory overrides the same property set in a parent directory.&#160;</span>
        </p>
        <p><span style="color: rgb(9,30,66);">Place variables in the&#160;<code>metadata-variables.properties</code><span style="color: rgb(9,30,66);">file, one per line. The notation for a variable depends on whether the script you are packaging is a DDL script or a native script, as described in <strong>Using Variables</strong>.&#160;</span></span>
        </p>
        <h2 id="Usingthemetadata-variables.propertiesfile-VariableProcessing"><span style="color: rgb(9,30,66);"><span style="color: rgb(9,30,66);">Variable Processing</span></span>
        </h2>
        <p><span style="color: rgb(9,30,66);"><span style="color: rgb(9,30,66);">Variables are interpreted as positional variables. The first value in the&#160;<code>metadata-variables.properties</code>&#160;file replaces the first occurrence of a variable in the script, and so on.&#160;<br /></span></span>
        </p>
        <div class="confluence-information-macro confluence-information-macro-information conf-macro output-block">
            <p class="title">Important</p>
            <div class="confluence-information-macro-body">
                <p>No space trimming or interpretation is performed during processing. The <code>metadata-variables.properties</code> file is taken as-is.</p>
            </div>
        </div>
        <h2 id="Usingthemetadata-variables.propertiesfile-Example"><span style="color: rgb(9,30,66);">Example</span>
        </h2>
        <p><span style="color: rgb(9,30,66);">Variables and changelog properties may be used together to express variable values per context (database target). For example, you may want to express a different TABLESPACE value depending on the context (database) where you are deploying changes.&#160;</span>
        </p>
        <p><span style="color: rgb(9,30,66);">Changelog properties are interpreted before processing for variables. See&#160;<a href="../../../documentation/package-sql-scripts-for-deployment/configure-packaging/Setting_Properties_in_the_Project_Changelog.htm">Setting Properties in the Project Changelog</a>.&#160;</span>
        </p>
        <p><span style="color: rgb(9,30,66);">The following example is based on scripts intended for Oracle SQL*Plus. Variables use the form <code>&amp;var</code>.</span>
        </p>
        <ul>
            <li>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);">Properties in changelog<br /></span>
                </p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="REF" name="CLPROP_TBL" value="TBLVAR"&gt;&lt;property context="REF" name="CLPROP_TBLSPC" value="TBLSPC"&gt;</pre>
                    </div>
                </div>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);"><br /></span>
                </p>
            </li>
            <li>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);"><code>metadata-variables.properties</code> variables (standard SQL script in DDL folder)<br /></span>
                </p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&amp;1=${CLPROP_TBL}
&amp;2=${CLPROP_TBLSPC}</pre>
                    </div>
                </div>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);"><br /></span>
                </p>
            </li>
            <li>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);">Script<br /></span>
                </p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE MYTABLE_&amp;1
(c1 varchar2(20))
TABLESPACE "&amp;2"; </pre>
                    </div>
                </div>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);"><br /></span>
                </p>
            </li>
            <li>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);">Processed Script with changelog properties and variables interpreted<br /></span>
                </p>
                <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
                    <div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE MYTABLE_TBLVAR
(c1 varchar2(20))
TABLESPACE "TBLSPC"; </pre>
                    </div>
                </div>
                <p class="auto-cursor-target"><span style="color: rgb(9,30,66);"><br /></span>
                </p>
            </li>
        </ul>
        <h1 id="Usingthemetadata-variables.propertiesfile-UsingVariables">Using Variables</h1>
        <p>SQL scripts may use variables to represent values that vary per environment. For example, tablespace names may differ between DEV, TEST &amp; PROD environments. To use a single script to update all of these environments, the tablespace is represented by a variable in the script. When the script is executed the user may either pass the values for the variables on the command line or be prompted for their values as scripts execute.</p>
        <p>When used on the command line, variable values may be passed in as positional parameters. Positional means that values are substituted in the order they are passed in.</p>
        <h2 id="Usingthemetadata-variables.propertiesfile-VariablesinDDLScripts">Variables in DDL Scripts</h2>
        <p>Variable representation in scripts is done as SQL-style variables (SET&#160;<code>@varnam = "value"</code>). DDL scripts are one of the following:&#160;</p>
        <ul>
            <li>Scripts in the&#160;<code>ddl</code>&#160;fixed folder.</li>
            <li>Scripts in a flexible folder with packageMethod=CONVERT.&#160;</li>
        </ul>
        <p>
            <br />
        </p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">@1="myvalue"@2=true
@3=${MYPROPERTY}      # value is substituted with the value of changelog property MYPROPERTY</pre>
            </div>
        </div>
        <h2 class="auto-cursor-target" id="Usingthemetadata-variables.propertiesfile-VariablesinNativeSQLScripts">Variables in Native SQL Scripts</h2>
        <p>Variable representation in scripts depends on the client-command syntax for the database. Native scripts are one of the following:&#160;</p>
        <ul>
            <li>Scripts in the <code>sql_direct</code>&#160;or <span style="color: rgb(51,51,51);"><code>ddl_direct</code>&#160;</span>fixed folder<span style="color: rgb(51,51,51);">s</span>.</li>
            <li>Scripts in a flexible folder with packageMethod=DIRECT or packageMethod=DDL_DIRECT.&#160;</li>
        </ul>
        <h3 id="Usingthemetadata-variables.propertiesfile-Oracle">Oracle</h3>
        <p>SQL*PLUS is the native command facility for Oracle databases. Variables are represented as follows:</p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">&amp;1="myvalue"&amp;2=true
&amp;3=${MYPROPERTY}</pre>
            </div>
        </div>
        <h3 id="Usingthemetadata-variables.propertiesfile-PostgreSQL">PostgreSQL</h3>
        <p>PSQL is the native command facility for PostgreSQL databases. Variables are represented as follows:</p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">replaceMap=:myvariable1="myvalue"replaceMap=:myvar2=true
replaceMap=:myvar3=${MYPROPERTY}</pre>
            </div>
        </div>
        <h3 id="Usingthemetadata-variables.propertiesfile-SQLServer">SQL Server</h3>
        <p>SQLCMD is the native command facility for SQL Server databases. Variables are represented as follows:</p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">$(myvariable1)="myvalue"${myvar2)=true
$(myvar3)=${MYPROPERTY}</pre>
            </div>
        </div><pre class="code-java" xml:space="preserve">
            <br />
        </pre>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
        <p>
            <br />
        </p>
    </body>
</html>