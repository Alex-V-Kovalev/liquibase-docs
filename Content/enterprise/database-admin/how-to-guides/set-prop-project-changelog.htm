<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Setting Properties in the Project Changelog</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p /><div class="toc-macro client-side-toc-macro  conf-macro output-block"></div><h1 id="SettingPropertiesintheProjectChangelog-UsingProperties">Using Properties</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>Property values are defined in the changelog.xml file. Once defined, properties can be added to scripts, to metadata.properties files, and to the <code>datical.project</code> file to provide variability across environments.</p><ol><li>Create property statements in the changelog. Use context= and label= to set up the conditions where you intend the different values to be used.&#160;</li><li>Write a SQL script that uses a variable to reference the property.&#160;</li><li>Package the changeset.<ul><li>As the first step in packaging the variable is resolved to a literal value based on the property and changeset using matching context or labels attributes.&#160;</li></ul></li><li>Deploy the changeset. During forecast and deploy you can specify values for context and labels attributes. The changesets with matching contexts or labels are used.&#160;</li></ol><p>When you use the <code>diffChangelog</code> command, databases are compared as deployed, with the interpreted property values. To compare changelogs with the property expressions as written (uninterpreted), use <strong>Reverse Substitution During diffChangelog</strong> option.&#160;</p><h2 id="SettingPropertiesintheProjectChangelog-SettingPropertiesintheDaticalDBGUI">Setting Properties in the Datical DB GUI</h2><p>In the Datical DB GUI, do the following:</p><ol><li>Open a project</li><li>Click the <strong>Settings</strong> tab</li><li>Open the <strong>Change Log Property Substitution</strong> section.<br /><br /><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="250" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/project_settings_changelog_properties_open.jpg?version=1&amp;modificationDate=1569858660752&amp;cacheVersion=1&amp;api=v2&amp;width=275&amp;height=250" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/project_settings_changelog_properties_open.jpg?version=1&amp;modificationDate=1569858660752&amp;cacheVersion=1&amp;api=v2&amp;width=354&amp;height=321 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/project_settings_changelog_properties_open.jpg?version=1&amp;modificationDate=1569858660752&amp;cacheVersion=1&amp;api=v2&amp;width=275&amp;height=250 1x" /></span><br /><br /></li><li>Click <strong>Manage Properties</strong>.&#160;<br /><br /><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="250" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Manage_properties.jpg?version=1&amp;modificationDate=1569858661700&amp;cacheVersion=1&amp;api=v2&amp;width=582&amp;height=250" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Manage_properties.jpg?version=1&amp;modificationDate=1569858661700&amp;cacheVersion=1&amp;api=v2&amp;width=976&amp;height=419 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Manage_properties.jpg?version=1&amp;modificationDate=1569858661700&amp;cacheVersion=1&amp;api=v2&amp;width=582&amp;height=250 1x" /></span><br /><br /></li><li><p class="auto-cursor-target">Add or edit property keys and values, along with the contexts and labels to use to determine when to apply the property substitution.&#160;<br /><br /><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="250" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Add_property_blank.jpg?version=1&amp;modificationDate=1569858661121&amp;cacheVersion=1&amp;api=v2&amp;width=460&amp;height=250" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Add_property_blank.jpg?version=1&amp;modificationDate=1569858661121&amp;cacheVersion=1&amp;api=v2&amp;width=725&amp;height=394 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Add_property_blank.jpg?version=1&amp;modificationDate=1569858661121&amp;cacheVersion=1&amp;api=v2&amp;width=460&amp;height=250 1x" /></span><br /><br /></p><div class="confluence-information-macro confluence-information-macro-information conf-macro output-block"><p class="title">Note</p><div class="confluence-information-macro-body"><p><span style="color: rgb(51,51,51);">Property statements that use the same name and value must also have a context or label set to differentiate them. That difference expresses the conditions where each value is used.&#160;</span></p><p><span style="color: rgb(51,51,51);">You cannot create more than one property setting for the same condition (contexts and labels settings).&#160;</span></p></div></div></li><li>If you provided values for <strong>Substitution Mode</strong> and <strong>Target</strong>, you must also select <strong>Reverse Substitute During diffChangelog</strong> for the project. See the section "Reverse Substitute During diffChangelog Option".&#160;</li><li>Click <strong>Save</strong>.</li></ol><p>Note that&#160;<span style="color: rgb(23,43,77);">you can also edit the changelog.xml using a text editor if that is more convenient that using the GUI.</span></p><h1 id="SettingPropertiesintheProjectChangelog-PropertySyntax">Property Syntax</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><ol><li>Create property statements in the changelog. Use context= and label= to set up the conditions where you intend the different values to be used.&#160;</li><li>Write a SQL script that uses a variable to reference the property.&#160;</li><li>Package the changeset. During packaging the variable is resolved to a literal value based on the property and changeset using matching context or labels attributes.&#160;</li><li>Deploy the changeset. During forecast and deploy you can specify values for context and labels attributes. The changesets with matching contexts or labels are used.&#160;</li></ol><h2 id="SettingPropertiesintheProjectChangelog-AppearanceintheChangelog">Appearance in the Changelog</h2><p class="auto-cursor-target">Use GUI to create properties (or&#160;<span style="color: rgb(23,43,77);">edit the changelog.xml using a text editor if that is more convenient)</span>. Differentiate properties with the same name by setting different values and contexts. Use the <code>context</code> to specify the environments where the values are applied.&#160;</p><p class="auto-cursor-target">In the following code example, the <code>context</code> property is used to set <code>SCHEMA_NAME</code> to different values (<code>schema_alpha</code> for the <code>REF</code> context, <code>schema_beta</code> for the <code>DEV</code> context).&#160;</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Property Definitions in the Changelog</b></div><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;!-- properties for different schema --&gt;&lt;property context="REF" name="SCHEMA_NAME" value="schema_alpha"/&gt;&lt;property context="DEV" name="SCHEMA_NAME" value="schema_beta"/&gt;</pre></div></div><h2 id="SettingPropertiesintheProjectChangelog-SyntaxinSQLScripts">Syntax in SQL Scripts</h2><p>Use the following form where you want to substitute the value of a property in the script:</p><div class="preformatted panel conf-macro output-block" style="border-width: 1px;"><div class="preformattedContent panelContent"><pre xml:space="preserve">${property-name}</pre></div></div><h3 id="SettingPropertiesintheProjectChangelog-UsewithOracleDatabases">Use with Oracle Databases</h3><p>It is common to host multiple environments on a single Oracle instance. Properties can be used for several purposes. Some examples are:</p><ul><li>Schemas - point to the desired copy of a schema. Multiple copies might exist on the same instance.&#160;</li><li>Storage options - such as TABLESPACE</li><li>Sequences - different settings for startsWith and incrementBy, depending on environment</li></ul><h2 id="SettingPropertiesintheProjectChangelog-ExampleScenario">Example Scenario</h2><p>Normally a workflow through REF &gt; DEV &gt; TEST &gt; PROD uses the same schema name at each step. However, if in DEV the schema is named SCHEMA1&#160; and in QA it is named SCHEMA2, you could set up property statements to give SCHEMA_NAME a different value depending on the context where a changeset is deployed.&#160;</p><ol><li><p class="auto-cursor-target">Create two property statements in the changelog. Use the same name but different values (value=) and deployment conditions (in this case, context=).<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Property Definitions in the Changelog</b></div><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;!-- properties for different schema --&gt;&lt;property context="DEV" name="SCHEMA_NAME" value="SCHEMA1"/&gt;&lt;property context="QA" name="SCHEMA_NAME" value="SCHEMA2"/&gt;</pre></div></div></li><li><p class="auto-cursor-target">Write the SQL to use the property name rather than a literal schema name.&#160;<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>SQL Script Using a Property</b></div><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE "${SCHEMA_NAME}"."MYTABLE"   (MYCOLUMN VARCHAR(100)
   );</pre></div></div></li><li>Package and Deploy. The value used for ${SCHEMA_NAME} is driven by the difference in the context= attribute in the property statements.&#160;<ul><li>In the DEV database, the table is named SCHEMA1.MYTABLE</li><li>In the QA database, the table is named SCHEMA2.MYTABLE</li></ul></li></ol><h2 id="SettingPropertiesintheProjectChangelog-UsingPropertiesforSchemaNames">Using Properties for Schema Names</h2><p>You can use properties for the schemaName attribute in the following places:</p><ul><li><code>datical.project</code> file</li><li><code>metadata.properties</code> file</li></ul><p>You may use properties in the managed-schema names.&#160; Here is an example:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Schema specification in datical.project</b></div><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">SCHEMA1${ENV}
SCHEMA2${ENV}</pre></div></div><p>To use this capability, the <code>ENV</code> property in the previous example needs to have values supplied for it. Errors are returned during packaging if a schema name does not match a schema in the database.&#160;</p><p>Set the <code>ENV</code> property in the changelog. In this case, the <code>context</code> property determines the value to use for <code>ENV</code>.&#160;</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="DEV" name="ENV" value="_DEV"/&gt;&lt;property context="QA" name="ENV" value="_QA"/&gt;</pre></div></div><p>The following database schema must exist in the corresponding managed databases:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">DEV Database:
SCHEMA1_DEV
SCHEMA2_DEV

QA Database:
SCHEMA1_QA
SCHEMA2_QA</pre></div></div><h1 id="SettingPropertiesintheProjectChangelog-HowandWhenPropertiesareInterpreted">How and When Properties are Interpreted</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>Properties are evaluated and values substituted during the following operations:</p><ul><li>Packaging (deploy to REF database). SQL scripts are scanned for property expressions in SQL scripts and substituted.&#160;</li><li>Deploy</li></ul><h2 id="SettingPropertiesintheProjectChangelog-PropertySubstitutionDuringPackaging">Property Substitution During Packaging</h2><p>SQL scripts are scanned for properties. If there is a match with a property defined in the changelog, a value is substituted before packaging.&#160;</p><div class="table-wrap"><table class="wrapped confluenceTable"><colgroup><col /><col /></colgroup><tbody><tr><th class="confluenceTh">Action</th><th class="confluenceTh">Code</th></tr><tr><td class="confluenceTd"><p>Set a property in the changelog to be used during packaging.&#160;</p><p>Note that setting the context to the REF database affects how it behaves during packaging.&#160;</p></td><td class="confluenceTd"><div class="content-wrapper"><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="REF_DB" labels="" name="tbl_prefix" value="REF_DB"/&gt;

</pre></div></div></div></td></tr><tr><td class="confluenceTd"><p>Check in SQL script that uses the property.</p><p>The property is substituted before packaging.</p></td><td class="confluenceTd"><div class="content-wrapper"><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE ${tbl_prefix}_newtable(
id INTEGER);</pre></div></div></div></td></tr><tr><td class="confluenceTd">SQL script that is packaged</td><td class="confluenceTd"><div class="content-wrapper"><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE REF_DB_newtable(
id INTEGER);</pre></div></div></div></td></tr></tbody></table></div><h2 id="SettingPropertiesintheProjectChangelog-DisablingPropertySubstitutionDuringPackagingUsingmetadata.properties">Disabling Property Substitution During Packaging Using metadata.properties</h2><p>To turn off changelog property interpretation <em>for packaging only</em>, set <code>disablePropertySubstitution</code> to false in a <code>metadata.properties</code> file. Property expressions in SQL scripts are passed through during packaging, rather than interpreted.&#160;</p><p>This capability can be used for debugging packaging issues or incremental testing.&#160;</p><p>Note that <code>disablePropertySubstitution</code> has no effect on the substitutions made during a deploy operation.&#160;</p><p>See&#160;<a href="metadata-properties-file.htm">Using the metadata.properties file</a>.&#160;</p><h2 id="SettingPropertiesintheProjectChangelog-PropertySubstitutionDuringForecastandDeploy">Property Substitution During Forecast and Deploy</h2><p>When you set a property to be interpreted for a context, then the property is interpreted when changes are forecast for the context or deployed to the context.&#160;</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="DEV" name="ENV" value="_DEV"/&gt;&lt;property context="QA" name="ENV" value="_QA"/&gt;</pre></div></div><p><br /></p><h1 id="SettingPropertiesintheProjectChangelog-ReverseSubstitutionDuringdiffChangelogOption">Reverse Substitution During diffChangelog Option</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><p>This option works only for SQL scripts in the <strong>ddl</strong> folder.&#160;</p><p>If the&#160;<span style="color: rgb(0,0,0);"><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled, then during packaging (specifically during a diffChangelog operation), the original property variable is reverse-substituted into the changelog in place of the value that was placed in the changelog before.&#160;</span></p><p><span style="color: rgb(0,0,0);">This feature has the following benefits:</span></p><ul><li><span style="color: rgb(0,0,0);">Property substitution in contexts later than REF. Example: you use a different TABLESPACE size for SQL CREATE TABLE per context. Specifically, it needs to be one size in DEV and one size in QA.&#160; You need to have the variable you use for the tablespace size put back into the changelog so that it can be evaluated during deployment to those contexts.&#160;</span></li><li><span style="color: rgb(0,0,0);">A portable changelog. The changelog can be copied to another project and re-used.&#160;</span></li></ul><p><br /></p><div class="confluence-information-macro confluence-information-macro-information conf-macro output-block"><p class="title">Note</p><div class="confluence-information-macro-body"><p><em><span style="color: rgb(0,0,0);">Please discuss this option with your Datical Support representative to ensure its proper usage.</span></em></p></div></div><h2 id="SettingPropertiesintheProjectChangelog-TargetingSelectedPropertieswiththesubstitutionModeAttribute">Targeting Selected Properties with the <code>substitutionMode</code> Attribute</h2><p>When the option is set, by default all instances of properties are reverse-substituted.</p><p>Use the <code>substitutionMode</code> attribute in the property declaration to control whether it is reverse substituted.&#160;</p><p>Values are:</p><ul><li><code>always </code>- always reverse-substitute. A value for the <code>target</code> attribute is also required.&#160;</li><li><code>never</code> - do not reverse-substitute</li><li><code>onMatch</code> - reverse substitute this property where it occurs. If <code>target</code> is not specified, the property is substituted wherever the value occurs. <strong>Note</strong> that this may result in unintended substitution if the value is not unique to the property and appears elsewhere in the changesets.&#160;</li></ul><h3 id="SettingPropertiesintheProjectChangelog-ExampleforsubstitutionMode=onMatch">Example for substitutionMode=onMatch</h3><ol><li><p class="auto-cursor-target">The following property is set in the changelog.&#160;Note that substitution mode set to <code>onMatch</code>.&#160;<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property key="SUFFIX" value="REF" context="REFDB" appdba:substitutionMode="onMatch"/&gt;</pre></div></div></li><li><span style="color: rgb(0,0,0);"><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.&#160;</span></li><li><p class="auto-cursor-target">A script in the ddl folder contains the following code for creating a table:<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE PROP_SUB_${SUFFIX}</pre></div></div></li><li><p class="auto-cursor-target">When the script is packaged, the property is evaluated during packaging to <code>PROP_SUB_REF</code>.</p></li><li><p class="auto-cursor-target">During reverse substitution, the property expression <code>${SUFFIX}</code> is re-substituted for <code>REF</code> for the name of the createTable changeset that is placed in the changelog.&#160;The changeset name is the following string:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">PROP_SUB_${SUFFIX}</pre></div></div></li></ol><h3 id="SettingPropertiesintheProjectChangelog-ExampleforsubstitutionMode=always">Example for substitutionMode=always</h3><ol><li><p class="auto-cursor-target">The property <code>seq.incrementBy</code> is set in the changelog.&#160;Note that substitution mode set to <code>always </code>and <code>target</code> is specified.&#160;<br />Using the GUI:</p><p class="auto-cursor-target"><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" height="250" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Edit_property_filled.jpg?version=1&amp;modificationDate=1569858660928&amp;cacheVersion=1&amp;api=v2&amp;width=441&amp;height=250" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Edit_property_filled.jpg?version=1&amp;modificationDate=1569858660928&amp;cacheVersion=1&amp;api=v2&amp;width=563&amp;height=319 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896569871/Edit_property_filled.jpg?version=1&amp;modificationDate=1569858660928&amp;cacheVersion=1&amp;api=v2&amp;width=441&amp;height=250 1x" /></span><br /><br />Property appearance in the changelog:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property name="seq.incrementBy" value="2" context="REF" appdba:substitutionMode="always" appdaba:target=\createSequence\@incrementBy/&gt;</pre></div></div></li><li><span style="color: rgb(0,0,0);"><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.&#160;</span></li><li><p class="auto-cursor-target">A script in the ddl folder contains the following code for creating a sequence. It uses the property <code>${seq.incrementBy</code>} rather than a literal value, because you want to use a different value for different Datical contexts.&#160;&#160;<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE SEQUENCE century_years
  MINVALUE 1
  MAXVALUE 100
  START WITH 1
  INCREMENT BY ${seq.incrementBy}
  CACHE 20;</pre></div></div></li><li><p class="auto-cursor-target">When the script is packaged, the property is evaluated during packaging to <code>seq.incrementBy</code>, which is set in the property to 2. The resulting changeset&#160;<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">    &lt;changeSet author="datical" context="REF" created="Thu Sep 20 09:09:34 CDT 2018" id="create_seq_REF" objectQuotingStrategy="QUOTE_ALL_OBJECTS"&gt;        &lt;createSequence cacheSize="20" incrementBy="2" maxValue="100" minValue="1" sequenceName="century_years" startValue="1"/&gt;    &lt;/changeSet&gt;</pre></div></div></li><li><p class="auto-cursor-target">During reverse substitution, the property expression <code>${seq.incrementBy}</code> is re-substituted for <code>REF</code> for the value "2"&#160; that was placed in the changeset.&#160;The changeset includes the following string:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">incrementBy=${seq.incrementBy}</pre></div></div></li></ol><h3 class="auto-cursor-target" id="SettingPropertiesintheProjectChangelog-ExampleforsubstitutionMode=never"><span>Example for substitutionMode=never</span></h3><ol><li><p class="auto-cursor-target">The following property is set in the changelog.&#160;Note that substitution mode set to <code>never</code>.&#160;<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property key="SUFFIX" value="REF" context="REFDB" appdba:substitutionMode="never"/&gt;</pre></div></div></li><li><span style="color: rgb(0,0,0);"><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.&#160;</span></li><li><p class="auto-cursor-target">A script in the ddl folder contains the following code for creating a table:<br /><br /></p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE PROP_SUB_${SUFFIX}</pre></div></div></li><li><p class="auto-cursor-target">When the script is packaged, the property is evaluated during packaging to <code>PROP_SUB_REF</code>.&#160;</p></li><li><p class="auto-cursor-target">During reverse substitution, the property expression <strong>is not re-substituted</strong> into the name in the createTable changeset that is placed in the changelog. The changeset name is the following string:</p><div class="code panel pdl conf-macro output-block" style="border-width: 1px;"><div class="codeContent panelContent pdl"><pre class="syntaxhighlighter-pre" xml:space="preserve">PROP_SUB_REF</pre></div></div></li></ol><h2 id="SettingPropertiesintheProjectChangelog-ConstrainingtheValuestoSubstitutewiththetargetAttribute">Constraining the Values to Substitute with the <code>target</code> Attribute</h2><p>Use the <span style="font-family: monospace;">target&#160;</span>attribute to constrain the values to substitute to just those matching a search expression.&#160;</p><p>The search expression takes the form of an XPATH-like target expression.&#160; XPATH is used to specify a nodes in an XML document, in this case the changelog. The syntax for the target attribute is simplified.&#160;</p><p><code>target=&lt;search&gt;&lt;attribute&gt;</code></p><ul><li><code>&lt;search&gt;</code> - The element to search for. It can be a hierarchical expression of elements and subelements. For example <code>/createTable/column/</code> means to find all <code>column</code> elements within <code>createTable</code> elements.&#160;</li><li><code>&lt;attribute&gt;</code> - The attribute to substitute with the property. An attribute is expressed in one of the following ways:<ul><li><code>@&lt;attr-name&gt;</code> - the name of an attribute for . The @name</li><li><code>text()</code> - text string associated with the element.</li><li><code>filepath()</code> - the contents of a file associated with the element</li></ul></li><li>Multiple search-attribute pairs can be separated with a pipe character ( | ), a logical OR.&#160; All of the pairs are put together to express the replacement targets.&#160;</li></ul><h3 id="SettingPropertiesintheProjectChangelog-Exclusions">Exclusions</h3><p>Do not specify search for the following elements. An error is returned and the operation fails if they are specified.&#160;</p><ul><li>dat<code>abaseChangeLog</code></li><li><code>chang</code>eSet</li></ul><h3 id="SettingPropertiesintheProjectChangelog-Examplesforthetargetattribute">Examples for the target attribute</h3><p>The target attribute constrains reverse-replacements of values with property names to the attributes within elements that you specify.&#160;</p><p class="code-java"><code>/createTable/column/@name</code></p><ul><li class="code-java">Locate the <code>column</code> element in a <code>createTable</code> element. Replace within the <code>name</code> attribute.&#160;</li></ul><p class="code-java">/addPrimaryKey/@appdba:fillFactor</p><ul><li class="code-java">Locate the <code>addPrimaryKey</code> element. Replace the <code>appdba:fillFactor</code>&#160;within the attribute.&#160;</li></ul><p class="code-java">/createTable/column/constraints/@nullable</p><ul><li class="code-java">Locate the <code>constraints</code> element for the <code>column</code> element within the <code>createTable</code> element. Replace within the <code>nullable</code> attribute.&#160;</li></ul><p class="code-java">/createProcedure/@path/filecontent()</p><ul><li class="code-java">Locate the createProcedure element. Replace within the contents of the file specified by the <code>path</code> attribute.&#160;</li></ul><p class="code-java">/createProcedure/@schemaName|/createFunction/@schemaName|/createTable/@schemaName|</p><ul><li class="code-java">Locate and replace the <code>schemaName</code> attribute within <code>createProcedure</code>, <code>createFunction</code>, and <code>createTable</code> elements.&#160;</li></ul><p>/createSequence/@incrementBy</p><ul><li>Locate and replace the <code>incrementBy</code> attribute within the <code>createSequence</code> element</li></ul><h1 id="SettingPropertiesintheProjectChangelog-Seealso">See also</h1> <MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" /><ul><li><a href="configure-project-oracle-dbdefs.htm">How To: Configure a Project Using Oracle Schemas for DBdefs</a></li><li>Video 12 "Introduction to Subtitution Properties":&#160;<a href="how-enterprise-works.htm">How Liquibase Enterprise (fka DaticalDB) Works</a></li></ul><p><br /></p><p><br /></p></body>
</html>