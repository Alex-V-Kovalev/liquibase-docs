<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
	<head>
		<title>Liquibase Enterprise Documentation</title>
		<link href="../../../Resources/Stylesheets/CLI+-+Deployment+Packager.css" rel="stylesheet" />
	</head>
	<body>
		<h1>CLI - Deployment Packager</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<h1>deployPackager.groovy</h1>
		<MadCap:snippetText src="../../../Resources/Snippets/images/.ver_icon_size_enterprise.flsnp" />
		<p>Create changesets from SQL scripts and deploy the changesets.</p>
		<p><strong>USAGE</strong></p>
		<p><span class="HTMLCode_1">hammer&#160;[&lt;hammer-options&gt;]&#160;groovy deployPackager.groovy</span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [dbdef=&lt;dbdef-name&gt; | pipeline=&lt;pipelineRef&gt;] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [manifest=&lt;directory&gt; | &lt;JSON-file&gt;] || scm=true] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [labels=&lt;label-list&gt;] [contexts=&lt;contexts-list&gt;] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [showDebug=true]&#160;[invalidsAction=warn|fail] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [dbdefDeploy=true|false] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [commitPrefix="&lt;text&gt;"] </span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [preview]</span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [createDatabaseBackup=&lt;true|false&gt;]</span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1">  &#160;[invalidsAction=&lt;warn|fail&gt;]</span><span class="HTMLCode_1"><br /></span><span class="HTMLCode_1"> [cleanup]</span></p>
		<p><strong>REQUIREMENTS</strong></p>
		<p>Either <span class="HTMLCode_1">dbdef=</span> or <span class="HTMLCode_1">pipeline=</span> must be the first option in the command. Only one is allowed. Changes are packaged and deployed either to the DbDef specified or the first (leftmost) DbDef in the pipeline.</p>
		<p>Either <span class="HTMLCode_1">manifest=</span> or <span class="HTMLCode_1">scm=true</span> is required.&#160;Only one is allowed.</p>
		<p class="title">Notes on the deployPackager.groovy command and its arguments</p>
		<ul>
			<li>
				<p>The deployPackager.groovy command and its options are case-sensitive.</p>
			</li>
			<li>
				<p>When specifying&#160;<span class="HTMLCode_1">labels</span> and&#160;<span class="HTMLCode_1">contexts</span> that should be added to change sets produced by deployPackager.groovy&#160;<strong>DO NOT&#160;</strong>include dashes before the argument names</p>
				<ul>
					<li>
						<p><strong>Correct:&#160;</span><span class="HTMLCode_1">hammer groovy deployPackager.groovy pipeline=PIPELINE1 scm=true labels=label1,label2 contexts=context1,context2</strong></p>
					</li>
					<li>
						<p><strong>Incorrect:</span> <span class="HTMLCode_1">hammer groovy deployPackager.groovy pipeline=PIPELINE1 scm=true --labels=label1,label2 --contexts=context1,context2</strong>&#160;</p>
					</li>
				</ul>
			</li>
		</ul>
		<p><strong>OUTPUT OPTIONS</strong></p>
		<ul>
			<li>
				<p><span class="HTMLCode_1">--log &lt;dirname&gt;&#160;</span>- <span>Log directory.&#160;Default location is</span><span class="HTMLCode_2">&lt;project-directory&gt;/Logs</span><span>.</span></p>
			</li>
			<li>
				<p><span class="HTMLCode_1">--report &lt;dirname&gt;</span>&#160;- Reports directory. Default location is&#160;<span class="HTMLCode_2">&lt;project-directory&gt;/Reports</span>&#160;</p>
			</li>
		</ul>
		<p><strong>OPTIONS</strong></p>
		<ul>
			<li>
				<p><span class="HTMLCode_1">dbdef=&lt;dbdef-name&gt;&#160;</span>- Name of the DbDef to use. When this option is used, changesets use contexts set in the DbDef along with any specified by the <span class="HTMLCode_1">contexts</span> option. Use when you are working with feature merges.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">pipeline=&lt;pipeline-name&gt;</span> - Name of the pipeline to use. Changes are deployed into first dbdef in the pipeline, which should be the REF database. Use when you are working with pipeline merges.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">manifest=</span>&#160;- Specify a directory name or a JSON file to use as the source of SQL scripts. A <span class="HTMLCode_1">deploymentPackager.properties</span> file must be present at the project root directory. It specifies the&#160;</p>
			</li>
			<li>
				<p><span>scm=true</span> - Get the SQL scripts to process from an SCM system. A <span class="HTMLCode_1">deploymentPackager.properties</span> file must be present at the project root directory. It specifies how to access the SCM system.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">labels</span> - Comma-separated list of labels to apply to the changesets created. Expressions are not supported.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">contexts</span> - Comma-separated list of contexts to apply to the changesets created. Expressions are not supported.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">showDebug</span> - Default false. Set to true to get additional logging messages.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">invalidsAction=&lt;warn|fail&gt;</span> - Default <span class="HTMLCode_1">warning.</span><span class="HTMLCode_3">&#160;</span>&#160;Pass this value to the deploy commands used during packaging. Determines what to do in response to testing for invalid stored logic. If <span class="HTMLCode_1">warn</span>, then failed tests print a warning message and deployment continuse. If <span class="HTMLCode_1">fail</span>, then print an error message and halt deployment and packaging.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">dbdefDeploy</span> - Default true. Set to false to disable forecast and deploy.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">commitPrefix="&lt;text&gt;"</span> - <span>Message to be placed at the beginning of the commit comment when Deployment Packager commits changes to an SCM system. Intended for use as a hook to trigger automatic actions by the SCM system.</span></p>
			</li>
			<li>
				<p><span class="HTMLCode_1">preview</span> - Include this option to generate a report of what would happen. No packaging or deployments are actually performed.&#160;<span>When you are managing database backups manually (</span><span class="HTMLCode_4">databaseBackupMode=on_demand</span><span>), using this option with</span><span class="HTMLCode_4">createDatabaseBackup=true</span><span>causes the database to be backed up upon successful preview</span>.</p>
			</li>
			<li>
				<p><span>createDatabaseBackup=&lt;true|false&gt;&#160;</span>- Create a new database backup. Valid only when <span class="HTMLCode_1">databaseBackupMode=on_demand</span> in <span class="HTMLCode_1">deployPackager.properties</span>. Used when you are managing database backups manually rather than allowing Deployment Packager to back up the database during every deployment. Use with <span class="HTMLCode_1">preview</span> to perform a database backup and do nothing else. See <a href="https://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896570174/Managing+Database+Backup+and+Restore">Managing Database Backup and Restore</a>.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">invalidsAction=&lt;warn|fail&gt;</span> - Override the storedLogicValidityAction project setting for this deploy. Default behavior is 'warn' which will cause the Deploy to flag deployment as warning for new invalid stored logic. 'fail' will mark the deployment as failure.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">cleanup</span>&#160;- Cleanup mode will release locks on the tracking table, clean up any utility objects created in the database as part of packaging and restore the RefDB to it's last known good state. Use it when a Packager job was prematurely terminated.</p>
			</li>
		</ul>
		<p><strong>DATICAL SERVICE OPTIONS</strong></p>
		<p>Use the following options to specify a project stored in <MadCap:variable name="General.DaticalDB" /> Service. Place them as hammer command options, before the <span class="HTMLCode_1">groovy</span> keyword.</p>
		<ul>
			<li>
				<p>
					<span class="HTMLCode_1">daticalServer</span>&#160;- the hostname or IP address where the <MadCap:variable name="General.DaticalDB" /> Service is installed.&#160;<span>Note that they are not interchangeable. The one to use is established when you run Initialization Wizard during installation.</span>
				</p>
			</li>
			<li>
				<p>
					<span class="HTMLCode_1">daticalUsername</span>&#160;- user name defined in the <MadCap:variable name="General.DaticalDB" /> Service. Use the DATICAL_PASSWORD environment variable to provide the password.</p>
			</li>
			<li>
				<p><span class="HTMLCode_1">projectKey=&lt;projectRef&gt;</span>&#160;-&#160;<span class="HTMLCode_1">projectRef</span>&#160;is a project name or project key</p>
			</li>
		</ul>
		<p><strong>NOTES</strong></p>
		<p>The Deployment Packager gets SQL files to process from one of two sources:</p>
		<ul>
			<li>
				<p>SCM system ("SCM mode"). Use the <span class="HTMLCode_1">deployPackager.properties</span> file to specify how to access a repository through a source control management system.&#160;</p>
			</li>
			<li>
				<p>Manifest file ("manifest mode"). Specify either a directory of JSON files or a single JSON file to use.</p>
				<p>Merge methodologies in SCM mode:</p>
			</li>
		</ul>
		<ul>
			<li>
				<p>Feature merge - used when development teams use feature branches in source control. Features are then merged into a release pipeline.</p>
			</li>
			<li>
				<p>Pipeline merge - used when development teams work on multiple releases at a time. A pipeline is defined for each release. Merges are performed across the pipelines. For example, a change introduced into the pipeline for the September release can then be merged into the pipeline for the October release.</p>
			</li>
		</ul>
		<p><strong>EXAMPLES</strong></p>
		<p><MadCap:variable name="General.DaticalDB" /> - See <a href="https://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896570205/Running+Deployment+Packager">Running Deployment Packager</a> (CLI examples)
		</p>
		<p><MadCap:variable name="General.DaticalDB" /> Service - See <a href="https://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896828610/Using+Datical+DB+Hammer+Commands+with+Projects+in+Datical+Service">Using Datical DB Hammer Commands with Projects in Datical Service</a> (Packaging Example)
		</p>
		<p><strong>OUTPUT</strong></p>
		<p>Different output is produced depending on whether packaging succeeds or fails.</p>
		<p>During the process you will see multiple deploy operations recorded in the log on the way to a completed change deployment.</p>
		<p>See <a href="https://datical-cs.atlassian.net/wiki/spaces/DDOC/pages/896570233/Output+from+Deployment+Packager">Output from Deployment Packager</a>.</p>
	</body>
</html>