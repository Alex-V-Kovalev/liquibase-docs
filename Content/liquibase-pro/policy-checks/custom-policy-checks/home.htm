<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/home.html" />
        <meta name="description" content="Custom Policy Checks enable the creation of any kind of check that matches your needs via python scripts. This feature expands the Liquibase checks horizon and allows all Pro users who write Python scripts to create any check for the workflow at hand." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Custom Policy Checks</h1>
        <p>Custom Policy Checks are Python scripts that allow you run advanced policies using the <MadCap:variable name="General.Liquibase" />&#160;<MadCap:xref href="../home.htm">Policy Checks</MadCap:xref> framework. Custom policy checks allow you to enforce compliance for a wide array of security, code standards, data quality, and more.</p>
        <p>While it's possible to configure the behavior of many <a href="../checks/home.htm">built-in <MadCap:variable name="General.Liquibase" /> policy checks</a> using regular expressions (such as <code><MadCap:xref href="../checks/changelog-checks/patterna-followed-bypatternb.htm">PatternAFollowedByPatternB</MadCap:xref></code>), those checks may not be robust enough for complex governance requirements. In contrast, you can use custom policy checks to create unique checks for any situation in your <MadCap:variable name="General.Liquibase" /> workflow.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is a <MadCap:variable name="General.LBPro"></MadCap:variable> feature, so you need a <a href="https://docs.liquibase.com/workflows/liquibase-pro/how-to-apply-your-liquibase-pro-license-key.html" target="_blank"><MadCap:variable name="General.LBPro"></MadCap:variable> License Key</a> to use it.</p>
        <h2>Business benefits</h2>
        <ul>
            <li><b>Ensure compliance</b> to your specific issues and tech stack</li>
            <li><b>Develop</b> at your own cadence</li>
            <li><b>Share easily</b> across your entire organization</li>
            <li><b>Easily customize</b> from a base template</li>
        </ul>
        <h2>Quickstart: Create a custom policy check</h2>
        <p>For a detailed, <b>step-by-step tutorial</b> of creating and deploying a check, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>. This tutorial explains:</p>
        <ul>
            <li><b>Prerequisites</b> for using custom policy checks</li>
            <li><b>Downloading</b> the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks"><MadCap:variable name="General.Liquibase" /> checks extension</a></li>
            <li><b>Creating</b> your first custom policy check based on a template</li>
            <li><b>Configuring</b> your check in the <MadCap:variable name="General.Liquibase" /> checks framework</li>
            <li><b>Running</b> your check using <MadCap:variable name="General.Liquibase" /> commands</li>
        </ul>
        <h2>Sample custom policy checks</h2>
        <p>For sample Python scripts that you can run as policy checks, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-sample-scripts-hatnote.flsnp">
        </MadCap:snippetBlock>
        <p>If you need help deploying your check, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <h2><MadCap:variable name="General.Liquibase" /> checks framework</h2>
        <p>The logic of a custom policy check goes in a Python (<code class="language-text">.py</code>) script file:</p>
        <ul>
            <li>You can associate each custom policy check with one Python script. (Your Python script can reference helper scripts.)</li>
            <li>You can write and modify that script without using <MadCap:variable name="General.Liquibase" /> commands:&#160;it's just a Python file.</li>
            <li>You should store all your Python scripts in the <MadCap:variable name="General.Liquibase" /> working directory or other accessible location.</li>
            <li>You should keep the logic for different checks in different Python files.</li>
        </ul>
        <h3><MadCap:variable name="General.Liquibase" /> commands</h3>
        <p>You can integrate your Python file into <MadCap:variable name="General.Liquibase" /> by using the same <MadCap:xref href="../../../commands/policy-checks/subcommands/home.htm">Policy Checks Commands</MadCap:xref> you would use to copy a built-in policy check. Specifically, there is a built-in policy check called <code class="language-text">CustomChecksTemplate</code> that you can <MadCap:xref href="../../../commands/policy-checks/subcommands/copy.htm">copy</MadCap:xref> and <MadCap:xref href="../../../commands/policy-checks/subcommands/customize.htm">customize</MadCap:xref> to specify your own logic. In the CLI, you specify a short name for your custom check in <MadCap:variable name="General.Liquibase" />, the Python script containing the check logic to run, and other configurations like the check's severity level.</p>
        <p>You should write your Python script to test one <MadCap:variable name="General.changeset" /> or database object. Like other checks, you can deploy custom policy checks by using the <code><MadCap:xref href="../../../commands/policy-checks/subcommands/run.htm">run</MadCap:xref></code> command. <MadCap:variable name="General.Liquibase" /> then runs your Python script over all the objects in the domain you specify:</p>
        <ul>
            <li><b>Once per <MadCap:variable name="General.changeset" /></b> in your <MadCap:variable name="General.changelog" /> (if you set <code class="language-text">--checks-scope=changelog</code>)</li>
            <li><b>Once per object</b> in a database <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref> (if you set <code class="language-text">--checks-scope=database</code>)</li>
        </ul>
        <h3>Automation</h3>
        <p>You can <a href="../workflows/automation-severity-exit-code.htm">deploy custom policy checks into your CI/CD automation</a> the same way as built-in checks. This allows your code to be robust but keeps your processes simple.</p>
        <p>When you configure your custom policy check, specify a severity code (exit code)&#160;for that check. Your external CI/CD tools can use this exit code to know how to react when a check triggers in your pipeline.</p>
        <h3>Python runtime dependencies</h3>
        <p><MadCap:variable name="General.Liquibase" /> is a Java application. On the back-end, <MadCap:variable name="General.Liquibase" /> uses the <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/">GraalPy</a> API to run all custom policy check Python scripts via Java. <MadCap:variable name="General.Liquibase" /> runs custom policy checks in a built-in <a href="https://docs.python.org/3/tutorial/venv.html">Python virtual environment</a> that comes with the <MadCap:variable name="General.Liquibase" /> checks extension JAR. <a href="https://www.graalvm.org/latest/reference-manual/polyglot-programming/">GraalVM</a> also provides "patches" for some Python packages, such as replacing some C extensions with Java implementations. This optimizes performance to ensure your Python scripts run efficiently.</p>
        <p>Optionally, you can run your Python scripts in a custom virtual environment. To learn how to configure one, see <MadCap:xref href="checks-python-package.htm">Create a Python Virtual Environment and IDE&#160;Auto-Complete</MadCap:xref>.</p>
        <h2>Python script pseudocode</h2>
        <p>Any Python script you use in the custom policy check framework includes:</p>
        <ol>
            <li>Imports of useful <a href="api-helper-scripts.htm"><MadCap:variable name="General.Liquibase"></MadCap:variable> helper scripts</a> to access the <MadCap:variable name="General.Liquibase" /> API.</li>
            <li>Clearly named variables that call on functions in the helper scripts (for ease of use).</li>
            <li>The logic of your custom check; the code for <MadCap:variable name="General.Liquibase" /> to run against a <MadCap:variable name="General.changeset" /> or database object.</li>
            <li>A default return code (<code class="language-text">False</code>).</li>
        </ol>
        <p>To demonstrate that structure, here's some Python pseudocode:</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#changelog_example" id="label_changelog_example" class="js-tablist__link">Changelog check pseudocode</a>
                </li>
                <li class="js-tablist__item"><a href="#database_example" id="label_database_example" class="js-tablist__link">Database check pseudocode</a>
                </li>
            </ul>
            <div id="changelog_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-text">import helper scripts

define a reusable variable = use helper scripts to get changelog objects

for each change type in the changeset:
    if this condition is met, then do the following:
        tell liquibase = the check triggered!
        send this message as output = "NOOOOO"
        exit script with return code 1

otherwise, return false</code></pre>
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog.flsnp" />
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog-best-practices.flsnp" />
            </div>
            <div id="database_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-text">import helper scripts

define a reusable variable = use helper scripts to get database objects

if this condition is met, then do the following:
    tell liquibase = the check triggered!
    send this message as output = "NOOOOO"
    exit script with return code 1

otherwise, return false</code></pre>
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-database.flsnp" />
            </div>
        </div>
        <p>For executable code samples, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>. To configure your Python script in the <MadCap:variable name="General.Liquibase" /> policy checks framework, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <p>Advanced users can further enhance their scripts with these tutorials:</p>
        <ul>
            <li>
                <MadCap:xref href="dynamic-status-messages.htm">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>: write more advanced status messages containing dynamic content</li>
            <li>
                <MadCap:xref href="checks-python-package.htm">Create a Python Virtual Environment and IDE&#160;Auto-Complete</MadCap:xref>: access in-IDE documentation and auto-complete for <MadCap:variable name="General.Liquibase" /> helper scripts</li>
        </ul>
        <h2>Limitations</h2>
        <ul>
            <li>The <code><MadCap:xref href="../../../change-types/load-data.html">loadData</MadCap:xref></code>&#160;<MadCap:variable name="General.changetypes" /> is not supported.</li>
            <li>When you run <code class="language-text">checks run --checks-scope=database</code>, <MadCap:variable name="General.Liquibase" /> generates a database snapshot. If your database contains a very large number of complex objects, the <code>snapshot</code> command may take a long time to execute.<ul><li>If you experience memory limitations while trying to generate the snapshot for database-scoped checks, see <MadCap:xref href="../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</li><li>If you want to manually create a snapshot to run database-scoped checks against an offline version of your database, see the instructions on <code><MadCap:xref href="../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref></code>.</li></ul></li>
            <li>As of <MadCap:variable name="General.Liquibase" /> 4.30.0, you can use the custom policy checks framework only to analyze your <MadCap:variable name="General.changelog" /> and database. You cannot natively use custom policy checks against other <MadCap:variable name="General.Liquibase" /> resources like <a href="../../../concepts/connections/creating-config-properties.html">properties files</a> and <a href="../../flow/home.htm">flow files</a>.</li>
        </ul>
    </body>
</html>