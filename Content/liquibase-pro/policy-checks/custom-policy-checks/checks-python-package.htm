<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/checks-python-package.html" />
        <meta name="description" content="This tutorial demonstrates how to create a Python virtual environment with GraalPy to install the Liquibase Checks Python package in order to access in-IDE documentation and auto-complete when writing custom policy check Python scripts." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><MadCap:variable name="General.Liquibase" /> Checks Python Package</h1>
        <p>You can use <a href="api-helper-scripts.htm"><MadCap:variable name="General.Liquibase" /> helper scripts</a> while writing <a href="home.htm">custom policy checks</a> to access the <MadCap:variable name="General.Liquibase" /> API. <MadCap:variable name="General.Liquibase" /> also provides a Python package called <code>liquibase-checks-python</code> to provide <b>in-IDE documentation and auto-complete</b> for your helper scripts. This helps you write custom policy check scripts much faster.</p>
        <p><MadCap:variable name="General.Liquibase" /> bundles and utilizes <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/">GraalPy</a> to execute Python scripts via Java. GraalPy also provides patches to certain packages that facilitates a smooth workflow with Java when installing those packages.</p>
        <p>You must use GraalPy to create a <a href="https://docs.python.org/3/tutorial/venv.html">local Python virtual environment</a> to access in-IDE documentation and auto-complete for <MadCap:variable name="General.Liquibase" /> helper scripts. The <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks"><MadCap:variable name="General.Liquibase" /> checks extension</a> comes with a built-in virtual environment, or you can create your own. Virtual environments help you isolate your projects so that you can have different versions of libraries in each one.</p>
        <p>Custom policy checks <b>do not require</b> using a virtual environment, but it is a best practice.</p>
        <h2>Prerequisites</h2>
        <ul>
            <li>Python 3.10.14+</li>
            <li>GraalPy 24.0.0+</li>
            <li>Follow the  prerequisites on <MadCap:xref href="tutorial.htm">Create a Custom Policy Check</MadCap:xref> to download and install the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks"><MadCap:variable name="General.Liquibase" /> Checks extension</a>.</li>
        </ul>
        <h2>Create a virtual environment</h2>
        <ol>
            <li><b>Download</b> and extract the latest version of <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/#installing-graalpy">GraalPy</a> on your machine.</li>
            <li>Add GraalPy (<code class="language-text">&lt;graalpy/install/dir&gt;/bin</code>) to your <code class="language-text">PATH</code> environment variable.</li>
            <li>In your command line, <b>invoke GraalPy to run the <code class="language-text">venv</code> module</b> to create a virtual environment and directory structure containing Python executable files:</li><pre><code class="language-shell">graalpy -m venv .your/path/to/venv</code></pre>
            <li><b>Activate the virtual environment</b>:</li>
            <ul>
                <li>Windows: <code class="language-shell">source &lt;path\to\venv&gt;\Scripts\activate</code></li>
                <li>Linux and macOS: <code class="language-shell">source &lt;path/to/venv&gt;/bin/activate</code><br /></li>
            </ul>
            <li><b>Install modules</b> using <code class="language-text">pip</code>. For example, to install the <code><a href="https://sqlparse.readthedocs.io/en/latest/">sqlparse</a></code> module, which helps you parse SQL in your custom policy checks:</li><pre><code class="language-shell">pip install sqlparse</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The GraalPy implementation of <code class="language-text">pip</code> may choose package versions other than the latest when it ships patches.</p>
            <li><b>Deactivate the virtual environment</b> by exiting your command line or running this command:</li><pre><code class="language-shell">deactivate</code></pre>
            <li>Use the <MadCap:variable name="General.Liquibase" /> parameter <code>--script-python-executable-path</code> to tell <MadCap:variable name="General.Liquibase" /> the path to the Python executable in your virtual environment:</li>
            <div class="js-tabs">
                <ul class="js-tablist" data-hx="h3">
                    <li class="js-tablist__item"><a href="#windows_example" id="label_windows_example" class="js-tablist__link">Windows example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#linux_example" id="label_linux_example" class="js-tablist__link">Linux example</a>
                    </li>
                </ul>
                <div id="windows_example" class="js-tabcontent">
                    <ul>
                        <li>Command line at runtime: <code class="language-text">--script-python-executable-path=./your/path/to/venv/Scripts/python.exe</code></li>
                        <li>Defaults file (<MadCap:variable name="General.liquiPropFile" />): <code class="language-text">liquibase.script.python.executablePath=./your/path/to/venv/Scripts/python.exe</code></li>
                        <li>Environment variable: <code class="language-text">LIQUIBASE_SCRIPT_PYTHON_EXECUTABLE_PATH</code></li>
                    </ul>
                </div>
                <div id="linux_example" class="js-tabcontent">
                    <ul>
                        <li>Command line at runtime: <code class="language-text">--script-python-executable-path=./your/path/to/venv/bin/python</code></li>
                        <li>Defaults file (<MadCap:variable name="General.liquiPropFile" />): <code class="language-text">liquibase.script.python.executablePath=./your/path/to/venv/bin/python</code></li>
                        <li>Environment variable: <code class="language-text">LIQUIBASE_SCRIPT_PYTHON_EXECUTABLE_PATH</code></li>
                    </ul>
                </div>
            </div>
        </ol>
        <p>You have now successfully configured your virtual environment for <MadCap:variable name="General.Liquibase" /> policy checks.</p>
        <h2>Install the Python package</h2>
        <p>Now install the <code>liquibase-checks-python</code> Python package to configure in-IDE documentation and auto-complete with your <MadCap:variable name="General.Liquibase" /> helper scripts:</p>
        <ol>
            <li>In your command line, navigate to your virtual environment.</li>
            <li>Install the <MadCap:variable name="General.Liquibase" /> Python package:</li><pre><code class="language-shell">pip install liquibase-checks-python</code></pre>
            <li>In your Python script, replace <code class="language-python">import liquibase_utilities</code> with <code class="language-python">from liquibase_checks_python import liquibase_utilities</code>:</li>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">import sys # useful for indicating a check has been triggered
from liquibase_checks_python import liquibase_utilities as lb # this is where we are importing our liquibase_utilities helper script provided by the liquibase-checks-python package

obj = lb.get_database_object() # this gets the database object the liquibase policy check is examining
status = lb.get_status() # this gets the status object of the liquibase check, used for reporting status and messages from the custom policy check

if lb.is_table(obj): # function provided from liquibase utilities
	status.fired = True # indicates the custom check has been triggered
	status.message = No tables allowed! # set the message of the custom check, which liquibase will return
	sys.exit(1) # exit from the check</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
        </ol>
        <p>You have now successfully activated the  Checks Python package.</p>
        <h2>Run custom policy checks with a virtual environment</h2>
        <p>If you haven't yet run any <MadCap:variable name="General.Liquibase" /> policy checks commands to configured your Python script as a check, follow the steps on <MadCap:xref href="tutorial.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <p>If you've already configured your custom policy check, you can run it using your new virtual environment:</p>
        <ul>
            <li>Windows:</li><pre xml:space="preserve"><code class="language-shell">liquibase --script-python-executable-path=./your/path/to/venv/Scripts/python.exe checks run --check-name=MySweetPythonCheck --checks-scripts-enabled=true --checks-scope=database</code></pre>
            <li>Linux/macOS:</li><pre xml:space="preserve"><code class="language-shell">liquibase --script-python-executable-path=./your/path/to/venv/bin/python checks run --check-name=MySweetPythonCheck --checks-scripts-enabled=true --checks-scope=database</code></pre>
        </ul>
        <p>If you specified <code class="language-text">--script-python-executable-path</code> in your <code class="language-text"><MadCap:variable name="General.liquiPropFile" /></code> file or as an environment variable, you don't need to specify it at runtime.</p>
    </body>
</html>