<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/api-helper-scripts.html" />
        <meta name="description" content="Liquibase provides a API to enable users to write Python custom policy checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><MadCap:variable name="General.Liquibase" /> API Python Libraries</h1>
        <p><MadCap:variable name="General.Liquibase" /> provides an API  you can access in your Python <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>. The <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks"><MadCap:variable name="General.Liquibase" /> Checks extension</a> comes with several libraries that access this API:</p>
        <ul>
            <li><code class="language-text">liquibase_changesets</code>
            </li>
            <li><code class="language-text">liquibase_constants</code>
            </li>
            <li><code class="language-text">liquibase_database</code>
            </li>
            <li><code class="language-text">liquibase_json</code>
            </li>
            <li><code class="language-text">liquibase_utilities</code>
            </li>
        </ul>
        <p>This documentation page lists the <b>callable methods</b> contained in these libraries. You can use these methods to access necessary information about your <MadCap:variable name="General.changelog" /> and database to run your custom policy checks.</p>
        <p>For real-world Python scripts that access these libraries, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <h2>Python libraries</h2>
        <p><MadCap:variable name="General.Liquibase" /> also natively supports the following Python libraries:</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-python-native-libraries.flsnp" />
        <p>You can use these libraries for additional functionality in your custom policy checks, such as parsing complex SQL queries.</p>
        <p>The built-in <MadCap:variable name="General.Liquibase" /> virtual environment cannot support additional libraries. If you want to use more, you must create your own virtual environment and configure <MadCap:variable name="General.Liquibase" /> to run scripts using your custom executable instead.</p>
        <p>In your custom virtual environment, you can install the <MadCap:variable name="General.Liquibase" /> API libraries and natively supported Python libraries  in a package called <code class="language-text">liquibase-checks-python</code>. For more information, see <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref>.</p>
        <h2>Import syntax</h2>
        <p>By default, you can import <MadCap:variable name="General.Liquibase" /> <MadCap:variable name="General.Liquibase" /> libraries using the following syntax:</p><pre><code class="language-python">import &lt;library name&gt;</code></pre>
        <p>If you use a <a href="python-virtual-environment.htm">custom virtual environment</a>, you must use the following syntax instead:</p><pre><code class="language-python">from liquibase-checks-python import &lt;library name&gt;</code></pre>
        <h2><code>liquibase_changesets</code>
        </h2>
        <p>These functions are available to you after importing <code>liquibase_changesets</code>.</p>
        <p>Functions to pull information from the given <MadCap:variable name="General.changeset" /> path. The <MadCap:variable name="General.changeset" /> is always the input parameter for these attributes.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>get_author(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> author</td>
                </tr>
                <tr>
                    <td><code>get_contexts(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> contexts</td>
                </tr>
                <tr>
                    <td><code>get_file_path(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> file path</td>
                </tr>
                <tr>
                    <td><code>get_id(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> ID</td>
                </tr>
                <tr>
                    <td><code>get_labels(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> labels</td>
                </tr>
                <tr>
                    <td><code>is_always_run(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> alwaysRun value</td>
                </tr>
                <tr>
                    <td><code>is_run_on_change(changeset)</code>
                    </td>
                    <td>Provides the <MadCap:variable name="General.changeset" /> runOnChange value</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_database</code>
        </h2>
        <p>These functions are available to you after importing <code>liquibase_database</code>.</p>
        <p>Methods to access, or return, database attributes. The database is always the input parameter for these attributes.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>get_database_product_name(database)</code>
                    </td>
                    <td>Provides the database product name</td>
                </tr>
                <tr>
                    <td><code>get_database_product_version(database)</code>
                    </td>
                    <td>Provides the database product version</td>
                </tr>
                <tr>
                    <td><code>get_default_schema_name(database)</code>
                    </td>
                    <td>Provides the default schema for this database</td>
                </tr>
                <tr>
                    <td><code>get_short_name(database)</code>
                    </td>
                    <td>Provides the database short name</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_json</code>
        </h2>
        <p>These functions are available to you after importing <code>liquibase_json</code>.</p>
        <p>Functions to access, or return, JSON attributes. These are functions to parse a JSON&#160;<MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref> and access, or return, Dict objects.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Return</th>
                    <th>Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>get_column</code>(snapshot, table_name, column_name)
                    </td>
                    <td>Provides the specified Column Dict object for a table</td>
                    <td>
                        <p><code>snapshot</code>:     the snapshot to parse</p>
                        <p><code>  table_name</code>:   the name of the table to search for   </p>
                        <p><code>column_name</code>:  the name of the column to search for</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_column_size</code>(column)
                    </td>
                    <td>Provides the specified Column's size</td>
                    <td><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td><code>get_column_type_name</code>(column)
                    </td>
                    <td>Provides the specified Column's type name</td>
                    <td><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td><code>get_columns</code>(snapshot, table_name)
                    </td>
                    <td>
                        <p>Provides a list of Column Dict objects for a table such as a JSON serialized representation of the <MadCap:variable name="General.Liquibase" /> internal DatabaseObject class.</p>
                        <p>Example output:</p><pre>{'column': {'name': 'name', 'nullable': True, 'order': '1!{java.lang.Integer}', 'relation': 'liquibase.structure.core.Table#0eab104', 'snapshotId': '0eab105', 'type': {'characterOctetLength': '20!{java.lang.Integer}', 'columnSize': '20!{java.lang.Integer}', 'columnSizeUnit': 'BYTE!{liquibase.structure.core.DataType$ColumnSizeUnit}', 'dataTypeId': '1!{java.lang.Integer}', 'radix': '10!{java.lang.Integer}', 'typeName': 'bpchar'}}}</pre>
                    </td>
                    <td>
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_indexes</code>(snapshot, table_name)
                    </td>
                    <td>Provides a List of Index Dict objects for a table</td>
                    <td>
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_primary_key</code>(snapshot, table_name)
                    </td>
                    <td>Provides a Primary Key Dict object for a table</td>
                    <td>
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_table</code>(snapshot, table_name)
                    </td>
                    <td>Provides a list of Table Dict objects</td>
                    <td>
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_tables</code>(snapshot)
                    </td>
                    <td>Provides a list of Table Dict objects</td>
                    <td>
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_utilities</code>
        </h2>
        <p>These functions are available to you after importing <code>liquibase_utilities</code>.</p>
        <p>Utilities are general script helpers that retrieve content frequently searched for.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Return</th>
                    <th>Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>generate_sql</code>(change)</td>
                    <td>
                        <p>Generates a specific SQL&#160;<MadCap:variable name="General.changetypes" /> change and database</p>
                        <p>Example:</p><pre>changes = liquibase_utilities.get_changes() # get the changes we're looking at</pre><pre>sql = liquibase_utilities.generate_sql(change[0]) # get the first change in the list</pre><pre>if "something bad" in sql:</pre><pre> status.fired = True</pre><pre>sys.exit(1) # exit from the check</pre>
                        <p>
                            <br />
                        </p>
                    </td>
                    <td>
                        <p><b>change:</b> the change to generate SQL from</p>
                        <p><b>return:</b> the SQL of the change</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_arg</code>(name)</td>
                    <td>Return the value of a script argument</td>
                    <td><b>name:</b> the argument to find
<br /><b><br />return:</b> the value of the argument</td>
                </tr>
                <tr>
                    <td><code>get_binding</code>(key)</td>
                    <td>Access the binding object at the given key</td>
                    <td><b>key:</b> the binding to access
<br /><b><br />return:</b> the binding</td>
                </tr>
                <tr>
                    <td><code>get_cache</code>(key, default_value)</td>
                    <td>
                        <p>Returns the stored key/value pairs held by a dict object that are available between script executions.  For example, you can count the number of times a check triggers by adding a counter that updates for each feature.<br />If there is no current value, then put the default value. </p>
                    </td>
                    <td><b>key:</b>            the look up key
<br /><b>default_value:</b>  the value to put for the key if no value present
<br /><b><br />return:</b>              the current value or the default</td>
                </tr>
                <tr>
                    <td><code>get_changes</code>()
                    </td>
                    <td>
                        <p>Returns the set of changes that the check is actively examining</p>
                    </td>
                    <td>
                        <p><b>return:</b> the liquibase change objects</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_changeset</code>()
                    </td>
                    <td>
                        <p>Returns the <MadCap:variable name="General.changeset" /> object <MadCap:variable name="General.CompanyName" /> is actively examining</p>
                    </td>
                    <td><b>return:</b> the liquibase change set object</td>
                </tr>
                <tr>
                    <td><code>get_column_type</code>(database_object)</td>
                    <td>Get the data type of the column of a database object.<br />examples include:&#160;varchar, integer, etc.</td>
                    <td><b>database_object:</b> the database object
<br /><b><br />return:</b> the type of the column, or None if the database object is not a column</td>
                </tr>
                <tr>
                    <td><code>get_database</code>()
                    </td>
                    <td>Get the liquibase database object</td>
                    <td>
                        <p><b>return:</b> the liquibase database object</p>
                    </td>
                </tr>
                <tr>
                    <td><code>get_database_object</code>()
                    </td>
                    <td>Return the DatabaseObject that is being referenced in a database-scoped check</td>
                    <td><b>return:</b> the current database object being checked</td>
                </tr>
                <tr>
                    <td><code>get_database_snapshot</code>()
                    </td>
                    <td>Return the DatabaseSnapshot as a String</td>
                    <td><b>return:</b> the database snapshot string</td>
                </tr>
                <tr>
                    <td><code>get_dbutil</code>()
                    </td>
                    <td>Return the dbutil object used to check for object existence or to snapshot the DatabaseObject and return it</td>
                    <td><b>return:</b> the db_util object</td>
                </tr>
                <tr>
                    <td><code>get_logger</code>()
                    </td>
                    <td>Get the liquibase logger</td>
                    <td><b>return:</b> the liquibase logger</td>
                </tr>
                <tr>
                    <td><code>get_object_type_name</code>(database_object)</td>
                    <td>Get the object type string of a given database object</td>
                    <td><b>database_object:</b> The database_object to return the type for
<br /><b><br />return:</b> the type as a string</td>
                </tr>
                <tr>
                    <td><code>get_script_message</code>()
                    </td>
                    <td>Get the message for the script</td>
                    <td><b>return:</b> the message</td>
                </tr>
                <tr>
                    <td><code>get_script_path</code>()
                    </td>
                    <td>Return the path of the script</td>
                    <td><b>return:</b> the path of the script</td>
                </tr>
                <tr>
                    <td><code>get_snapshot</code>()
                    </td>
                    <td>Return the snapshot as a JSON object.</td>
                    <td><b>return:</b> The snapshot JSON object or None if no snapshot is available</td>
                </tr>
                <tr>
                    <td><code>get_status</code>()
                    </td>
                    <td>Return the Status object which will be used to set the check fired status and return a message</td>
                    <td><b>return:</b> the status object</td>
                </tr>
                <tr>
                    <td><code>has</code>(object_type, schema_name, object_name)</td>
                    <td>Returns <code>true</code> if there is an object of this type and name in the schema</td>
                    <td><b>object_type:</b> the object type
<br style="font-weight: bold;" /><b>schema_name:</b> the schema name
<br /><b>object_name:</b> the object name
<br /><b><br />return:</b> <code>true</code> if there is an object that matches this description, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>has_relation</code>(object_type, object_name, relation_type, relation_schema_name, relation_name)</td>
                    <td>Returns <code>true</code> if there is an object of this type that has a relation object  that matches the relation type, schema, and name</td>
                    <td><b>object_type:</b> the object type
<br /><b>object_name:</b> the object name
<br /><b>relation_type:</b> the type of relation (Table or View)
<br /><b>relation_schema_name:</b> the schema of the relation object
<br /><b>relation_name:</b> the name of the relation
<br /><b><br />return:</b><br />Returns <code>true</code> if there is an object of this type that has a relation object that matches the relation type, schema, and name.
<br />Returns <code>false</code> if no items match the provided criteria.</td>
                </tr>
                <tr>
                    <td><code>is_catalog</code>(database_object)</td>
                    <td>Check if the database object is a catalog</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a catalog, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_check_constraint</code>(database_object)</td>
                    <td>Check if the database object is a check constraint</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a check constraint, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_column</code>(database_object)</td>
                    <td>Check if the database object is a column</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a column, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_database_package</code>(database_object)</td>
                    <td>Check if the database object is a database package</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a database package, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_database_package_body</code>(database_object)</td>
                    <td>Check if the database object is a database package body</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a database package body, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_foreign_key</code>(database_object)</td>
                    <td>Check if the database object is a foreign key</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a foreign key, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_function</code>(database_object)</td>
                    <td>Check if the database object is a function</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a function, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_index</code>(database_object)</td>
                    <td>Check if the database object is an index</td>
                    <td><b>database_object:</b> the database object to check
<br style="font-weight: bold;" /><b><br />return: </b><code>true</code> if the object is a index, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_primary_key</code>(database_object)</td>
                    <td>Check if the database object is a primary key</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a primary key, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_schema</code>(database_object)</td>
                    <td>Check if the database object is a schema</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a schema, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_sequence</code>(database_object)</td>
                    <td>Check if the database object is a sequence</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a sequence, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_stored_database_logic</code>(database_object)</td>
                    <td>Check if the database object is stored database logic</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is stored database logic, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_stored_procedure</code>(database_object)</td>
                    <td>Check if the database object is a stored procedure</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a stored procedure, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_synonym</code>(database_object)</td>
                    <td>Check if the database object is a synonym</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a synonym, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_table</code>(database_object)</td>
                    <td>Check if the database object is a table</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a table, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_trigger</code>(database_object)</td>
                    <td>Check if the database object is a trigger</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a trigger, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_unique_constraint</code>(database_object)</td>
                    <td>Check if the database object is a unique constraint</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a unique constraint, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>is_view</code>(database_object)</td>
                    <td>Check if the database object is a view</td>
                    <td><b>database_object:</b> the database object to check
<br /><b><br />return:</b> <code>true</code> if the object is a view, <code>false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code>put_cache</code>(key, value)</td>
                    <td>Places the stored key/value pairs held by a dict object that are available between script executions.  </td>
                    <td><b> key</b>            The key to use
<br /><b> value</b>          The value to put in the cache</td>
                </tr>
                <tr>
                    <td><code>query_for_list</code>(SQL, SQL_file, end_delimiter)</td>
                    <td>Execute a SQL statement or script</td>
                    <td><b>SQL:</b> the SQL to execute
<br /><b>SQL_file:</b> the SQL file to execute
<br /><b>end_delimiter:</b> the end delimiter to use
<br /><b><br />return:</b> the results of the SQL as a list</td>
                </tr>
                <tr>
                    <td><code>snapshot_object</code>(object_type, object_name, relation_type, schema_name, relation_name)</td>
                    <td>Provides a Liquibase model object that represents a database object</td>
                    <td><b>object_type:</b> the type of the object, like Table<br /><b>object_name:</b> the objects name<br /><b>relation_type:</b> a type of relation that we need to snapshot to access the object<br /><b>schema_name:</b> the schema for the relation<br /><b>relation_name:</b> the name of the relation<br /><b><br />return:</b> the liquibase model for the database object</td>
                </tr>
                <tr>
                    <td><code>split_SQL</code>(SQL_string, strip_comments_flag, end_delimiter, changeset)</td>
                    <td>Provides an array of SQL lines</td>
                    <td><b>SQL_string:</b> the SQL to process
<br /><b>strip_comments_flag:</b> <code>true</code> to strip out comments
<br /><b>end_delimiter:</b> the end delimiter to use while processing the SQL
<br /><b>changeset:</b> the change set associated with the SQL<![CDATA[
]]><br /><b><br />return: </b>An array of SQL lines</td>
                </tr>
                <tr>
                    <td><code>split_statements</code>(SQL_string)</td>
                    <td>Split a string of SQL into individual statements</td>
                    <td><b>SQL_string:</b> the SQL string to split
<br /><b><br />return:</b> the list of SQL strings</td>
                </tr>
                <tr>
                    <td><code>strip_comments</code>(SQL_string)</td>
                    <td>Strip comments from a SQL string</td>
                    <td><b>SQL_string:</b> the SQL to strip
<br /><b><br />return:</b> the SQL string with comments removed</td>
                </tr>
                <tr>
                    <td><code>tokenize</code>(statement)</td>
                    <td>Tokenize a statement which was created by SQLparse and returns a list</td>
                    <td><b>statement:</b> the statement to tokenize
<br /><b><br />return:</b> the tokenized statement as a list</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_constants</code>
        </h2>
        <p>These functions are available to you after importing <code>liquibase_constants</code>.</p>
        <p>Constants are an unchangeable set of well-known constants that are used to access the script bindings. They are definitions of internal Python classes <MadCap:variable name="General.Liquibase" /> uses to enable custom policy checks via Python scripts. </p>
        <p class="warning" MadCap:autonum="&lt;b&gt;Warning: &lt;/b&gt;">You should be familiar with what a Python class is and how classes can have variables which are the equivalent of a constant. Most users will not need to use these unless you are debugging a complex custom policy check you have created.</p>
        <h3><code>Constant</code> methods</h3>
        <ul>
            <li><code>__init__(self)</code>
            </li>
            <li><code>__setattr__(self, name, value)</code>
            </li>
        </ul>
        <h3><code>Constant</code> data descriptors</h3>
        <ul>
            <li><code>__dict__</code>
            </li>
            <li><code>__weakref__</code>
            </li>
        </ul>
        <h3><code>ScriptConstant</code> data descriptors</h3>
        <ul>
            <li><code>__dict__</code>
            </li>
            <li><code>__weakref__</code>
            </li>
        </ul>
        <h3><code>ScriptConstant</code> data and other attribute definitions</h3>
        <ul>
            <li><code>ARGS_SUFFIX = '_arg_binding'</code>
            </li>
            <li><code>CACHE_BINDING = 'cache_binding'</code>
            </li>
            <li><code>CHANGESET_BINDING = 'changeSet_binding'</code>
            </li>
            <li><code>CHANGES_BINDING = 'changes_binding'</code>
            </li>
            <li><code>DATABASE_BINDING = 'database_binding'</code>
            </li>
            <li><code>DATABASE_OBJECT_BINDING = 'databaseObject_binding'</code>
            </li>
            <li><code>DATABASE_SNAPSHOT_BINDING = 'databaseSnapshot_binding'</code>
            </li>
            <li><code>DBUTIL_BINDING = 'dbutil_binding'</code>
            </li>
            <li><code>LOGGER_BINDING = 'logger_binding'</code>
            </li>
            <li><code>SCRIPT_MESSAGE_BINDING = 'scriptMessage_binding'</code>
            </li>
            <li><code>SCRIPT_PATH_BINDING = 'script_path_binding'</code>
            </li>
            <li><code>STATUS_BINDING = 'status_binding'</code>
            </li>
        </ul>
    </body>
</html>