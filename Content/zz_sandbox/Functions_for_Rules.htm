<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Functions for Rules</h1>
        <p />
        <div class="toc-macro client-side-toc-macro  conf-macro output-block">
        </div>
        <h1 id="FunctionsforRules-DaticalRuleFunctions">Datical Rule Functions</h1>
        <h2 id="FunctionsforRules-Response">Response</h2>
        <p><em>import com.datical.hammer.core.rules.Response;</em>
        </p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">Response(ResponseType returnCode, Collection&lt;String&gt; messages, String ruleName, String changeSetId);
Response(ResponseType returnCode, String message, String ruleName, String changeSetId);
Response(ResponseType returnCode, Collection&lt;String&gt; messages, String ruleName);
Response(ResponseType returnCode, String message, String ruleName);
Response();
setRuleName(String ruleName);
setReturnCode(ResponseType returnCode);
addMessage(String message);
addMessages(Collection&lt;String&gt; messages);
setPhase(String phase);
setChangeSetId(String changeSetId); </pre>
            </div>
        </div>
        <p><em>Usage:</em>
        </p>
        <p>insert(new Response(returnCode, errorMessage, ruleName));</p>
        <p>or</p>
        <p>response = new Response(); <br />response.addMessage(String errorMessage);<br />response.setReturnCode(ResponseType returnCode);<br />response.setRuleName(String ruleName);<br />insert(Response response);</p>
        <h2 id="FunctionsforRules-_Toc485899306ResponseType"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899306"></span>ResponseType</h2>
        <p><em>import com.datical.hammer.core.rules.Response.ResponseType;</em>
        </p>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">ResponseType.PASS 
ResponseType.WARN
ResponseType.FAIL </pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <h2 id="FunctionsforRules-_Toc485899307RuleFunctions"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899307"></span>RuleFunctions</h2>
        <h3 id="FunctionsforRules-_Toc485899308getText()"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899308"></span>getText()</h3>
        <p><em>import function com.datical.hammer.core.forecast.rules.RuleFunctions.getText;</em>
            <br />The getText function is provided as a convenience to make it easier for rules to get the SQL text of change types that can either have their text inline or in an external file. It works on the following (EObject) change types:</p>
        <ul>
            <li>AddCheckConstraintType</li>
            <li>ChangeSetType</li>
            <li>ColumnBaseType</li>
            <li>ColumnType</li>
            <li>CommentType</li>
            <li>CreateFunctionType</li>
            <li>CreatePackageBodyType</li>
            <li>CreatePackageType</li>
            <li>CreatePackageType</li>
            <li>CreateProcedureType</li>
            <li>CreateTriggerType</li>
            <li>DeleteType</li>
            <li>DisableCheckConstraintType</li>
            <li>DropTriggerType</li>
            <li>EnableCheckConstraintType</li>
            <li>EnableTriggerType</li>
            <li>IncludeAllType</li>
            <li>IndexStorageOptionsType</li>
            <li>IndexStorageOptionsType</li>
            <li>LoadDataType</li>
            <li>LoadUpdateDataType</li>
            <li>OutputType</li>
            <li>RenameTriggerType</li>
            <li>RollbackType</li>
            <li>SqlCheckType</li>
            <li>SqlFileType</li>
            <li>SqlType</li>
            <li>SqlType</li>
            <li>StopType</li>
            <li>StorageOptionsType</li>
            <li>StorageOptionsType</li>
            <li>TableStorageOptionsType</li>
            <li>TableStorageOptionsType</li>
            <li>UpdateType</li>
            <li>ValidCheckSumType</li>
            <li>WhereParamsType</li>
        </ul>
        <div class="preformatted panel conf-macro output-block" style="border-width: 1px;">
            <div class="preformattedContent panelContent"><pre xml:space="preserve">String getText(EObject eObject);</pre>
            </div>
        </div>
        <h1 id="FunctionsforRules-_Toc485899309ThirdPartyRuleFunctions"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899309"></span>Third Party Rule Functions</h1>
        <h2 id="FunctionsforRules-_Toc485899310List"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899310"></span>List</h2>
        <p><em>import java.util.List;</em>
        </p>
        <p>boolean <strong>add</strong>(E e)</p>
        <p style="margin-left: 30.0px;">Appends the specified element to the end of this list (optional operation).</p>
        <p>void <strong>add</strong>(int index, E element)</p>
        <p style="margin-left: 30.0px;">Inserts the specified element at the specified position in this list (optional operation).</p>
        <p>boolean <strong>addAll</strong>(Collection&lt;? extends E&gt; c)</p>
        <p style="margin-left: 30.0px;">Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).</p>
        <p>boolean <strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</p>
        <p style="margin-left: 30.0px;">Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</p>
        <p>void <strong>clear</strong>()</p>
        <p style="margin-left: 30.0px;">Removes all of the elements from this list (optional operation).</p>
        <p>boolean <strong>contains</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns true if this list contains the specified element.</p>
        <p>boolean <strong>containsAll</strong>(Collection&lt;?&gt; c)</p>
        <p style="margin-left: 30.0px;">Returns true if this list contains all of the elements of the specified collection.</p>
        <p>boolean <strong>equals</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Compares the specified object with this list for equality.</p>
        <p>E <strong>get</strong>(int index)</p>
        <p>Returns the element at the specified position in this list.</p>
        <p>int <strong>hashCode</strong>()</p>
        <p style="margin-left: 30.0px;">Returns the hash code value for this list.</p>
        <p>int <strong>indexOf</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p>boolean <strong>isEmpty</strong>()</p>
        <p style="margin-left: 30.0px;">Returns true if this list contains no elements.</p>
        <p>Iterator&lt;E&gt; <strong>iterator</strong>()</p>
        <p style="margin-left: 30.0px;">Returns an iterator over the elements in this list in proper sequence.</p>
        <p>int <strong>lastIndexOf</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p>ListIterator&lt;E&gt; <strong>listIterator</strong>()</p>
        <p style="margin-left: 30.0px;">Returns a list iterator over the elements in this list (in proper sequence).</p>
        <p>ListIterator&lt;E&gt; <strong>listIterator</strong>(int index)</p>
        <p style="margin-left: 30.0px;">Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.</p>
        <p>E <strong>remove</strong>(int index)</p>
        <p>Removes the element at the specified position in this list (optional operation).</p>
        <p>boolean <strong>remove</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Removes the first occurrence of the specified element from this list, if it is present (optional operation).</p>
        <p>boolean <strong>removeAll</strong>(Collection&lt;?&gt; c)</p>
        <p style="margin-left: 30.0px;">Removes from this list all of its elements that are contained in the specified collection (optional operation).</p>
        <p>boolean <strong>retainAll</strong>(Collection&lt;?&gt; c)</p>
        <p style="margin-left: 30.0px;">Retains only the elements in this list that are contained in the specified collection (optional operation).</p>
        <p>E <strong>set</strong>(int index, E element)</p>
        <p style="margin-left: 30.0px;">Replaces the element at the specified position in this list with the specified element (optional operation).</p>
        <p>int <strong>size</strong>()</p>
        <p style="margin-left: 30.0px;">Returns the number of elements in this list.</p>
        <p>List&lt;E&gt; <strong>subList</strong>(int fromIndex, int toIndex)</p>
        <p style="margin-left: 30.0px;">Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</p>
        <p>Object[] <strong>toArray</strong>()</p>
        <p style="margin-left: 30.0px;">Returns an array containing all of the elements in this list in proper sequence (from first to last element).</p>
        <p>&lt;T&gt; T[] <strong>toArray</strong>(T[] a)</p>
        <p style="margin-left: 30.0px;">Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.</p>
        <h2 id="FunctionsforRules-_Toc485899311ArrayList"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899311"></span>ArrayList</h2>
        <p><em>import java.util.ArrayList;</em>
            <br />boolean <strong>add</strong>(E e)</p>
        <p style="margin-left: 30.0px;">Appends the specified element to the end of this list.</p>
        <p>void <strong>add</strong>(int index, E element)</p>
        <p style="margin-left: 30.0px;">Inserts the specified element at the specified position in this list.</p>
        <p>boolean <strong>addAll</strong>(Collection&lt;? extends E&gt; c)</p>
        <p style="margin-left: 30.0px;">Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.</p>
        <p>boolean <strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</p>
        <p style="margin-left: 30.0px;">Inserts all of the elements in the specified collection into this list, starting at the specified position.</p>
        <p>void <strong>clear</strong>()</p>
        <p style="margin-left: 30.0px;">Removes all of the elements from this list.</p>
        <p>Object <strong>clone</strong>()</p>
        <p style="margin-left: 30.0px;">Returns a shallow copy of this ArrayList instance.</p>
        <p>boolean <strong>contains</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns true if this list contains the specified element.</p>
        <p>void <strong>ensureCapacity</strong>(int minCapacity)</p>
        <p style="margin-left: 30.0px;">Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.</p>
        <p>E <strong>get</strong>(int index)</p>
        <p style="margin-left: 30.0px;">Returns the element at the specified position in this list.</p>
        <p>int <strong>indexOf</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p>boolean <strong>isEmpty</strong>()</p>
        <p style="margin-left: 30.0px;">Returns true if this list contains no elements.</p>
        <p>Iterator&lt;E&gt; <strong>iterator</strong>()</p>
        <p style="margin-left: 30.0px;">Returns an iterator over the elements in this list in proper sequence.</p>
        <p>int <strong>lastIndexOf</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p>
        <p>ListIterator&lt;E&gt; <strong>listIterator</strong>()</p>
        <p style="margin-left: 30.0px;">Returns a list iterator over the elements in this list (in proper sequence).</p>
        <p>ListIterator&lt;E&gt; <strong>listIterator</strong>(int index)</p>
        <p style="margin-left: 30.0px;">Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.</p>
        <p>E <strong>remove</strong>(int index)</p>
        <p style="margin-left: 30.0px;">Removes the element at the specified position in this list.</p>
        <p>boolean <strong>remove</strong>(Object o)</p>
        <p style="margin-left: 30.0px;">Removes the first occurrence of the specified element from this list, if it is present.</p>
        <p>boolean <strong>removeAll</strong>(Collection&lt;?&gt; c)</p>
        <p style="margin-left: 30.0px;">Removes from this list all of its elements that are contained in the specified collection.</p>
        <p>protected void <strong>removeRange</strong>(int fromIndex, int toIndex)</p>
        <p style="margin-left: 30.0px;">Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.</p>
        <p>boolean <strong>retainAll</strong>(Collection&lt;?&gt; c)</p>
        <p style="margin-left: 30.0px;">Retains only the elements in this list that are contained in the specified collection.</p>
        <p>E <strong>set</strong>(int index, E element)</p>
        <p style="margin-left: 30.0px;">Replaces the element at the specified position in this list with the specified element.</p>
        <p>int <strong>size</strong>()</p>
        <p style="margin-left: 30.0px;">Returns the number of elements in this list.</p>
        <p>List&lt;E&gt; <strong>subList</strong>(int fromIndex, int toIndex)</p>
        <p style="margin-left: 30.0px;">Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</p>
        <p>Object[] <strong>toArray</strong>()</p>
        <p style="margin-left: 30.0px;">Returns an array containing all of the elements in this list in proper sequence (from first to last element).</p>
        <p>&lt;T&gt; T[] <strong>toArray</strong>(T[] a)</p>
        <p style="margin-left: 30.0px;">Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.</p>
        <p>void <strong>trimToSize</strong>()</p>
        <p style="margin-left: 30.0px;">Trims the capacity of this ArrayList instance to be the list's current size.</p>
        <h2 id="FunctionsforRules-_Toc485899312StringUtils(v2.6)"><span class="confluence-anchor-link conf-macro output-inline" id="FunctionsforRules-_Toc485899312"></span>StringUtils (v2.6)</h2>
        <p><em>import org.apache.commons.lang.StringUtils;</em>
            <br /><em>Overview</em>
        </p>
        <ul>
            <li><strong>IsEmpty/IsBlank</strong> - checks if a String contains text</li>
            <li><strong>Trim/Strip</strong> - removes leading and trailing whitespace</li>
            <li><strong>Equals</strong> - compares two strings null-safe</li>
            <li><strong>startsWith</strong> - check if a String starts with a prefix null-safe</li>
            <li><strong>endsWith</strong> - check if a String ends with a suffix null-safe</li>
            <li><strong>IndexOf/LastIndexOf/Contains</strong> - null-safe index-of checks</li>
            <li><strong>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</strong> - index-of any of a set of Strings</li>
            <li><strong>ContainsOnly/ContainsNone/ContainsAny</strong> - does String contains only/none/any of these characters</li>
            <li><strong>Substring/Left/Right/Mid</strong> - null-safe substring extractions</li>
            <li><strong>SubstringBefore/SubstringAfter/SubstringBetween</strong> - substring extraction relative to other strings</li>
            <li><strong>Split/Join</strong> - splits a String into an array of substrings and vice versa</li>
            <li><strong>Remove/Delete</strong> - removes part of a String</li>
            <li><strong>Replace/Overlay</strong> - Searches a String and replaces one String with another</li>
            <li><strong>Chomp/Chop</strong> - removes the last part of a String</li>
            <li><strong>LeftPad/RightPad/Center/Repeat</strong> - pads a String</li>
            <li><strong>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</strong> - changes the case of a String</li>
            <li><strong>CountMatches</strong> - counts the number of occurrences of one String in another</li>
            <li><strong>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</strong> - checks the characters in a String</li>
            <li><strong>DefaultString</strong> - protects against a null input String</li>
            <li><strong>Reverse/ReverseDelimited</strong> - reverses a String</li>
            <li><strong>Abbreviate</strong> - abbreviates a string using ellipsis</li>
            <li><strong>Difference</strong> - compares Strings and reports on their differences</li>
            <li><strong>LevensteinDistance</strong> - the number of changes needed to change one String into another</li>
        </ul>
        <p><strong>static String abbreviate(String str, int maxWidth)</strong>
        </p>
        <p style="margin-left: 30.0px;">Abbreviates a String using ellipses.</p>
        <p><strong>static String abbreviate(String str, int offset, int maxWidth)</strong>
        </p>
        <p style="margin-left: 30.0px;">Abbreviates a String using ellipses.</p>
        <p><strong>static String abbreviateMiddle(String str, String middle, int length)</strong>
        </p>
        <p style="margin-left: 30.0px;">Abbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.</p>
        <p><strong style="margin-left: 0.0px;">static String capitalize(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Capitalizes a String changing the first letter to title case as per Character.toTitleCase(char).</p>
        <p><strong>static String center(String str, int size)</strong>
        </p>
        <p style="margin-left: 30.0px;">Centers a String in a larger String of size size using the space character (' ').</p>
        <p><strong>static String center(String str, int size, char padChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Centers a String in a larger String of size size.</p>
        <p><strong>static String center(String str, int size, String padStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Centers a String in a larger String of size size.</p>
        <p><strong>static String chomp(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes one newline from end of a String if it's there, otherwise leave it alone.</p>
        <p><strong>static String chomp(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes separator from the end of str if it's there, otherwise leave it alone.</p>
        <p><strong>static String chop(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Remove the last character from a String.</p>
        <p><strong>static boolean contains(String str, char searchChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if String contains a search character, handling null.</p>
        <p><strong>static boolean contains(String str, String searchStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if String contains a search String, handling null.</p>
        <p><strong>static boolean containsAny(String str, char[] searchChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains any character in the given set of characters.</p>
        <p><strong>static boolean containsAny(String str, String searchChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains any character in the given set of characters.</p>
        <p><strong>static boolean containsIgnoreCase(String str, String searchStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if String contains a search String irrespective of case, handling null.</p>
        <p><strong>static boolean containsNone(String str, char[] searchChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks that the String does not contain certain characters.</p>
        <p><strong>static boolean containsNone(String str, String invalidChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks that the String does not contain certain characters.</p>
        <p><strong>static boolean containsOnly(String str, char[] valid)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only certain characters.</p>
        <p><strong>static boolean containsOnly(String str, String validChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only certain characters.</p>
        <p><strong>static int countMatches(String str, String sub)</strong>
        </p>
        <p style="margin-left: 30.0px;">Counts how many times the substring appears in the larger String.</p>
        <p><strong>static String defaultIfBlank(String str, String defaultStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Returns either the passed in String, or if the String is whitespace, empty ("") or null, the value of defaultStr.</p>
        <p><strong>static String defaultIfEmpty(String str, String defaultStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Returns either the passed in String, or if the String is empty or null, the value of defaultStr.</p>
        <p><strong>static String defaultString(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Returns either the passed in String, or if the String is null, an empty String ("").</p>
        <p><strong>static String defaultString(String str, String defaultStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Returns either the passed in String, or if the String is null, the value of defaultStr.</p>
        <p><strong>static String deleteWhitespace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Deletes all whitespaces from a String as defined by Character.isWhitespace(char).</p>
        <p><strong>static String difference(String str1, String str2)</strong>
        </p>
        <p style="margin-left: 30.0px;">Compares two Strings, and returns the portion where they differ.</p>
        <p><strong>static boolean endsWith(String str, String suffix)</strong>
        </p>
        <p style="margin-left: 30.0px;">Check if a String ends with a specified suffix.</p>
        <p><strong>static boolean endsWithAny(String string, String[] searchStrings)</strong>
        </p>
        <p style="margin-left: 30.0px;">Check if a String ends with any of an array of specified strings.</p>
        <p><strong>static boolean endsWithIgnoreCase(String str, String suffix)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case insensitive check if a String ends with a specified suffix.</p>
        <p><strong>static boolean equals(String str1, String str2)</strong>
        </p>
        <p style="margin-left: 30.0px;">Compares two Strings, returning true if they are equal.</p>
        <p><strong>static boolean equalsIgnoreCase(String str1, String str2)</strong>
        </p>
        <p style="margin-left: 30.0px;">Compares two Strings, returning true if they are equal ignoring the case.</p>
        <p><strong>static String</strong>  <strong>escape(String str)</strong></p>
        <p style="margin-left: 30.0px;">Deprecated. Use StringEscapeUtils.escapeJava(String) This method will be removed in Commons Lang 3.0</p>
        <p><strong>static String</strong>  <strong>getChomp(String str, String sep)</strong></p>
        <p style="margin-left: 30.0px;">Deprecated. Use substringAfterLast(String, String) instead (although this doesn't include the separator) Method will be removed in Commons Lang 3.0.</p>
        <p><strong>static String</strong>  <strong>getCommonPrefix(String[] strs)</strong></p>
        <p style="margin-left: 30.0px;">Compares all Strings in an array and returns the initial sequence of characters that is common to all of them.</p>
        <p><strong>static int</strong>  <strong>getLevenshteinDistance(String s, String t)</strong></p>
        <p style="margin-left: 30.0px;">Find the Levenshtein distance between two Strings.</p>
        <p><strong>static int</strong>  <strong>indexOf(String str, char searchChar)</strong></p>
        <p style="margin-left: 30.0px;">Finds the first index within a String, handling null.</p>
        <p><strong>static int</strong>  <strong>indexOf(String str, char searchChar, int startPos)</strong></p>
        <p style="margin-left: 30.0px;">Finds the first index within a String from a start position, handling null.</p>
        <p><strong>static int</strong>  <strong>indexOf(String str, String searchStr)</strong></p>
        <p style="margin-left: 30.0px;">Finds the first index within a String, handling null.</p>
        <p><strong>static int</strong>  <strong>indexOf(String str, String searchStr, int startPos)</strong></p>
        <p style="margin-left: 30.0px;">Finds the first index within a String, handling null.</p>
        <p><strong>static int</strong>  <strong>indexOfAny(String str, char[] searchChars)</strong></p>
        <p style="margin-left: 30.0px;">Search a String to find the first index of any character in the given set of characters.</p>
        <p><strong>static int</strong>  <strong>indexOfAny(String str, String searchChars)</strong></p>
        <p style="margin-left: 30.0px;">Search a String to find the first index of any character in the given set of characters.</p>
        <p><strong>static int</strong>  <strong>indexOfAny(String str, String[] searchStrs)</strong></p>
        <p style="margin-left: 30.0px;">Find the first index of any of a set of potential substrings.</p>
        <p><strong>static int</strong>  <strong>indexOfAnyBut(String str, char[] searchChars)</strong></p>
        <p style="margin-left: 30.0px;">Search a String to find the first index of any character not in the given set of characters.</p>
        <p><strong>static int</strong>  <strong>indexOfAnyBut(String str, String searchChars)</strong></p>
        <p style="margin-left: 30.0px;">Search a String to find the first index of any character not in the given set of characters.</p>
        <p><strong>static int</strong>  <strong>indexOfDifference(String[] strs)</strong></p>
        <p style="margin-left: 30.0px;">Compares all Strings in an array and returns the index at which the Strings begin to differ.</p>
        <p><strong>static int</strong>  <strong>indexOfDifference(String str1, String str2)</strong></p>
        <p style="margin-left: 30.0px;">Compares two Strings, and returns the index at which the Strings begin to differ.</p>
        <p><strong>static int</strong>  <strong>indexOfIgnoreCase(String str, String searchStr)</strong></p>
        <p style="margin-left: 30.0px;">Case in-sensitive find of the first index within a String.</p>
        <p><strong>static int</strong>  <strong>indexOfIgnoreCase(String str, String searchStr, int startPos)</strong></p>
        <p style="margin-left: 30.0px;">Case in-sensitive find of the first index within a String from the specified position.</p>
        <p><strong>static boolean isAllLowerCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only lowercase characters.</p>
        <p><strong>static boolean isAllUpperCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only uppercase characters.</p>
        <p><strong>static boolean isAlpha(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode letters.</p>
        <p><strong>static boolean isAlphanumeric(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode letters or digits.</p>
        <p><strong>static boolean isAlphanumericSpace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode letters, digits or space (' ').</p>
        <p><strong>static boolean isAlphaSpace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode letters and space (' ').</p>
        <p><strong>static boolean isAsciiPrintable(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the string contains only ASCII printable characters.</p>
        <p><strong>static boolean isBlank(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if a String is whitespace, empty ("") or null.</p>
        <p><strong>static boolean isEmpty(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if a String is empty ("") or null.</p>
        <p><strong>static boolean isNotBlank(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if a String is not empty (""), not null and not whitespace only.</p>
        <p><strong>static boolean isNotEmpty(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if a String is not empty ("") and not null.</p>
        <p><strong>static boolean isNumeric(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode digits.</p>
        <p><strong>static boolean isNumericSpace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only unicode digits or space (' ').</p>
        <p><strong>static boolean isWhitespace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Checks if the String contains only whitespace.</p>
        <p><strong>static String join(Collection collection, char separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided Collection into a single String containing the provided elements.</p>
        <p><strong>static String join(Collection collection, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided Collection into a single String containing the provided elements.</p>
        <p><strong>static String join(Iterator iterator, char separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided Iterator into a single String containing the provided elements.</p>
        <p><strong>static String join(Iterator iterator, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided Iterator into a single String containing the provided elements.</p>
        <p><strong>static String join(Object[] array)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p><strong>static String join(Object[] array, char separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p><strong>static String join(Object[] array, char separator, int startIndex, int endIndex)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p><strong>static String join(Object[] array, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p><strong>static String join(Object[] array, String separator, int startIndex, int endIndex)</strong>
        </p>
        <p style="margin-left: 30.0px;">Joins the elements of the provided array into a single String containing the provided list of elements.</p>
        <p><strong>static int lastIndexOf(String str, char searchChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the last index within a String, handling null.</p>
        <p><strong>static int lastIndexOf(String str, char searchChar, int startPos)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the last index within a String from a start position, handling null.</p>
        <p><strong>static int lastIndexOf(String str, String searchStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the last index within a String, handling null.</p>
        <p><strong>static int lastIndexOf(String str, String searchStr, int startPos)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the first index within a String, handling null.</p>
        <p><strong>static int lastIndexOfAny(String str, String[] searchStrs)</strong>
        </p>
        <p style="margin-left: 30.0px;">Find the latest index of any of a set of potential substrings.</p>
        <p><strong>static int lastIndexOfIgnoreCase(String str, String searchStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case in-sensitive find of the last index within a String.</p>
        <p><strong>static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case in-sensitive find of the last index within a String from the specified position.</p>
        <p><strong>static int lastOrdinalIndexOf(String str, String searchStr, int ordinal)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the n-th last index within a String, handling null.</p>
        <p><strong>static String left(String str, int len)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the leftmost len characters of a String.</p>
        <p><strong>static String leftPad(String str, int size)</strong>
        </p>
        <p style="margin-left: 30.0px;">Left pad a String with spaces (' ').</p>
        <p><strong>static String leftPad(String str, int size, char padChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Left pad a String with a specified character.</p>
        <p><strong>static String leftPad(String str, int size, String padStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Left pad a String with a specified String.</p>
        <p><strong>static int length(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets a String's length or 0 if the String is null.</p>
        <p><strong>static String lowerCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Converts a String to lower case as per String.toLowerCase().</p>
        <p><strong>static String lowerCase(String str, Locale locale)</strong>
        </p>
        <p style="margin-left: 30.0px;">Converts a String to lower case as per String.toLowerCase(Locale).</p>
        <p><strong>static String mid(String str, int pos, int len)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets len characters from the middle of a String.</p>
        <p><strong>static String normalizeSpace(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Similar to <a class="external-link" href="http://www.w3.org/TR/xpath/#function-normalize" rel="nofollow" style="margin-left: 0.0px;">http://www.w3.org/TR/xpath/#function-normalize</a> -space</p>
        <p><strong>static int ordinalIndexOf(String str, String searchStr, int ordinal)</strong>
        </p>
        <p style="margin-left: 30.0px;">Finds the n-th index within a String, handling null.</p>
        <p><strong>static String overlay(String str, String overlay, int start, int end)</strong>
        </p>
        <p style="margin-left: 30.0px;">Overlays part of a String with another String.</p>
        <p><strong>static String remove(String str, char remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes all occurrences of a character from within the source string.</p>
        <p><strong>static String remove(String str, String remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes all occurrences of a substring from within the source string.</p>
        <p><strong>static String removeEnd(String str, String remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes a substring only if it is at the end of a source string, otherwise returns the source string.</p>
        <p><strong>static String removeEndIgnoreCase(String str, String remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.</p>
        <p><strong>static String removeStart(String str, String remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes a substring only if it is at the begining of a source string, otherwise returns the source string.</p>
        <p><strong>static String removeStartIgnoreCase(String str, String remove)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case insensitive removal of a substring if it is at the begining of a source string, otherwise returns the source string.</p>
        <p><strong>static String repeat(String str, int repeat)</strong>
        </p>
        <p style="margin-left: 30.0px;">Repeat a String repeat times to form a new String.</p>
        <p><strong>static String repeat(String str, String separator, int repeat)</strong>
        </p>
        <p style="margin-left: 30.0px;">Repeat a String repeat times to form a new String, with a String separator injected each time.</p>
        <p><strong>static String replace(String text, String searchString, String replacement)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces all occurrences of a String within another String.</p>
        <p><strong>static String replace(String text, String searchString, String replacement, int max)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces a String with another String inside a larger String, for the first max values of the search String.</p>
        <p><strong>static String replaceChars(String str, char searchChar, char replaceChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces all occurrences of a character in a String with another.</p>
        <p><strong>static String replaceChars(String str, String searchChars, String replaceChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces multiple characters in a String in one go.</p>
        <p><strong>static String replaceEach(String text, String[] searchList, String[] replacementList)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces all occurrences of Strings within another String.</p>
        <p><strong>static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces all occurrences of Strings within another String.</p>
        <p><strong>static String replaceOnce(String text, String searchString, String replacement)</strong>
        </p>
        <p style="margin-left: 30.0px;">Replaces a String with another String inside a larger String, once.</p>
        <p><strong>static String reverse(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Reverses a String as per StrBuilder.reverse().</p>
        <p><strong>static String reverseDelimited(String str, char separatorChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Reverses a String that is delimited by a specific character.</p>
        <p><strong>static String right(String str, int len)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the rightmost len characters of a String.</p>
        <p><strong>static String rightPad(String str, int size)</strong>
        </p>
        <p style="margin-left: 30.0px;">Right pad a String with spaces (' ').</p>
        <p><strong>static String rightPad(String str, int size, char padChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Right pad a String with a specified character.</p>
        <p><strong>static String rightPad(String str, int size, String padStr)</strong>
        </p>
        <p style="margin-left: 30.0px;">Right pad a String with a specified String.</p>
        <p><strong>static String[] split(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, using whitespace as the separator.</p>
        <p><strong>static String[] split(String str, char separatorChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator specified.</p>
        <p><strong>static String[] split(String str, String separatorChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separators specified.</p>
        <p><strong>static String[] split(String str, String separatorChars, int max)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array with a maximum length, separators specified.</p>
        <p><strong>static String[] splitByCharacterType(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits a String by Character type as returned by java.lang.Character.getType(char).</p>
        <p><strong>static String[] splitByCharacterTypeCamelCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits a String by Character type as returned by java.lang.Character.getType(char).</p>
        <p><strong>static String[] splitByWholeSeparator(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator string specified.</p>
        <p><strong>static String[] splitByWholeSeparator(String str, String separator, int max)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator string specified.</p>
        <p><strong>static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator string specified.</p>
        <p><strong>static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator string specified.</p>
        <p><strong>static String[] splitPreserveAllTokens(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p><strong>static String[] splitPreserveAllTokens(String str, char separatorChar)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p><strong>static String[] splitPreserveAllTokens(String str, String separatorChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p><strong>static String[] splitPreserveAllTokens(String str, String separatorChars, int max)</strong>
        </p>
        <p style="margin-left: 30.0px;">Splits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p>
        <p><strong>static boolean startsWith(String str, String prefix)</strong>
        </p>
        <p style="margin-left: 30.0px;">Check if a String starts with a specified prefix.</p>
        <p><strong>static boolean startsWithAny(String string, String[] searchStrings)</strong>
        </p>
        <p style="margin-left: 30.0px;">Check if a String starts with any of an array of specified strings.</p>
        <p><strong>static boolean startsWithIgnoreCase(String str, String prefix)</strong>
        </p>
        <p style="margin-left: 30.0px;">Case insensitive check if a String starts with a specified prefix.</p>
        <p><strong>static String strip(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips whitespace from the start and end of a String.</p>
        <p><strong>static String strip(String str, String stripChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips any of a set of characters from the start and end of a String.</p>
        <p><strong>static String[] stripAll(String[] strs)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips whitespace from the start and end of every String in an array.</p>
        <p><strong>static String[] stripAll(String[] strs, String stripChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips any of a set of characters from the start and end of every String in an array.</p>
        <p><strong>static String stripEnd(String str, String stripChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips any of a set of characters from the end of a String.</p>
        <p><strong>static String stripStart(String str, String stripChars)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips any of a set of characters from the start of a String.</p>
        <p><strong>static String stripToEmpty(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips whitespace from the start and end of a String returning an empty String if null input.</p>
        <p><strong>static String stripToNull(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Strips whitespace from the start and end of a String returning null if the String is empty ("") after the strip.</p>
        <p><strong>static String substring(String str, int start)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets a substring from the specified String avoiding exceptions.</p>
        <p><strong>static String substring(String str, int start, int end)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets a substring from the specified String avoiding exceptions.</p>
        <p><strong>static String substringAfter(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the substring after the first occurrence of a separator.</p>
        <p><strong>static String substringAfterLast(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the substring after the last occurrence of a separator.</p>
        <p><strong>static String substringBefore(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the substring before the first occurrence of a separator.</p>
        <p><strong>static String substringBeforeLast(String str, String separator)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the substring before the last occurrence of a separator.</p>
        <p><strong>static String substringBetween(String str, String tag)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the String that is nested in between two instances of the same String.</p>
        <p><strong>static String substringBetween(String str, String open, String close)</strong>
        </p>
        <p style="margin-left: 30.0px;">Gets the String that is nested in between two Strings.</p>
        <p><strong>static String[] substringsBetween(String str, String open, String close)</strong>
        </p>
        <p style="margin-left: 30.0px;">Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.</p>
        <p><strong>static String swapCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.</p>
        <p><strong>static String trim(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes control characters (char &lt;= 32) from both ends of this String, handling null by returning null.</p>
        <p><strong>static String trimToEmpty(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes control characters (char &lt;= 32) from both ends of this String returning an empty String ("") if the String is empty ("") after the trim or if it is null.</p>
        <p><strong>static String trimToNull(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Removes control characters (char &lt;= 32) from both ends of this String returning null if the String is empty ("") after the trim or if it is null.</p>
        <p><strong>static String uncapitalize(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Uncapitalizes a String changing the first letter to title case as per Character.toLowerCase(char).</p>
        <p><strong>static String upperCase(String str)</strong>
        </p>
        <p style="margin-left: 30.0px;">Converts a String to upper case as per String.toUpperCase().</p>
        <p><strong>static String upperCase(String str, Locale locale)</strong>
        </p>
        <p style="margin-left: 30.0px;">Converts a String to upper case as per String.toUpperCase(Locale).</p>
        <p>
            <br />
        </p>
    </body>
</html>