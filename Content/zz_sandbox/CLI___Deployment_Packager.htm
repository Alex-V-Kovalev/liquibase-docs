<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>CLI - Deployment Packager</h1>
        <h1 id="CLI-DeploymentPackager-deployPackager.groovy">deployPackager.groovy</h1>
        <p style="margin-left: 30.0px;">Create changesets from SQL scripts and deploy the changesets.&#160;</p>
        <p><strong>USAGE</strong>
        </p>
        <p style="margin-left: 30.0px;"><code>hammer&#160;<code>[</code>&lt;hammer-options&gt;]&#160;groovy deployPackager.groovy <br />&#160; &#160; &#160;[dbdef=&lt;dbdef-name&gt; | pipeline=&lt;pipelineRef&gt;] <br />&#160; &#160; &#160;[manifest=&lt;directory&gt; | &lt;JSON-file&gt;] || scm=true] <br />&#160; &#160; &#160;[labels=&lt;label-list&gt;] [contexts=&lt;contexts-list&gt;] <br />&#160; &#160; &#160;[showDebug=true]&#160;[invalidsAction=warn|fail]&#160;&#160;<br /></code><code>&#160; &#160; &#160;[dbdefDeploy=true|false] <br /></code><code>&#160; &#160; &#160;[commitPrefix="&lt;text&gt;"] <br />&#160; &#160; &#160;[preview]<br /><code><code>&#160; &#160; &#160;[createDatabaseBackup=&lt;true|false&gt;]</code><br />&#160;&#160;&#160;&#160;&#160;[invalidsAction=&lt;warn|fail&gt;]<br /></code></code><code><code><code>&#160; &#160; &#160;[cleanup]</code></code></code>
        </p>
        <p><strong>REQUIREMENTS</strong>
        </p>
        <p style="margin-left: 30.0px;">Either <code>dbdef=</code> or <code>pipeline=</code> must be the first option in the command. Only one is allowed. Changes are packaged and deployed either to the DbDef specified or the first (leftmost) DbDef in the pipeline.&#160;</p>
        <p style="margin-left: 30.0px;">Either <code>manifest=</code> or <code>scm=true</code> is required.&#160;Only one is allowed.&#160;</p>
        <div class="confluence-information-macro confluence-information-macro-information conf-macro output-block">
            <p class="title">Notes on the deployPackager.groovy command and its arguments</p>
            <div class="confluence-information-macro-body">
                <ul>
                    <li>The deployPackager.groovy command and its options are case-sensitive.</li>
                    <li>When specifying&#160;<code>labels</code> and&#160;<code>contexts</code> that should be added to change sets produced by deployPackager.groovy&#160;<strong>DO NOT&#160;</strong>include dashes before the argument names<ul><li><strong>Correct:&#160;</strong><code>hammer groovy deployPackager.groovy pipeline=PIPELINE1 scm=true labels=label1,label2 contexts=context1,context2</code></li><li><strong>Incorrect:</strong>  <code>hammer groovy deployPackager.groovy pipeline=PIPELINE1 scm=true --labels=label1,label2 --contexts=context1,context2</code>&#160;</li></ul></li>
                </ul>
            </div>
        </div>
        <p><strong>OUTPUT OPTIONS</strong>
        </p>
        <ul>
            <li><code>--log &lt;dirname&gt;&#160;</code>- <span style="color: rgb(51,51,51);">Log directory.&#160;</span><span style="color: rgb(51,51,51);">Default location is&#160; <code>&lt;project-directory&gt;/Logs</code>.&#160;</span></li>
            <li><span><span><code><code>--report &lt;dirname&gt;</code></code>&#160;- Reports directory. Default location is&#160;<code><span style="color: rgb(51,51,51);">&lt;project-directory&gt;/Reports</span></code>&#160;</span></span>
            </li>
        </ul>
        <p><strong>OPTIONS</strong>
        </p>
        <ul>
            <li><code>dbdef=&lt;dbdef-name&gt;&#160;</code>- Name of the DbDef to use. When this option is used, changesets use contexts set in the DbDef along with any specified by the <code>contexts</code> option. Use when you are working with feature merges.&#160;</li>
            <li><span><code>pipeline=&lt;pipeline-name&gt;</code> - Name of the pipeline to use. Changes are deployed into first dbdef in the pipeline, which should be the REF database. Use when you are working with pipeline merges.&#160;</span>
            </li>
            <li><code>manifest=</code>&#160;- Specify a directory name or a JSON file to use as the source of SQL scripts.&#160;&#160;A <code>deploymentPackager.properties</code> file must be present at the project root directory. It specifies the&#160;</li>
            <li><span style="font-family: monospace;">scm=true</span>&#160; - Get the SQL scripts to process from an SCM system.&#160; A <code>deploymentPackager.properties</code> file must be present at the project root directory. It specifies how to access the SCM system.&#160;</li>
            <li><code>labels</code> - Comma-separated list of labels to apply to the changesets created. Expressions are not supported.</li>
            <li><code>contexts</code> - Comma-separated list of contexts to apply to the changesets created.&#160; Expressions are not supported.</li>
            <li><code>showDebug</code> - Default false. Set to true to get additional logging messages.&#160;&#160;</li>
            <li><code>invalidsAction=&lt;warn|fail&gt;</code> - Default <code>warning.</code>&#160;Pass this value to the deploy commands used during packaging. Determines what to do in response to testing for invalid stored logic. If <code>warn</code>, then failed tests print a warning message and deployment continuse. If <code>fail</code>, then print an error message and halt deployment and packaging.&#160;</li>
            <li><code>dbdefDeploy</code> - Default true. Set to false to disable forecast and deploy.&#160;</li>
            <li><code>commitPrefix="&lt;text&gt;"</code> -&#160;<span style="color: rgb(23,43,77);">Message to be placed at the beginning of the commit comment when Deployment Packager commits changes to an SCM system. Intended for use as a hook to trigger automatic actions by the SCM system.</span></li>
            <li><code>preview</code> - Include this option to generate a report of what would happen. No packaging or deployments are actually performed.&#160;<span style="color: rgb(0,0,0);">When you are managing database backups manually (<code>databaseBackupMode=on_demand</code>), using this option with <code>createDatabaseBackup=true</code> causes the database to be backed up upon successful preview</span>.&#160;</li>
            <li><span style="font-family: monospace;">createDatabaseBackup=&lt;true|false&gt;&#160;</span>- Create a new database backup. Valid only when <code>databaseBackupMode=on_demand</code> in <code>deployPackager.properties</code>. Used when you are managing database backups manually rather than allowing Deployment Packager to back up the database during every deployment. Use with <code>preview</code> to perform a database backup and do nothing else. See <a href="Managing_Database_Backup_and_Restore.htm" rel="nofollow">Managing Database Backup and Restore</a>.&#160;</li>
            <li><code>invalidsAction=&lt;warn|fail&gt;</code> - Override the storedLogicValidityAction project setting for this deploy. Default behavior is 'warn' which will cause the Deploy to flag deployment as warning for new invalid stored logic. 'fail' will mark the deployment as failure.</li>
            <li><code>cleanup</code>&#160;- Cleanup mode will release locks on the tracking table, clean up any utility objects created in the database as part of packaging and restore the RefDB to it's last known good state. Use it when a Packager job was prematurely terminated.</li>
        </ul>
        <p><strong>DATICAL SERVICE OPTIONS</strong>
        </p>
        <p>Use the following options to specify a project stored in Datical Service. Place them as hammer command options, before the <code>groovy</code> keyword.&#160;</p>
        <ul>
            <li><code>daticalServer</code>- the hostname or IP address where the Datical Service is installed.&#160;<span style="color: rgb(51,51,51);">Note that they are not interchangeable. The one to use is established when you run Initialization Wizard during installation.</span></li>
            <li><code>daticalUsername</code>- user name defined in the Datical Service. Use the DATICAL_PASSWORD environment variable to provide the password.&#160;</li>
            <li>
                <p class="auto-cursor-target"><code>projectKey=&lt;projectRef&gt;</code>-<code>projectRef</code>is a project name or project key</p>
            </li>
        </ul>
        <p><strong>NOTES</strong>
        </p>
        <p style="text-align: left;margin-left: 30.0px;">The Deployment Packager gets SQL files to process from one of two sources:</p>
        <ul>
            <li style="margin-left: 30.0px;text-align: left;">SCM system ("SCM mode"). Use the <code>deployPackager.properties</code> file to specify how to access a repository through a source control management system.&#160; &#160;</li>
            <li style="text-align: left;margin-left: 30.0px;">Manifest file ("manifest mode"). Specify either a directory of JSON files or a single JSON file to use.&#160;</li>
        </ul>
        <p style="margin-left: 30.0px;">Merge methodologies in SCM mode:</p>
        <ul>
            <li style="margin-left: 30.0px;">Feature merge - used when development teams use feature branches in source control.&#160; Features are then merged into a release pipeline.&#160;</li>
            <li style="margin-left: 30.0px;">Pipeline merge - used when development teams work on multiple releases at a time. A pipeline is defined for each release. Merges are performed across the pipelines. For example, a change introduced into the pipeline for the September release can then be merged into the pipeline for the October release.&#160;</li>
        </ul>
        <p><strong>EXAMPLES</strong>
        </p>
        <p style="margin-left: 30.0px;">Datical DB - See&#160;<a href="Running_Deployment_Packager.htm" rel="nofollow">Running Deployment Packager</a> (CLI examples)</p>
        <p style="margin-left: 30.0px;">Datical Service - See&#160;<a href="Using_Datical_DB_Hammer_Commands_with_Projects_in_Datical_Service.htm" rel="nofollow">Using Datical DB Hammer Commands with Projects in Datical Service</a> (Packaging Example)</p>
        <p><strong>OUTPUT</strong>
        </p>
        <p style="margin-left: 30.0px;">Different output is produced depending on whether packaging succeeds or fails.&#160;</p>
        <p style="margin-left: 30.0px;">During the process you will see multiple deploy operations recorded in the log on the way to a completed change deployment.&#160;</p>
        <p style="margin-left: 30.0px;">See <a href="Output_from_Deployment_Packager.htm" rel="nofollow">Output from Deployment Packager</a>.</p>
        <p style="margin-left: 30.0px;">
            <br />
        </p>
        <p style="margin-left: 30.0px;">
            <br />
        </p>
    </body>
</html>