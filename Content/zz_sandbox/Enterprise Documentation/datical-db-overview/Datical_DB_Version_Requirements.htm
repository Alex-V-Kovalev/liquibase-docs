<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Datical DB Version Requirements</h1>
        <div class="toc-macro client-side-toc-macro  conf-macro output-block">
        </div>
        <h1 id="DaticalDBVersionRequirements-DaticalDB">Datical DB</h1>
        <h2 id="DaticalDBVersionRequirements-SameDaticalDBVersionforAllUsersWorkingonaReleasePipeline">Same Datical DB Version for All Users Working on a Release Pipeline</h2>
        <p>For any given release pipeline, all users that deploy changes to the pipeline should use the same version of Liquibase Enterprise/Datical DB. This requirement applies to all users:</p>
        <ul>
            <li>
                <p>Individual Users - Users have Datical DB installed on their system. They use the GUI client or CLI to perform operations (package, deploy, status, rollback). </p>
            </li>
            <li>
                <p>Automation - An automation solution (like Jenkins) uses a Datical DB installation. The automation system runs Datical DB CLI commands to perform operations (package, deploy, status, rollback). </p>
            </li>
        </ul>
        <h2 id="DaticalDBVersionRequirements-SameDatabaseVersionforAllDatabasesinaReleasePipeline">Same Database Version for All Databases in a Release Pipeline</h2>
        <p>It is best practice to have all dbDef steps in a release pipeline running the same version of the database platform. The version of the database should be consistent to provide a consistent experience when the same changes are deployed to each dbDef step in the pipeline.</p>
        <p>If you need to use different database versions, ensure that the REF database is running the database version that matches the earliest database version in the pipeline. This way, you can avoid the situation when REF is a newer database version where changesets are created with newer attributes that may not be recognized by the earlier database versions in your pipeline. </p>
        <div class="confluence-information-macro confluence-information-macro-information conf-macro output-block">
            <div class="confluence-information-macro-body">
                <p>Each step in a project represents a stage in the release pipeline. A step in Liquibase Enterprise software is also known as a dbDef, a connection, a target, or an environment.</p>
            </div>
        </div>
        <h1 id="DaticalDBVersionRequirements-DMC">DMC</h1>
        <h2 id="DaticalDBVersionRequirements-DaticalDB7.xandDMC(DeploymentMonitoringConsole)VersionMatching">Datical DB 7.x and DMC (Deployment Monitoring Console) Version Matching</h2>
        <p>DMC (Deployment Monitoring Console) 7.x versions typically need to match your Liquibase Enterprise/Datical DB 7.x version. There are a few exceptions for versions where there was a Liquibase Enterprise/Datical DB release but no correlating release for DMC. Please see the “Datical DB and Deployment Monitoring Console Compatability Matrix” here: <a class="external-link" href="https://dmc.datical.com/release-notes/release-notes-home.htm" rel="nofollow">https://dmc.datical.com/release-notes/release-notes-home.htm</a></p>
        <h2 id="DaticalDBVersionRequirements-DaticalDB5.x/6.xandDaticalServiceVersionMatching">Datical DB 5.x/6.x and Datical Service Version Matching</h2>
        <p>Datical Service 5.x/6.x includes an optional internal installation of Datical DB that is run by an internal Jenkins client. If you use Datical Service and also use the internal Jenkins Client option, you need to use the same version of Datical DB and Datical Service. However, if you do NOT use the Internal Jenkins Client you can run Datical DB 6.17 with Datical Service versions 5.8 to 6.17. Datical Service versions 5.x/6.x have been deprecated.</p>
        <p />
        <p />
    </body>
</html>