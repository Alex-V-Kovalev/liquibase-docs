<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1>Developer Workflows: Managing Changesets During Development and Test</h1>
        <p />
        <ul class="childpages-macro conf-macro output-block">
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Best_Practices_for_Developer_Workflows.htm">Best Practices for Developer Workflows</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Effects_During_Merges.htm">Effects During Merges</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Path_and_File_Attributes_for_Changesets.htm">Path and File Attributes for Changesets</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Abandoning_and_Restoring_a_Changeset__ignore_and_unignore.htm">Abandoning and Restoring a Changeset: ignore and unignore</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Changeset_Versioning__version_and_versionStrategy.htm">Changeset Versioning: version and versionStrategy</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Cleaning_Up_Deployed_Changesets__cleanup.htm">Cleaning Up Deployed Changesets: cleanup</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Replacing_Deployed_Changesets__replace.htm">Replacing Deployed Changesets: replace</a>
            </li>
            <li><a href="developer-workflows-manage-changesets-during-development-and-test/Rollback_Script_Handling.htm">Rollback Script Handling</a>
            </li>
        </ul>
        <h1 id="DeveloperWorkflows:ManagingChangesetsDuringDevelopmentandTest-Overview">Overview</h1>
        <p>The normal flow of deployment goes through stages. Depending on your environment, you may have more or fewer stages.&#160;</p>
        <p>Development &gt; Test &gt; Production</p>
        <h2 id="DeveloperWorkflows:ManagingChangesetsDuringDevelopmentandTest-DeveloperWorkflow">Developer Workflow</h2>
        <p>During development and test you may find problems with the original SQL scripts that were packaged and deployed to test. A failed test might indicate a need to remove or replace changesets that were deployed to Test and make adjustments in the Development environment. These adjustments might require the developer to:</p>
        <ul>
            <li><strong>Ignore a changeset</strong> -&#160;Abandon changeset in place and prevent it from being deployed further. &#160;If needed, you can recover it (unignore) later.&#160;</li>
            <li><strong>Clean up&#160; a previously deployed changeset</strong> - Ignore deployed changeset, create changesets to clean up any changes that were created.</li>
            <li><strong>Replace a previously deployed changeset</strong> - Replace the changes in a changeset with other changes. This usually implies running a cleanup first.</li>
            <li><strong>Use versions with changesets</strong> - Deploy only the latest version of a changeset. This capability is intended for use with programmatic parts of the database (stored logic).&#160;</li>
        </ul>
        <p>To enable this capabilty, new changeset attributes are added to all changesets generated from a SQL script.&#160;</p>
        <h2 id="DeveloperWorkflows:ManagingChangesetsDuringDevelopmentandTest-ComparisontoRollback">Comparison to Rollback</h2>
        <p>The normal release workflow allows you to deploy and roll back changesets throughout a project pipeline. Rollbacks can be automatic for some changes or be performed by custom rollback scripts you supply. See&#160;<a href="../../datical-operations-moving-changes-through-the-release-pipeline/Rolling_Back_Changes.htm" rel="nofollow">Rolling Back Changes</a>.&#160;</p>
        <p>However, the development workflow is for making changes to the changesets (and other changesets they affect).&#160; When you use the -ignore, -cleanup, and -replace scripts, they mark the original changesets so that they are no longer deployed. Changes are anticipated at these stages in a pipeline.&#160; They are not expected in later stages.&#160;</p>
        <p>See&#160;<a href="developer-workflows-manage-changesets-during-development-and-test/Rollback_Script_Handling.htm">Rollback Script Handling</a> for more information on how to work with existing rollback scripts in a development workflow.&#160;</p>
        <h2 id="DeveloperWorkflows:ManagingChangesetsDuringDevelopmentandTest-Example:ignoringadeployedchangeset.">Example: ignoring a deployed changeset.&#160;</h2>
        <p>To signal a change, you create a special file using the same base name as the original SQL script, apply a suffix (for example, -ignore), and place it in the same directory where you placed the original file.&#160;</p>
        <ul>
            <li><code>invoice_columns.sql</code>
            </li>
            <li><code>invoice_columns-ignore.sql or invoice_columns_ignore.sql</code>
            </li>
        </ul>
        <p>When <code>invoice_columns-ignore.sql or invoice_columns_ignore.sql</code> is processed, the <code>ignore</code> attribute is set on all of the original changesets produced by <code>invoice_columns.sql</code>.&#160; The changesets are no longer deployed.&#160;</p>
        <div class="confluence-information-macro confluence-information-macro-note conf-macro output-block">
            <div class="confluence-information-macro-body">
                <p>Do not use more than one suffix when working in a development workflow (-ignore, -unignore, -replace, -cleanup, -rollback). For example, when you update a <code>myscript-rollback.sql or myscript_rollback.sql</code> file, you update it in place. Do not create a <code>myscript-rollback-replace</code> script.&#160;It causes an error during packaging.&#160;&#160;</p>
            </div>
        </div>
        <div class="confluence-information-macro confluence-information-macro-note conf-macro output-block">
            <div class="confluence-information-macro-body">
                <h4 id="DeveloperWorkflows:ManagingChangesetsDuringDevelopmentandTest-Itisimportanttomaintainconsistentcaseinworkflowfilenames!">It is important to maintain consistent case in workflow file names!</h4>
                <p>When creating a new workflow file it is important to maintain file name casing that is consistent with the original file. <code>MYSCRIPT-ignore.sql</code> will not match&#160;<code>myscript.sql</code>.</p>
                <p>If you are using git, you may have to run the following command to configure your repository to enforce consistent file name case:&#160;<strong><code><span style="color: rgb(23,43,77);">git config core.ignorecase false</span></code></strong></p>
            </div>
        </div>
    </body>
</html>