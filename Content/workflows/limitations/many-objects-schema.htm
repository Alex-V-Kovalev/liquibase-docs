<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/workflows/limitations/many-objects-schema.html" />
        <meta name="description" content="This page explains solutions to performance limitations of Liquibase database inspection commands when using a database schema with a large number of objects." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Using <MadCap:variable name="General.Liquibase" /> with Many Objects in a Schema</h1>
        <p>When your database contains a very large number of complex objects, <MadCap:variable name="General.Liquibase" /> may not be able to successfully execute database inspection use-cases, such as drift detection. This includes commands like <code><MadCap:xref href="../../commands/inspection/diff.htm">diff</MadCap:xref></code>, <code><MadCap:xref href="../../commands/inspection/diff-changelog.html">diff-changelog</MadCap:xref></code>, <code><MadCap:xref href="../../commands/inspection/generate-changelog.html">generate-changelog</MadCap:xref></code>, and <code><MadCap:xref href="../../commands/inspection/snapshot.html">snapshot</MadCap:xref></code>.</p>
        <h2>Causes</h2>
        <p>You may experience <MadCap:variable name="General.Liquibase" /> execution failures if you run resource-intensive commands on a database containing several thousand objects. This is because <MadCap:variable name="General.Liquibase" /> commands like <code>diff</code> store some database information in system memory. If your database is very large, the memory heap reaches capacity before <MadCap:variable name="General.Liquibase" /> can finish running the command.</p>
        <p>However, the exact limit depends on the quantity, type, and complexity of objects in your database. It also depends on your database's engine technology, custom schemas, and your machine's processing power and RAM (random access memory).</p>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">You may never experience these performance limitations. To estimate the point they could impact your workflow, create a test database with a large, complex schema. Then run <MadCap:variable name="General.Liquibase" /> commands and observe your database's behavior.</p>
        <h2>Solutions</h2>
        <h3>Java Virtual Machine settings</h3>
        <p>The Java Virtual Machine (JVM) enables your computer to run Java programs like <MadCap:variable name="General.Liquibase" />. You can use the <MadCap:xref href="../../concepts/connections/java-opts-environment-variable.htm">JAVA_OPTS Environment Variable</MadCap:xref> to modify <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html">JVM settings</a> that affect <MadCap:variable name="General.Liquibase" /> commands.</p>
        <p>To increase the <b>maximum memory heap size</b> of the JVM, specify a new value for the JVM option <code>-Xmx</code>. This controls memory managed by the JVM garbage collector. Use the format <code>-Xmx&lt;value&gt;&lt;unit&gt;</code>. For example, the following command sets maximum heap memory to 1 GB:</p>
        <ul>
            <li>Mac/Linux syntax:</li><pre><code class="language-shell">JAVA_OPTS="-Xmx1g" liquibase generate-changelog --changelog-file=newChangeLog.xml</code></pre>
            <li>Windows syntax:</li><pre><code class="language-shell">set JAVA_OPTS="-Xmx1g" liquibase generate-changelog --changelog-file=newChangeLog.xml</code></pre>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">In addition to <code>-Xmx</code> (maximum heap size), you may also want to try using <code>-Xmn</code> (initial and maximum heap size) and <code>-Xmn</code> (minimum and initial heap size). See <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BABHDABI">Java: Non-Standard Options</a>.</p>
        <p>For more information, see the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html">Java Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide</a>.</p>
        <p class="warning" MadCap:autonum="&lt;b&gt;Warning: &lt;/b&gt;">If you set the JVM's maximum heap memory usage too high, <MadCap:variable name="General.Liquibase" /> may compete for resources with other applications on your system.</p>
        <h3>Alternative solutions</h3>
        <p>If modifying JVM settings still cannot resolve the issue, there are a few other potential solutions:</p>
        <ul>
            <li>Reduce the complexity of objects in your schema</li>
            <li>Split objects across multiple database schemas to minimize schema size</li>
            <li>Upgrade system hardware to support memory-intensive applications</li>
        </ul>
    </body>
</html>