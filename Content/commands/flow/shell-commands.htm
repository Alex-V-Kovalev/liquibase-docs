<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <meta rel="canonical" href="https://docs.liquibase.com/commands/flow/shell-commands.html" />
        <meta name="description" content="Reference information and use cases for shell commands in the Flow File." />
    </head>
    <body>
        <h1>Shell Commands <MadCap:snippetText src="../../Resources/Snippets/images/.ver_icon_size_pro.flsnp" /></h1>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This feature is available in version 4.17 and later.</p>
        <p>Using Shell Commands in a Flow file allows you to access the power of your shell from within a <MadCap:variable name="General.Liquibase" /> operation. You can join multiple commands in sequence, or redirect output to files for later processing which can be done via cat, grep, or other methods.</p>
        <p>Read more: <MadCap:xref href="flow.htm">flow</MadCap:xref></p>
        <h2>Shell Command implementation example</h2>
        <p>First you want to ensure that the environment variables are set correctly in your system so they can be read in the Flow file.</p>
        <p>In the following example, we show two ways to use a shell command to print the environment variables that begin with<code>'LIQUIBASE_'</code>. The commented out example uses the 'bash-c...' method to invoke a bash shell directly. You could use a similar method to invoke cmd or gitbash, etc depending on your OS&#160;and system configuration. The other method includes using active command with echo, env, and grep directly. You should experiment with your system to see which works best for you.<br /></p>
        <p>Note that the title 'Printing LIQUIBASE_* env vars' is echoed and &amp;&amp; env | grep 'LIQUIBASE_"" is chained.</p>
        <p>You will also notice that the <code>env</code> output is directed into the <code>grep 'Liquibase_'</code> command:</p><pre><code class="language-text">env | grep 'LIQUIBASE_'</code></pre>
        <p>This allows you to only print the environment variables that match <code>'LIQUIBASE_'</code></p>
        <p>Chained Command Example in Flow file:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">stages:
	chainedCommandExample:
		actions:
				-type: shell
					#command: bash -c "echo "Printing Liquibase_* env vars' &amp;&amp; env | grep "LIQUIBASE_'"
					command: echo 'Printing LIQUIBASE_* env vars' &amp;&amp; env |grep 'LIQUIBASE_'
</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>Type the following in the CLI to verify the expected output of this shell command example reading environment variables:</p><pre><code class="language-text">echo 'Printing LIQUIBASE_* env vars' &amp;&amp; env | grep 'LIQUIBASE_'</code></pre>
        <p>The results show the <code>env</code> command directed into grep prints only <code>LIQUIBASE_</code> items.</p>
        <h2>Command Format</h2>
        <p>The correct command format within a Flow file is essential to run <code>liquibase flow</code> successfully.</p>
        <p>When using single or chained commands, you can  include <code>bash -c</code> in front of the double quoted command <code>"echo 'Printing LIQUIBASE_* env vars' &amp;&amp; env | grep 'LIQUIBASE_'"</code> which tells the machine to run a completely new shell. If you need to quote something inside of the command, use single quotes to distinguish the inside from the outside of the shell command in double quotes.</p>
        <p>Chain command example:</p><pre><code class="language-text">bash -c "echo "Printing Liquibase_* env vars' &amp;amp;&amp;amp; env | grep "LIQUIBASE_'"</code></pre>
        <p>Once that is added to the Flow file, run the liquibase flow command.</p><pre xml:space="preserve"><code class="language-text">liquibase flow --flow-file=flows/&lt;path/to/your/flowfile&gt;.yaml</code></pre>
        <p>The shell bash commits successfully and all environment variables display as intended.</p>
        <h2>Shell command options:</h2>
        <ul>
            <li>Shell commands that utilize an = sign can be applied in flow files. <br /></li>
            <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">One of the many ways to use this feature is by exporting ENV&#160;vars from within a flow command to use later.<br /><br />Example:<br /><code>- type: shell<br />command: bash -c "UNDEPLOYED=$(grep -c 'have not been applied' './${PROJNAME}/${STATUSFILE}') &amp;&amp; echo $UNDEPLOYED"</code><br /></p>
            <li>You can specify the shell interpreter to execute the shell command. <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">This can include but is not limited to bash, cmd, powershell, etc.<br /><br /><code>- type: shell<br />command: bash -c "UNDEPLOYED=$(grep -c 'have not been applied' './${PROJNAME}/${STATUSFILE}') &amp;&amp; echo $UNDEPLOYED"</code></p></li>
            <li>Multi-line shell commands can be applied in flow files. This can be applied by using the | character to begin the command.<br /><p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;"><br /><code>- type: shell<br />command: |<br />UNDEPLOYED=$(grep -c 'have been applied' '/tmp/status.txt') <br />echo $UNDEPLOYED</code></p></li>
        </ul>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="if-conditionals.htm">if conditionals</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="variables.htm">variables and include feature</MadCap:xref>
            </li>
        </ul>
    </body>
</html>