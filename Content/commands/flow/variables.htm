<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/flow/variables.html" />
        <meta name="description" content="Reference content on using variables in a Flow File." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Flow Variables</h1>
        <p>
            <img src="../../Z_Resources/Images/Diagrams/flowfile.png" alt="Structure of variable definitions, flow file stages, and nested actions that call on variables." style="width: 35%; float:right" />
        </p>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.17.0+, you can define <b>variables</b> as key-value pairs to use in one or more stages of your <a href="home.htm">flow files</a>. When you run the <code><MadCap:xref href="flow.htm">flow</MadCap:xref></code> command, <MadCap:variable name="General.Liquibase" /> substitutes the variable names for their values.</p>
        <p>You can define variables in three ways:</p>
        <ul>
            <li>As <b>global variables</b> in the flow file's header section</li>
            <li>As <b>stage variables</b> within individual stages (overrides global variables)</li>
            <li>Included in an <b>external YAML&#160;file</b> that you reference in the flow file's header section</li>
        </ul>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.24.0+, <MadCap:variable name="General.Liquibase" /> lets flow files inherit variables from other flow files that you call on. This lets you pass variables through multiple nested layers of flow files.</p>
        <p>Stage variables have the highest precedence, followed by included variables, then global variables, and then variables inherited from another flow file.</p>
        <h2>Uses</h2>
        <p>You can define a variable once but reuse it many times in different situations in your flow file. This provides flexibility and reduces code duplication. For example, variables may be useful to efficiently run multiple kinds of commands that contain the same file, directory, or other string.</p>
        <p>It is a best practice to use global variables for things that can apply to your whole flow file, and stage variables for things that only apply to specific stages. Included variables are best for things that apply to multiple flow files.</p>
        <p>You can also check the values of variables in <MadCap:xref href="conditionals.htm">Flow Conditionals</MadCap:xref> to dynamically run code in your flow files.</p>
        <p>When you call variables you've previously defined, you can specify a default value for <MadCap:variable name="General.Liquibase" /> to use if it doesn't receive one. For example, you could use this to specify optional command arguments (such as <a href="../../concepts/changelogs/attributes/contexts.html">contexts</a> and <a href="../../concepts/changelogs/attributes/labels.html">labels</a>) as <code class="language-text">NULL</code> if not explicitly specified in your definition.</p>
        <h2>Syntax</h2>
        <h3>Define variables</h3>
        <p>Variable definitions always use the syntax <code class="language-text">key: "value"</code>. You must specify quotation marks around the value.</p>
        <p>You can define <b>included variables</b> in an external YAML file, in this case <code class="language-text">liquibase.flowvariables.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">projectName: "MyFlowProject"
thisDate: "2024-05-12T15-00-20"</code></pre>
        <p>You can define <b>global variables</b> at the top of your flow file, in this case <code class="language-text">liquibase.myflowfile.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  statusFile: "status.txt"
  updateLog: "update.log"
  historyFile: "history.txt"</code></pre>
        <p>You can define <b>stage variables</b> within a particular stage, in this case called <code class="language-text">stage-status</code>:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  stage-status:
    stageVariables:
      statusFile: "status.txt"</code></pre>
        <h3>Use variables</h3>
        <p>Variable calls in your flow files use the following syntax:</p>
        <ul>
            <li><b>Included</b> variables: <code>${namespace.variableKey}</code></li>
            <li><b>Global and stage</b> variables: <code>${variableKey}</code></li>
        </ul>
        <p>For example, we can run the <code><MadCap:xref href="../change-tracking/status.htm">status</MadCap:xref></code> command in a flow file using included, global, and stage variables. In this example, the included variables all have the namespace <code class="language-text">flowVars</code> and reference variables we previously defined in the file <code class="language-text">liquibase.flowvariables.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">include:
  flowVars: liquibase.flowvariables.yaml

globalVariables:
  directoryName: "./${flowVars.projectName}_${flowVars.thisDate}"
  statusFile: "status.txt"

stages:
  stage-status:

    stageVariables:
      verboseState: "true"

    actions:
      - type: liquibase
        command: status
        globalArgs: {output-file: "${directoryName}/${statusFile}"}
        cmdArgs: {verbose: "${verboseState}"</code></pre>
        <h3>Default values</h3>
        <p>After you define your variables, you can set <b>default values</b> whenever you call them elsewhere in your flow file.</p>
        <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;"><code>CHANGELOG_FILE: "${changelogFile:-null}"</code>
        </p>
        <p>In this example, if the user passes a value to <code>${changelogFile}</code>, <MadCap:variable name="General.Liquibase" /> sets <code>CHANGELOG_FILE</code> to that value. Otherwise, <MadCap:variable name="General.Liquibase" /> sets the variable <code>CHANGELOG_FILE</code> to null by default.</p>
        <p>If you define a default value for a variable, that default is inherited by any nested flow files that call on the parent.</p>
        <h3>System environment variables</h3>
        <p>You can substitute the values of system environment variables like <code class="language-text">LIQUIBASE_HOME</code> in your flow file. This allows you to change environment variables as desired without changing the flow file itself. The syntax is the same as substituting other variables. For example:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  systemEnvars:
    actions:
      - type: shell
        command: echo "Running Liquibase from ${LIQUIBASE_HOME}"</code></pre>
        <h3>Empty strings</h3>
        <p>You can specify the empty string as the value of a variable. For example, if you want to run all <MadCap:variable name="General.changeset" />s in your <MadCap:variable name="General.changelog" /> regardless of their contexts/labels:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  default:

    stageVariables:
      labelNames: ""

    actions:
      - type: liquibase
        command: update
        cmdArgs: {labels: "${labelNames}"}</code></pre>
        <h2 MadCap:conditions="exclude.future-4-27-1">Property substitution with full YAML&#160;strings</h2>
        <p MadCap:conditions="exclude.future-4-27-1">In <MadCap:variable name="General.Liquibase" /> 4.28.0 and later, you can also use variables to dynamically expand into full YAML&#160;strings during property substitution. The YAML&#160;strings you insert can also contain other variables, which can expand into more YAML&#160;strings.</p>
        <p MadCap:conditions="exclude.future-4-27-1">For example, this may be useful if you want multiple stages of a single flow file to run a command, but you want to substitute different variables to modify that command in different stages of a flow file.</p><pre xml:space="preserve" MadCap:conditions="exclude.future-4-27-1"><code class="language-yaml">globalVariables:
  COMMAND_ARGS: "changelogfile: './liquibase.${STAGE_CHANGELOG}.yaml'"

## Start of the stages.
stages:

  ## Another stage.
  stage01:

    ## set up vars for property substitution in THIS stage only
    stageVariables:
      STAGE_CHANGELOG: "stage01"

    actions:
      #
      # Do an update command
      #
      - type: liquibase
        command: update
        cmdArgs: {"${COMMAND_ARGS}"}
        ## this expands to: cmdArgs: { changelogfile: './liquibase.${STAGE_CHANGELOG}.yaml'}
        ## which expands to: cmdArgs: { changelogfile: './liquibase.stage01.yaml'</code></pre>
        <h2>Example Flow File</h2>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#flow_variables_example" id="label_flow_variables_example" class="js-tablist__link"><code>liquibase.flowvariables.yaml</code></a>
                </li>
                <li class="js-tablist__item"><a href="#advanced_flow_file_example" id="label_advanced_flow_file_example" class="js-tablist__link"><code>liquibase.advanced.flowfile.yaml</code></a>
                </li>
                <li class="js-tablist__item"><a href="#end_stage_example" id="label_end_stage_example" class="js-tablist__link"><code>liquibase.endstage.flow</code></a>
                </li>
            </ul>
            <div id="flow_variables_example" class="js-tabcontent">
                <p>Defines variables that you can use in other flow files.</p><pre xml:space="preserve"><code class="language-yaml">##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This example yaml file of key:value variables is injected into examples/liquibase.advanced.flow file
## using the "include" ability. It will be given the namespace "DATES" but could be given any namespace.

PROJNAME: "MyFlowProj"
THISDATE: "2022-11-28T15-00-20"</code></pre>
            </div>
            <div id="advanced_flow_file_example" class="js-tabcontent">
                <p>Includes cmdArgs, globalArgs, and a referenced include file (YAML)</p><pre xml:space="preserve"><code class="language-yaml">##########           LIQUIBASE FLOW FILE               ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This is an advanced example flowfile, compared to the other sample at examples/liquibase.flowfile.yaml
#### HOW TO USE THIS FILE:
#### example for CLI: liquibase flow --flow-file=liquibase.advanced.flowfile.yaml
#### example for ENV Var: LIQUIBASE_FLOW_FLOW_FILE=liquibase.advanced.flowfile.yaml

## Advanced options show in this file include:
#### non-default name of 'liquibase.advanced.flowfile.yaml' (use by setting flowfile property to this name)
#### use of 'include' to inject namespaced yaml files of key: val variables
#### use of globalVariables and stageVariables
#### use of globalArgs and cmdArgs
#### use of property substitution
#### use of a nested flowfile (in this case in the endStage, but could be elsewhere)
#### use of if: conditional which allows a -type: shell or -type: liquibase command to run
###### In the example below, we set an environment variable LIQUIBASE_CURRENT_TARGET, such as 'export LIQUIBASE_CURRENT_TARGET=dev'
###### This could be determined dynamically, of course, from the build tools, bu tthis is simpler for this example "if:" conditional
#### use of shell commands in a -type: shell block.
######  command: bash -c "the shell command || and its chained commands &amp;&amp; go in the quotes"
########
#### POTENTIAL use of environment variables:
######  DATETIME STAMP
######## In this file, you could replace ${FLOWVARS.THISDATE} with an env var, such as ${LIQUIBASE_THISDATE} set via .bash_profile
######## for example 'export LIQUIBASE_THISDATE=$( date +'%Y-%m-%dT%H-%M-%S' )'

## Bring in and namespace an external file with yaml 'key: val' pairs for use in this file
## The variables will be used as ${namespace.variablename}, seen in this example as ${FLOWVARS.PROJNAME}
include:
  FLOWVARS: liquibase.flowvariables.yaml

## Set up some global variables for property substitution in ANY stage
globalVariables:
  DIRNAME: "./${FLOWVARS.PROJNAME}_${FLOWVARS.THISDATE}"
  STATUSFILE: "status.txt"
  UPDATELOG: "update.log"
  HISTORYFILE: "history.txt"

## Start of the stages.
stages:

  ## A prep stage. There can be more than one stage if desired.
  stage-prep:

    actions:
      - type: shell
        command: bash -c "mkdir -p ${DIRNAME}"

  ## Another stage.
  stage-dowork:

    ## set up vars for property substitution in THIS stage only
    stageVariables:

      VERBOSESTATE: TRUE

    actions:
      # Do a validate command
      - type: liquibase
        command: validate

      # Tell me what is pending a deployment
      - type: shell
        command: bash -c "liquibase --show-banner false --outputfile ./${DIRNAME}/${STATUSFILE} status --verbose ${VERBOSESTATE}"

          # This is the structured way to setup a liquibase command, if you dont want to run it as one 'bash -c' command
          #- type: liquibase
          #  command: status
          #  globalArgs:
          #    outputfile: "${DIRNAME}/${STATUSFILE}"
          #    showbanner: false
          #  cmdArgs: {verbose: "${VERBOSESTATE}"

      # And then save a version in detail, if env var LIQUIBASE_FILE_OUTPUT == 1
      - type: shell
        command: bash -c "echo 'LIQUIBASE_ env vars ' &amp;&amp; env | grep 'LIQUIBASE_' "

      - type: liquibase
        ## if this var LIQUIBASE_CURRENT_TARGET is "dev", then the updatesql will run
        if: "${LIQUIBASE_CURRENT_TARGET} == dev"
        command: updatesql
        globalArgs: {outputfile: "${DIRNAME}/${UPDATELOG}"}

      - type: shell
        ## if this var LIQUIBASE_CURRENT_TARGET is not "dev", then the message will be displayed
        if: "${LIQUIBASE_CURRENT_TARGET} != dev"
        command: echo "No output files created. Set env var LIQUIBASE_CURRENT_TARGET to dev to trigger file creation."

      # Quality Checks for changelog
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog}

      # Run update
      - type: liquibase
        command: update

      # Quality Checks for database
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: database}

      # Create a history file
      - type: liquibase
        command: history
        globalArgs: {outputfile: "${DIRNAME}/${HISTORYFILE}"}

## The endStage ALWAYS RUNS.
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file.

endStage:
  actions:
    - type: liquibase
      ## Notice this is a flow command in a flow file, and it called a 'nested' flowfile, which in this case lives in the same dir, but could be elsewhere
      command: flow
      cmdArgs: {flowfile: liquibase.endstage.flow}</code></pre>
            </div>
            <div id="end_stage_example" class="js-tabcontent">
                <p>In this example, we run some final commands in an <code>endStage</code> file. The <code>endStage</code> always runs, so you can use it for processes that you want to run after every deployment. For example, see the following example of content in <code>liquibase.endstage.flow</code>:</p><pre xml:space="preserve"><code class="language-yaml">##########           LIQUIBASE FLOW FILE               ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This example flowfile is called from the examples/liquibase.advanced.flowfile.yaml file
## While it could be run on its own, this file is designed to show that flow-files can be decomposed
## into separate files as makes sense for your use cases.

stages:
  cleanuptheDB:
    actions:

      # Clear out the database
      - type: liquibase
        command: dropAll

      # Check that database is empty by seeing what is ready to be deployed
      - type: liquibase
        command: status
        cmdArgs: {verbose: TRUE}

## The endStage ALWAYS RUNS. 
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file,
## as it has been deleted here in this liquibase.endStage.flow file.</code></pre>
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You can also keep all your actions in a single flow file. However,  using a main flow file to call on other flow files is a modular approach that can keep you organized.</p>
            </div>
        </div>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="conditionals.htm">Flow Conditionals</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="shell-commands.htm">Shell Commands</MadCap:xref>
            </li>
        </ul>
    </body>
</html>