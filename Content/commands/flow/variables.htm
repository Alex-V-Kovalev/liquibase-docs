<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/flow/variables.html" />
        <meta name="description" content="Reference content on using variables in a Flow File." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><code>variables</code> and <code>include</code> feature</h1>
        <p><MadCap:variable name="General.Liquibase" /> <a href="home.htm">flow files</a> can include variables from external YAML files and set them as globalVariables directly in the file. These variables are set up in the flow file's header section before you define a flow file's stages.</p>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/note/command-flow-version.flsnp" />
        <p>In <MadCap:variable name="General.Liquibase" /> 4.24.0+, variables you define in a flow file are shared across "nested" flow files and can be passed through multiple flow files.</p>
        <h2>Structure</h2>
        <p>
            <img src="../../Z_Resources/Images/Diagrams/flowfile.png" float="right" />
        </p>
        <h3>Default variable values</h3>
        <p>You can set default values for variables by setting the value after <code>:-</code>.  These can be set in global variables or stage variables.  With optional arguments in place such as labels or contexts, a Flow file will detect the null argument value and it won't pass an empty attribute in the command. </p>
        <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;"><code>CHANGELOG_FILE: "${changelogFile:-null}"</code>
        </p>
        <p>In this example, if the user passes a value to <code>${changelogFile}</code>, Liquibase sets <code>CHANGELOG_FILE</code> to that value. Otherwise, Liquibase sets the variable<code> CHANGELOG_FILE</code> to null by default.</p>
        <h2>globalVariables</h2>
        <p><code>globalVariables</code> must be defined at the top of the Flow File with the syntax shown in the example Flow File. Each Action specified in the Flow File can reference a <code>globalVariable</code> as a command argument. This saves you time and keeps your Flow File tidy.</p>
        <p>Define a global variable:</p><pre><code class="language-yaml">offlineRefUrl: "offline:postgres?snapshot=refSnapshot.json"</code></pre>
        <p>Use a global variable you have defined:</p><pre xml:space="preserve"><code class="language-yaml">cmdArgs: { url: "${offlineRefUrl}"}</code></pre>
        <h3>Reference System Environment Variables through globalVariables</h3>
        <p>globalVariables can reference System Environment Variables to provide values within a Flow file. Within the Flow file example below, notice that the command echoes <code>"Running Liquibase from ${LIQUIBASE_HOME}"</code>. This allows you to change environment variables as desired without changing the Flow file.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">&#160;Place the environment variable you want to reference between the parenthesis: <code>"Running Liquibase from ${INSERT_ENVIRONMENT_VARIABLE_HERE}"</code></p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">stages:
	systemEnvironmentVariableSample:
		actions:
		- type: shell
			command: echo "Running Liquibase from ${LIQUIBASE_HOME}"</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>stageVariables</h2>
        <p><code>stageVariables</code> work exactly like <code>globalVariables</code> except they are declared inside of each stage group. If you have the same variable declared as a <code>globalVariable</code>, the <code>stageVariables</code> are applied, not the <code>globalVariable</code>. For example, if you have a <MadCap:variable name="General.changelog" />&#160;<code>globalVariable</code> but need to specify a different <MadCap:variable name="General.changelog" />, you can apply that via a <code>stageVariable</code>. <code>stageVariables</code> always override <code>globalVariables</code>.</p>
        <p>All variables, especially labels and context, must be specified in the Flow File with quotations to operate properly. If you want to run all <MadCap:variable name="General.changeset" />s with or without labels, you must leave the label names quotes empty so you do not have to list all labels individually.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>Label Example 1</MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">Default:
    stageVariables:
      LABELNAMES: ""</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>Label Example 2</MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">#
# Run the update
#
- type: liquibase
  command: update
  cmdArgs: {labels: "${LABELNAMES}"}</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Include configured YAML files within a Flow File</h2>
        <p>Flow Files can include references to other YAML files with configuration by using the include section of the file. You need only create a variable name for the referenced YAML file and then reference the file title so that the Flow File can locate it.</p>
        <h3>The <code>include</code> variable should be in the following format:</h3><pre><code class="language-text">username: actual-Username</code></pre>
        <p>The key is <code>username</code> and the value is <code>actual-Username</code>. To use the values defined in the included file in the Flow File, you need to reference the namespace and the key. For example:</p><pre xml:space="preserve"><code class="language-yaml">cmdArgs: {username: "${username}"}</code></pre>
        <p>When the <code>flow</code> command executes, it will read the included file, locate the username key and substitute the value for that key into the <MadCap:variable name="General.Liquibase" /> action. In the case of the <code>key:value</code> example here, the substitution results in <code>${postgresNamespace.user}</code> becoming <code>actual-Username</code>. The <MadCap:variable name="General.Liquibase" /> action executes using <code>actual-Username</code> as the user property.</p>
        <h3>Example of Flow File include functionality:</h3><pre><code class="language-yaml">include:
- postgresNamespace: postgres-vars.yaml</code></pre>
        <p>To enable the functionality, you will then add the created variable name to the <code>cmdArgs</code> section or your <MadCap:variable name="General.changelog" />.</p><pre><code class="language-yaml">cmdArgs: { url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}</code></pre>
        <h2>Example Flow File</h2>
        <p>Includes cmdArgs, globalArgs, and a referenced include file (YAML)</p><pre xml:space="preserve"><code class="language-yaml">##########           LIQUIBASE FLOW FILE               ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This is an advanced example flowfile, compared to the other sample at examples/liquibase.flowfile.yaml
#### HOW TO USE THIS FILE:
#### example for CLI: liquibase flow --flow-file=liquibase.advanced.flowfile.yaml
#### example for ENV Var: LIQUIBASE_FLOW_FLOW_FILE=liquibase.advanced.flowfile.yaml

## Advanced options show in this file include:
#### non-default name of 'liquibase.advanced.flowfile.yaml' (use by setting flowfile property to this name)
#### use of 'include' to inject namespaced yaml files of key: val variables
#### use of globalVariables and stageVariables
#### use of globalArgs and cmdArgs
#### use of property substitution
#### use of a nested flowfile (in this case in the endStage, but could be elsewhere)
#### use of if: conditional which allows a -type: shell or -type: liquibase command to run
###### In the example below, we set an environment variable LIQUIBASE_CURRENT_TARGET, such as 'export LIQUIBASE_CURRENT_TARGET=dev'
###### This could be determined dynamically, of course, from the build tools, bu tthis is simpler for this example "if:" conditional
#### use of shell commands in a -type: shell block.
######  command: bash -c "the shell command || and its chained commands &amp;&amp; go in the quotes"
########
#### POTENTIAL use of environment variables:
######  DATETIME STAMP
######## In this file, you could replace ${FLOWVARS.THISDATE} with an env var, such as ${LIQUIBASE_THISDATE} set via .bash_profile
######## for example 'export LIQUIBASE_THISDATE=$( date +'%Y-%m-%dT%H-%M-%S' )'

## Bring in and namespace an external file with yaml 'key: val' pairs for use in this file
## The variables will be used as ${namespace.variablename}, seen in this example as ${FLOWVARS.PROJNAME}
include:
  FLOWVARS: liquibase.flowvariables.yaml

## Set up some global variables for property substitution in ANY stage
globalVariables:
  DIRNAME: "./${FLOWVARS.PROJNAME}_${FLOWVARS.THISDATE}"
  STATUSFILE: "status.txt"
  UPDATELOG: "update.log"
  HISTORYFILE: "history.txt"

## Start of the stages.
stages:

  ## A prep stage. There can be more than one stage if desired.
  stage-prep:

    actions:
      - type: shell
        command: bash -c "mkdir -p ${DIRNAME}"

  ## Another stage.
  stage-dowork:

    ## set up vars for property substitution in THIS stage only
    stageVariables:

      VERBOSESTATE: TRUE

    actions:
      # Do a validate command
      - type: liquibase
        command: validate

      # Tell me what is pending a deployment
      - type: shell
        command: bash -c "liquibase --show-banner false --outputfile ./${DIRNAME}/${STATUSFILE} status --verbose ${VERBOSESTATE}"

          # This is the structured way to setup a liquibase command, if you dont want to run it as one 'bash -c' command
          #- type: liquibase
          #  command: status
          #  globalArgs:
          #    outputfile: "${DIRNAME}/${STATUSFILE}"
          #    showbanner: false
          #  cmdArgs: {verbose: "${VERBOSESTATE}"

      # And then save a version in detail, if env var LIQUIBASE_FILE_OUTPUT == 1
      - type: shell
        command: bash -c "echo 'LIQUIBASE_ env vars ' &amp;&amp; env | grep 'LIQUIBASE_' "

      - type: liquibase
        ## if this var LIQUIBASE_CURRENT_TARGET is "dev", then the updatesql will run
        if: "${LIQUIBASE_CURRENT_TARGET} == dev"
        command: updatesql
        globalArgs: {outputfile: "${DIRNAME}/${UPDATELOG}"}

      - type: shell
        ## if this var LIQUIBASE_CURRENT_TARGET is not "dev", then the message will be displayed
        if: "${LIQUIBASE_CURRENT_TARGET} != dev"
        command: echo "No output files created. Set env var LIQUIBASE_CURRENT_TARGET to dev to trigger file creation."

      # Quality Checks for changelog
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog}

      # Run update
      - type: liquibase
        command: update

      # Quality Checks for database
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: database}

      # Create a history file
      - type: liquibase
        command: history
        globalArgs: {outputfile: "${DIRNAME}/${HISTORYFILE}"}

## The endStage ALWAYS RUNS.
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file.

endStage:
  actions:
    - type: liquibase
      ## Notice this is a flow command in a flow file, and it called a 'nested' flowfile, which in this case lives in the same dir, but could be elsewhere
      command: flow
      cmdArgs: {flowfile: liquibase.endstage.flow}</code></pre>
        <h3>Example <code>endStage</code> Flow File</h3>
        <p>In this example, we run some final commands in an <code>endStage</code> file. The <code>endStage</code> always runs, so you can use it for processes that you want to run after every deployment. For example, see the following example of content in <code>liquibase.endstage.flow</code>:</p><pre xml:space="preserve"><code class="language-yaml">##########           LIQUIBASE FLOW FILE               ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This example flowfile is called from the examples/liquibase.advanced.flowfile.yaml file
## While it could be run on its own, this file is designed to show that flow-files can be decomposed
## into separate files as makes sense for your use cases.

stages:
  cleanuptheDB:
    actions:

      # Clear out the database
      - type: liquibase
        command: dropAll

      # Check that database is empty by seeing what is ready to be deployed
      - type: liquibase
        command: status
        cmdArgs: {verbose: TRUE}

## The endStage ALWAYS RUNS. 
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file,
## as it has been deleted here in this liquibase.endStage.flow file.</code></pre>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You can also keep all your actions in a single flow file. However,  using a main flow file to call on other flow files is a modular approach that can keep you organized.</p>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="if-conditionals.htm">if conditionals</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="shell-commands.htm">Shell Commands</MadCap:xref>
            </li>
        </ul>
    </body>
</html>