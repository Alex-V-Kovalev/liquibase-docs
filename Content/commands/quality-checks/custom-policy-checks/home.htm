<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/quality-checks/custom-policy-checks/home.html" />
        <meta name="description" content="Custom Policy Checks enable the creation of any kind of check that matches your needs via python scripts. This feature expands the Liquibase checks horizon and allows all Pro users who write Python scripts to create any check for the workflow at hand." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Custom Policy Checks</h1>
        <p>Custom Policy Checks allow you to enforce compliance for a wide array of security, code standards, data quality, and other policies using Python scripts. This feature expands the capabilities of <MadCap:xref href="../home.htm">Quality Checks</MadCap:xref> and allows all <MadCap:variable name="General.LBPro" /> users who write Python scripts to create nearly any check for their workflow.</p>
        <p>You can create checks tailored to your specific policies and technical contexts so you don't have to wait for your specific check to be created and released by <MadCap:variable name="General.Liquibase" /> developers.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The <MadCap:variable name="General.Liquibase" />&#160;<a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Checks extension</a>, which includes all Custom Policy Check functionality, is available to <MadCap:variable name="General.Liquibase" /> Pro 4.29.0+ users. This extension is required to use the Python-based custom policy checks.</p>
        <h2>Uses</h2>
        <p><MadCap:variable name="General.Liquibase" /> provides a <MadCap:xref href="../checks/home.htm">Library of Quality Checks</MadCap:xref>, but you may find that they don't fully serve the nuanced conditions and contexts you need  to evaluate all your policy enforcement goals. Custom policy checks add the flexibility and power of Python to greatly expand your ability to parse and inspect  your <MadCap:variable name="General.changelog" />s and databases for compliance.</p>
        <h2>Security settings</h2>
        <ul>
            <li>You must enable custom policy checks. They are <b>disabled by default</b>.<ul><li>Set <code class="language-text">--checks-scripts-enabled=true</code> on the CLI or set <code class="language-text">LIQUIBASE_COMMAND_CHECKS_RUN_CHECKS_SCRIPTS_ENABLED=TRUE</code> via environment variable.</li><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is a command parameter for the <code class="language-text">checks run</code> command.</p></ul></li>
            <li>The custom policy check Python scripts can filter to specific directory paths using the <code class="language-text">--checks-scripts-paths</code> parameter, <code class="language-text">LIQUIBASE_COMMAND_CHECKS_RUN_CHECKS_SCRIPTS_PATHS</code> environment variable, and other standard methods.<ul><li>When set, the check's Python script must be in the specified path(s) to execute successfully.</li><li>If you don't set a script path, <MadCap:variable name="General.Liquibase" /> accepts any script path.</li></ul><p class="warning" MadCap:autonum="&lt;b&gt;Warning: &lt;/b&gt;">Custom policy checks are not isolated and can interact with both local file systems and network utilities like the targeted database. We recommend reviewing these checks prior to execution to ensure they only affect the intended object(s).</p></li>
        </ul>
        <h2>System Requirements and Provided Framework</h2>
        <ul>
            <li><MadCap:variable name="General.Liquibase" /> 4.29.0+ with the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks"><MadCap:variable name="General.Liquibase" /> Checks extension</a><ul><li>Download the <code class="language-text">liquibase-checks-&lt;version&gt;.jar</code> and put it in the <code class="language-text">liquibase/lib</code> directory. If you use Maven, add this dependency to your <code class="language-text">pom.xml</code> file:</li><MadCap:codeSnippet><MadCap:codeSnippetCopyButton /><MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
&lt;/dependency&gt;</MadCap:codeSnippetBody></MadCap:codeSnippet></ul></li>
            <li>JDK 17+
<ul><li>Available for Open JDK and Oracle JDK</li></ul></li>
            <li>Linux, Mac, or Windows</li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Python is not required to create custom checks in <MadCap:variable name="General.Liquibase" />, but it may be useful to test them. It is a best practice to test custom checks with Python 3.10.0+.</p>
        <table style="width: 100%; margin-left: auto; margin-right: auto;">
            <caption style="font-weight: bold;">Compatible Versions</caption>
            <col />
            <col />
            <thead>
                <tr>
                    <th>Tool</th>
                    <th>Version</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Python</td>
                    <td>3.10.14</td>
                </tr>
                <tr>
                    <td>GraalPy</td>
                    <td>24.0.0</td>
                </tr>
            </tbody>
        </table>
        <h2>Create a Custom Policy Check</h2>
        <h3>Prerequisites</h3>
        <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
        <ul>
            <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10+</a>
            </li>
            <li><MadCap:variable name="General.Liquibase" /> concepts: <MadCap:xref href="../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../command-arguments/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../inspection/snapshot.html">snapshots</MadCap:xref></li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If your check requires a snapshot of a database with hundreds or thousands of objects, this will take time and impact performance.</p>
            <li>Optional: General coding and Python best practices which will improve your check performance:</li>
            <ul>
                <li>Efficiently handling of structured data objects</li>
                <li>Effective and targeted parsing of text, objects, and SQL</li>
                <li>Using Regular Expressions and other pattern matching tools within Python</li>
            </ul>
            <li>Optional: Import and use external utility and helper files</li>
            <ul>
                <li>Using an IDE and <code class="language-shell">pip install liquibase-checks-python</code> to develop Python checks is optional, but will allow you to utilize auto-completion and auto-documentation of helper methods.</li>
                <li>
                    <MadCap:xref href="api-helper-scripts.htm">Custom Policy Check Helper Scripts</MadCap:xref>
                </li>
            </ul>
        </ul>
        <h3>Create a new check</h3>
        <ol>
            <li>Create a new file in your <MadCap:variable name="General.Liquibase" /> working directory. In this example, we will use this as our new file: <code class="language-text">custom-check-no-tables.py</code></li>
            <p>This file will contain the Python script that is your custom policy check.</p>
            <li>Open the new <code class="language-text">custom-check-no-tables.py</code> file and add the following custom policy check to it:</li>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">Notice the <code class="language-python">status.fired = True</code> statement. The custom policy check notifies <MadCap:variable name="General.Liquibase" /> that the check condition is met when it is set to true.</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">import liquibase_utilities as lb # this is where we are importing our liquibase_utilities helper script provided by liquibase
import sys # useful for indicating a check has been triggered

obj = lb.get_database_object() # this gets the database object the liquibase policy check is examining
status = lb.get_status() # this gets the status object of the liquibase check, used for reporting status and messages from the custom policy check

if lb.is_table(obj): # function provided from liquibase utilities
	status.fired = True # indicates the custom check has been triggered
	status.message = "No tables allowed!" # set the message of the custom check, which liquibase will return
	sys.exit(1) # exit from the check</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you're new to Python, it is a best practice to read the <a href="https://docs.python.org/3/library/distribution.html">official Python tutorials</a> before making custom checks.</p>
            <li>In the CLI, run this command to <b>initiate the customization process</b>:</li><pre><code class="language-text">liquibase checks customize --check-name=CustomCheckTemplate</code></pre>
            <p>In the CLI, a message displays:</p><pre><code class="language-text">This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
            <p><MadCap:variable name="General.Liquibase" /> will then create a copy of this check and initiate the customization workflow. Your next step will be to give your check a short name for easier identification. In this example, we will name the check <code class="language-text">CustomCheckNoTables</code>.</p>
            <p>The new check <code class="language-text">CustomCheckNoTables</code> is created from <code class="language-text">CustomCheckTemplate</code> successfully.</p>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The new check short name <code class="language-text">CustomCheckNoTables</code> and all of its associated information comes from the Python script you created. Your company may have their own coding standards that these scripts must adhere to.</p>
        </ol>
        <h3>Customize your new check</h3>
        <ol>
            <li>In the CLI, set the <b>severity</b> to return a code of 0-4 when triggered. In this example, we will set the severity to <code class="language-text">1</code>. Options:</li>
            <MadCap:snippetBlock src="../../../Z_Resources/Snippets/def/attributes/cli/quality-checks/cli-checks-severity-customization.flsnp" />
            <li>In the CLI, set the <b>script description</b> for the custom check. In this example we will set the description to:</li><pre><code class="language-text">This script looks to see if any tables exist and notifies you if one is detected.</code></pre>
            <li>In the CLI, set the <b>script scope</b> for the custom check. In this example we will set it to <code class="language-text">database</code>. Options for scope:</li>
            <ul>
                <li><code class="language-text">changelog</code>: This scope indicates the check reviews all current <MadCap:variable name="General.changeset" />s. Set the <code class="language-text">checks-scope</code> to <code class="language-text">changelog</code> when your check will inspect and trigger based on conditions or actions determined in a <MadCap:variable name="General.changeset" />.
				<li><code class="language-text">database</code>: This scope indicates the check runs once for each database object. Set the <code class="language-text">checks-scope</code> to <code class="language-text">database</code> when your check will inspect and trigger based on the existing state of a database schema. This can mean you're looking for the presence of keys, indexes, or table name patterns.</li><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">We recommend creating customized checks that are single-scoped for <code class="language-text">changelog</code>&#160;<b>or</b>&#160;<code class="language-text">database</code>, but not both.</p></li>
            </ul>
            <li>
                <p>In the CLI, set the <b>script message</b>. This message will display when the check is triggered. In this example we will leave this blank, as we are handling the message in the script.</p>
                <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Option for advanced users:</b> You can create <MadCap:xref href="status-message-variable.htm">Script Message Variables for Custom Policy Checks</MadCap:xref> which are identified in your Python script.</p>
            </li>
            <li>In the CLI, set the <b>script type</b>. In <MadCap:variable name="General.LBPro" /> 4.29.0, Python is the only available script type.</li>
            <li>Set the <b>script path</b>. This is the relative path where your script is stored, whether it is stored locally or in a repository.</li>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">It is a best practice to store all of your scripts in the same folder for easy access.</p>
            <p>In this example, we will set the path to <code class="language-text">Scripts/custom-check-no-tables.py</code>.</p>
            <li>Set the <b>script argument</b>. This is a way for you to pass dynamic information into the custom policy check without modifying the Python code. The script arguments allow your Python scripts remain reusable with different variables.</li>
            <li>Set whether the check requires a <b><MadCap:xref href="../../inspection/snapshot.html">snapshot</MadCap:xref></b>:</li><pre><code class="language-text">REQUIRES_SNAPSHOT (options: true, false) [false]:</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You may need to query the database if the <MadCap:variable name="General.changelog" /> requires a snapshot. Requiring a snapshot calls for a database connection and impacts performance. It can take time to process if your database has hundreds or thousands of objects.</p>
            <li><b>Enable</b> your configured custom check by running this in the CLI:</li><pre xml:space="preserve"><code class="language-text">liquibase checks run --check-name=CustomCheckNoTables --checks-scope=database --checks-scripts-enabled=true</code></pre>
        </ol>
        <p>You have successfully created and customized a policy check!</p>
    </body>
</html>