<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Custom Policy Checks</h1>
        <p>Custom Policy Checks enable the creation of any kind of check  that matches your needs via python scripts. This feature expands the <MadCap:variable name="General.Liquibase" /> checks horizon and allows all <MadCap:variable name="General.LBPro" /> users who write Python scripts to create any check for the workflow at hand. You are empowered to create checks tailored to your procedures so you don't have to wait for your specific check to be created. Virtual Environments can even be used to craft your Python scripts.</p>
        <h2>Uses</h2>
        <p>If our library of <MadCap:xref href="checks/home.htm">Quality Checks</MadCap:xref>, including the regex checks, do not allow you to parse the information you need from your <MadCap:variable name="General.changelog" />s and/or databases, you will want to create your own custom Policy Check. For example, you are performing an insert, update, or merge you can ensure that numbers are not being put into var char columns by placing a flag with a custom policy check. This feature will parse out the insert and update statements and then it determines if those statements are placed into a specific column.</p>
        <h2>Create a Custom Policy Check</h2>
        <h3>Prerequisites</h3>
        <ul>
            <li>Before creating a custom policy check we recommend being familiar with:<ul><li> Python</li><li><MadCap:variable name="General.Liquibase" /> concepts such as <MadCap:xref href="../inspection/snapshot.html">snapshot</MadCap:xref></li><li>In certain scenarios you will&#160;also need to be familiar with SQL&#160;parsing and REGEX</li><li><b>Insert Helper Commands here (This will need to be a separate doc page.)</b></li></ul></li>
            <li>It is important to note that database checks look at JSON&#160;objects and Changelog checks look at sql patterns.</li>
        </ul>
        <h3>Step-by-step Guide</h3>
        <ol>
            <li>Once you have familiarized yourself with the Prerequisites noted on this page you will create a Python script that contains the custom policy check. <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">We recommend using these tutorials if you are new to Python.
<b>(Insert Link Here)</b><![CDATA[			]]></p></li>
            <li>
                <p>Run this command in the CLI: <pre>liquibase checks customize --check-name=CustomCheckTemplate</pre></p>
            </li>
            <li>You will see that this check cannot be customized directly because one or more fields does not have a default value. <MadCap:variable name="General.Liquibase" /> will then create a copy of this check and initiate the customization workflow. Your next step will be to give your check a short name for easier identification. In this example we will name the check <code>NoDeleteWithoutWhere</code>.<br />The new check <code>NoDeleteWithoutWhere</code> is created from <code>CustomCheckTemplate</code> successfully.<p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The new check short name <code>NoDeleteWithoutWhere</code> and all of it's associated information comes from the Python script you created. Your company may have their own coding standards that these scripts must adhere to.</p></li>
            <li>Set the Severity to return a code of 0-4 when triggered. In this example we will set the severity to <code>1</code>.<br />Options:</li>
            <MadCap:snippetBlock src="../../Z_Resources/Snippets/def/attributes/cli/quality-checks/cli-checks-severity-customization.flsnp" />
            <li>Set the script description for the custom check. In this example we will set the description to <code>NoDeleteWithoutWhere</code>.<br /></li>
            <li>Set the script scope for the custom check. In this example we will set it to <code><MadCap:variable name="General.changelog" /></code>.<br />Optional scope:<br></br></li>
            <ul>
                <li><code class="language-text">changelog</code>
                    <li><code class="language-text">database</code>
                    </li>
                </li>
            </ul>
            <li>Set the script message. This message will deisplay when the check is triggered. In this example we will set the message to:<br />All <code>DELETE</code>&#160;statements must have a <code>WHERE</code>&#160;clause.</li>
            <li>Set the script type.<b>?</b></li>
            <li>Set the script path. <br />We </li>
        </ol>
        <p>Same experience as other checks, just new fields, such as SCRIPT_PATH to specify a path to a user-provided script, which performs the actual check.</p>
        <p>Essentially, the python script at SCRIPT_PATH is called by the custom check, and it returns either TRUE or FALSE (or status.fired=TRUE, status.fired=FALSE) to liquibase to indicate the check has triggered or not. The check is just like a traditional check in that there is a name, description, severity/return code, and message.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Technical requirements: Users must have JDK 17+, and the graalpy jar, etc.</p>
        <h3>Security settings</h3>
        <p>Customizing policy checks is optional and OFF by default</p>
        <p>master switch: <code>--checks-scripts-enabled</code></p>
        <p>or <code>LIQUIBASE_COMMAND_CHECKS_RUN_CUSTOM_CHECKS_ENABLED=true|false</code>, etc</p>
        <p>Customized policy checks only apply to <code>checks run</code> so that you can set up checks etc before you use them.</p>
        <p>restrict scripts to a certain path: <code>--checks-scripts-paths</code></p>
        <h3>System Requirements and Provided Framework</h3>
        <ul>
            <li>
                <p>JDK 17+</p>
            </li>
            <li>
                <p>Open JDK</p>
            </li>
            <li>
                <p>Oracle JDK</p>
            </li>
            <li>
                <p>Linux, Mac, or Windows</p>
            </li>
            <li>
                <p>Liquibase 4.29.0 (TBD)</p>
            </li>
            <li>
                <p>Oracle GraalPy framework is included, you will not need to install it manually</p>
            </li>
        </ul>
        <h3>Virtual Environment Options</h3>
        <p>You  can use the provided VENV that is part of the <MadCap:variable name="General.LBPro" /> release or your own python VENV. If you need to utilize your own VENV you will need to download and use the GraalPy CLI&#160;tool. This VENV&#160;is stored in a drectory on your local file system.<br /></p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is only reccommended to users who are familar with building and deploying Python virtual environments.</p>
        <ul>
            <li>Python scripts can be stored anywhere text files are stored including:&#160;CWD, local paths, S3, or the GitHub extension, etc. </li>
        </ul>
    </body>
</html>