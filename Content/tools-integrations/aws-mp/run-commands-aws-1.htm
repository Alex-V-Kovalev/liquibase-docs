<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/tools-integrations/aws-mp/run-commands-aws.html" />
        <meta name="description" content="This page teaches you how to run Liquibase commands on AWS Marketplace." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Run <MadCap:variable name="General.Liquibase" /> Commands on AWS Using AWS&#160;Fargate</h1>
        <p>This guide covers how to quickly, dependably deploy containerized applications from your GitHub repository. Developers set up a continuous delivery pipeline by deploying container workloads with the Amazon Elastic Container Service (ECS)&#160;and Elastic Container Registry (ECR)&#160;GitHub actions. Before getting started, you should be familiar with: <br /></p>
        <ul>
            <li><a href="https://github.com/about">GitHub</a>
            </li>
            <li><a href="https://github.com/features/actions">GitHub Actions</a>
            </li>
            <li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html">AWS&#160;ECS</a>
            </li>
            <li><a href="https://aws.amazon.com/ecr/">Amazon ECR</a>
            </li>
            <li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html#:~:text=AWS Fargate is a technology,virtual machines to run containers.">AWS&#160;Fargate</a>
            </li>
        </ul>
        <p>GitHub allows developers to implement version control, host, and oversee their code repositories. GitHub Actions are tools you can implement on GitHub that allow you to set up continuous delivery pipelines. The two GitHub actions that we want to focus on are Amazon ECS&#160;and AWS Fargate. Amazon ECS is a container orchestrator that oversees a cluster of multiple EC2 instances, enabling you to start, configure, scale, network, and secure multiple containers while also handling the administrative tasks of managing resource utilization for the cluster. If you prefer a streamlined experience that does not manage resource utilization, you can use AWS&#160;Fargate which allows you to start, configure, scale, network, and secure containers in the same way. All of these tools allow you to dependably deploy containerized applications from your GitHub repository. Follow the steps below to set up your workflow.<br /></p>
        <h2>Step-by-step</h2>
        <ol>
            <li> Set up and configure the AWS CLI by follow these instructions: <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">Installing or updating to the latest version of the AWS&#160;CLI</a></li>
            <li>Configure Amazon ECR<ol><li>Create an ECR repository with a command like the one below. Replace <code>my-ecr-repo</code> with the name of your repo  and the region is <code>us-west-2</code>:</li></ol></li>
            <p><code>aws ecr create-repository --repository-name my-ecr-repo --region us-west-2</code>
            </p>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Follow the <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_GetStarted.html">Getting started with ECR guide</a> for more options.</p>
            <ol start="3">
                <li>Create your task definition file<ol start="1"><li>Create a directory for your project:</li></ol></li>
                <p><code>mkdir FargateActionDemo &amp;&amp; cd./FargateActionDemo</code>
                </p>
                <li>Create the task definition file task-def.json: Here is a sample task definition:<br /></li>
            </ol>
        </ol>
    </body>
</html>