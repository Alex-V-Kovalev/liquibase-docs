<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1><code>liquibase flow</code> file and command <img src="../../Z_Resources/Images/Icons/Icon_Labs.png" style="vertical-align: middle;width: 7%" /></h1>
        <p>The <code>liqubase flow</code> command and the Flow File on which it operates lets the user put multiple commands in a single file so they can all run sequentially by typing a single command into the CLI.  The flow command  provides the convenience of performing all of the steps in one place. This leads to better repeatability and standardization of the steps in a DevOps pipeline.</p>
        <p> You only need to use the <code>liquibase flow</code> command to perform all actions specified in Jenkins, GitHub actions, or any CI/CD&#160;support tool. Users can modify the Flow File  to update the <MadCap:variable name="General.Liquibase" /> steps specified in each Stage. You only have to update them in the Flow File to bring all jobs up to date. This is especially convenient when Flow Files are stored in remote locations or shared across teams.</p>
        <h2>Create a Flow File</h2>
        <p>There are two ways to create a Flow File:</p>
        <ol>
            <li>The Default Flow File method, which runs on H2 by default</li>
            <li>The Existing Project method</li>
        </ol>
        <p>The Flow File is not installed by default, so you must create one.  If you create a Flow File without a properties file or a <MadCap:variable name="General.changelog" /> configured, it will fail to run.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <h3>Default Flow File method</h3>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This method is for creating an entirely new project. To create a default Flow File, users must start H2. </p>
                <ol>
                    <li>From the CLI, navigate to the appropriate <MadCap:variable name="General.Liquibase" /> directory and run <code>liquibase init start-h2</code> to start the H2 database shipped with <MadCap:variable name="General.Liquibase" />.</li>
                    <li>From a different terminal window, run <code>liquibase init project</code> to create a new project.</li>
                    <li> <MadCap:variable name="General.Liquibase" /> will prompt you to create a <MadCap:variable name="General.changelog" />. Enter <code>Y</code> to confirm.</li>
                    <li>Enter <code>ls</code> to list what files are available in your current directory. You will see that the <code>example-changelog.sql</code> and <code><MadCap:variable name="General.liquiPropFile" /></code> files are available.</li>
                    <li>Run the <code>liquibase flow</code> command.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will prompt you to create a Flow File. From the three options available, enter <code>1</code>. The file will be created and validated successfully.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will try to run <code>checks run</code>, but displays a warning:</li>
                    <p><code class="language-text">Checks executed against H2 generated SQL, which may not contain certain objects. liquibase.checks-settings.conf does not exist.
Would you like to create it? (Y/N):</code>
                    </p>
                    <li>Enter <code>Y</code> to create a checks configuration file.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will ask the following question. Enter the desired result:</li>
                    <p><code class="language-text">Do you want to see this operation's report in <MadCap:variable name="General.Hub" />, which improves team collaboration? If so, enter your email. If not, enter N to no longer be prompted, or S to skip for now, but ask again next time.</code>
                    </p>
                    <li>The <code>update</code> command executes successfully. You can see in the example below the Stages ran in the same order displayed in the Flow File.</li>
                </ol>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <h3>Existing project method</h3>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This method is for users who have a current project that already has a <MadCap:variable name="General.changelog" /> and properties file configured.</p>
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The first time users run <code>flow</code> this way, the Flow File will fail because it will not be configured in the way the default Flow File is initially.</p>
                <ol>
                    <li>From the CLI, navigate to the appropriate <MadCap:variable name="General.CompanyName" /> directory and run <code>liquibase init start-h2</code> to establish the H2 connection.</li>
                    <li>Enter <code>ls</code> to list what files are available in your current directory. You will need a <MadCap:variable name="General.changelog" /> and properties file available to continue.</li>
                    <li>Run the <code>liquibase flow</code> command.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will prompt you to create a Flow File. From the three options available, enter <code>1</code>. The file will be created and validated successfully.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will try to run <code>checks run</code>, but displays a warning:</li>
                    <p><code class="language-text">Checks executed against H2 generated SQL, which may not contain certain objects. liquibase.checks-settings.conf does not exist.
Would you like to create it? (Y/N):</code>
                    </p>
                    <li>Enter <code>Y</code> to create a checks configuration file.</li>
                    <li><MadCap:variable name="General.Liquibase" /> will ask the following question. Enter the desired result:</li>
                    <p><code class="language-text">Do you want to see this operation's report in <MadCap:variable name="General.Hub" />, which improves team collaboration? If so, enter your email. If not, enter N to no longer be prompted, or S to skip for now, but ask again next time.</code>
                    </p>
                    <li>The <code>update</code> command executes successfully. You can see in the example below the Stages ran in the same order displayed in the Flow File.</li>
                </ol>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>Validation</h3>
        <p>Once the Flow File is written, you can verify that it works by using the <code>flow validate</code> command. This ensures that the <MadCap:variable name="General.Liquibase" /> commands have all of the parameters necessary to run successfully and the YAML formatting is correct. See the <a href="#Syntax">Syntax</a> section for more information.</p>
        <p>Run <code>flow validate --flow-file update-status-diff.flow</code> in the CLI.</p>
        <p>If the file fails the validation check, <MadCap:variable name="General.Liquibase" /> will state what command argument(s) were not resolved. You can then review and correct your Flow File and then run the <code>flow validate</code> command again to ensure it is working as expected.</p>
        <h2>Flow File organization</h2>
        <p>The Flow File has Stages that contain Actions. The three Actions sections, which include <code>actions</code>, <code>afterActions</code>, and <code>endStage</code>, contain all commands that run when <code>liqubase flow</code> executes. Any <MadCap:variable name="General.Liquibase" /> command arguments (abbreviated as <code>cmdArgs</code> in the Flow File) can be placed in any Stage Action section, with the exception of the list of global arguments below.</p>
        <p>After Stage, <code>afterActions</code> occur if there are no errors in any previous actions. Common command arguments included here are <code>cleanup</code>, <code>status</code>, and <code>history</code> so they always occur after the initial Actions run. Once <code>afterActions</code> runs, the <code>endStage</code> section runs. If the Flow File contains any errors, <MadCap:variable name="General.Liquibase" /> fails and exits.</p>
        <h3>Incompatible commands and global arguments</h3>
        <p>You must use the following commands and global arguments in the CLI instead of the Flow File:</p>
        <h4>Commands</h4>
        <ul>
            <li><code>init start-h2</code> – This command locks the console</li>
        </ul>
        <h4>Global arguments</h4>
        <ul>
            <li><code>ARGUMENT_CONVERTER</code>
            </li>
            <li><code>CLASSPATH</code>
            </li>
            <li><code>DEFAULTS_FILE</code>
            </li>
            <li><code>INCLUDE_SYSTEM_CLASSPATH</code>
            </li>
            <li><code>LOG_CHANNELS</code>
            </li>
            <li><code>LOG_FILE</code>
            </li>
            <li><code>LOG_LEVEL</code>
            </li>
            <li><code>MONITOR_PERFORMANCE</code>
            </li>
            <li><code>PROMPT_FOR_NON_LOCAL_DATABASE</code>
            </li>
            <li><code>SEARCHPATH</code>
            </li>
            <li><code>SHOULD_RUN</code>
            </li>
            <li><code>SHOW_BANNER</code>
            </li>
        </ul>
        <h3><a name="Syntax"></a>Syntax</h3>
        <p>The <MadCap:variable name="General.Liquibase" /> Flow File is written in YAML and must be formatted properly. As you can see in the below Flow File example, the cmdArgs section has all commands between curly braces and separated by commas. </p>
        <p>All command arguments are formatted in the following way:<br /><code>cmdArgs: {command-name: argument value, snapshot-format: JSON}</code></p>
        <p>Command arguments that are referencing the Connection Profile are formatted in the following way:<br /></p><code>cmdArgs:{url: "${postgresNamespace.url}", user:&#160;"${postgresNamespace.user}"}</code>
        <p>This example Flow File is the simplest scenario in which only cmdArgs are specified in the Actions. For this example to run, a liquibase.properties file with url, username and password must be available. The properties file should be in the same directory as the flow file. Additionally, the user will need a changelog file.</p>
        <h3>Flow File example</h3>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">stages:
  cleanuptheDB:
    actions:
      - type: liquibase
        command: dropAll
    afterActions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: TRUE}</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>globalVariables</h2>
        <p><code>globalVariables</code> must be defined at the top of the Flow File with the syntax shown in the example Flow File. Each Action specified in the Flow File can reference a <code>globalVariable</code> as a command argument. This saves you time and keeps your Flow File tidy.</p>
        <h3>Example globalVariable</h3><pre><code class="language-yaml">offlineRefUrl: "offline:postgres?snapshot=refSnapshot.json"</code></pre>
        <h3>Example of globalVariable in use</h3><pre><code class="language-yaml">cmdArgs: { url: "${onlineTargetUrl}"}</code></pre>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Example Flow File with globalVariables</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This flow file has <code>cmdArgs</code>, <code>globalArgs</code> and global variables. For this example, the user will need to update the <code>url</code>, <code>user</code>, and <code>password</code> variables to be valid for their environment.</p>
                <p>(Place Flow File text here once the YAML formatting can be preserved.)</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>stageVariables</h2>
        <p><code>stageVariables</code> work exactly like <code>globalVariables</code> except they are declared inside of each stage group. If you have the same variable declared as a <code>globalVariable</code>, the <code>stageVariables</code> are applied, not the <code>globalVariable</code>. For example, if you have a <MadCap:variable name="General.changelog" />&#160;<code>globalVariable</code> but need to specify a different <MadCap:variable name="General.changelog" />, you can apply that via a <code>stageVariable</code>. <code>stageVariables</code> always override <code>globalVariables</code>.</p>
        <p>All variables, especially labels and context, must be specified in the Flow File with quotations to operate properly. If you want to run all <MadCap:variable name="General.changeset" />s with or without labels, you must leave the label names quotes empty so you do not have to list all labels individually.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>Label Example 1</MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">Default:
    stageVariables:
      LABELNAMES: ""</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>Label Example 2</MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">#
# Run the update
#
- type: liquibase
  command: update
  cmdArgs: {labels: "${LABELNAMES}"}</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Include configured YAML files within a Flow File</h2>
        <p>Flow Files can include references to other yaml files with configuration by using the include section of the file. You need only create a variable name for the referenced YAML file and then reference the file title so that the Flow File can locate it.</p>
        <h3>The <code>include</code> variable should be in the following format:</h3><pre><code class="language-text">username: actual-Username</code></pre>
        <p>The key is <code>username</code> and the value is <code>actual-Username</code>. To use the values defined in the included file in the Flow File, you need to reference the namespace and the key. For example:</p><pre><code class="language-yaml">cmdArgs: {username: "${postgresNamespace.user}"}</code></pre>
        <p>When the <code>flow</code> command executes, it will read the included file, locate the username key and substitute the value for that key into the Liquibase action. In the case of the <code>key:value</code> example here, the substitution results in <code>${postgresNamespace.user}</code> becoming <code>actual-Username</code>. The <MadCap:variable name="General.Liquibase" /> action executes using <code>actual-Username</code> as the user property.</p>
        <h3>Example of Flow File include functionality:</h3><pre><code class="language-yaml">include:
- postgresNamespace: postgres-vars.yaml</code></pre>
        <p>To enable the functionality, you will then add the created variable name to the <code>cmdArgs</code> section or your <MadCap:variable name="General.changelog" />.</p><pre><code class="language-yaml">cmdArgs: { url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}</code></pre>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Example Flow File includes cmdArgs, globalArgs, and a referenced include file(YAML)</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption><code>flow-with-include-global</code>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">##########           LIQUIBASE FLOW FILE               ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## NOTE: This is an advanced example flowfile, compared to the other sample at examples/liquibase.flowfile.yaml
## Advanced options show in this file include:
## non-default name of 'liquibase.advanced.flow' (use by setting flowfile property to this name)
#### example for CLI: liquibase flow --flow-file=liquibase.advanced.flow
#### example for ENV Var: LIQUIBASE_FLOW_FLOW_FILE=liquibase.advanced.flow
## use of 'include' to inject namespaced yaml files of key:val variables
## use of globalVariables and stageVariables
## use of globalArgs and cmdArgs
## use of property substitution
## use of a nested flowfile (in this case in the endStage, but could be elsewhere)

## Bring in and namespace an external file with yaml 'key: val' pairs for use in this file
## The variables will be used as ${namespace.variablename}, seen in this example as $(DATES.THISDATE)
include:
  DATES: liquibase.flowvariables.yaml

## Set up some global variables for property substitution in ANY stage
globalVariables:
  PROJNAME: "MyFlowProject"

## Start the stages. There can be more than one, if desired.
stages:  
  
  ## The first stage. There can be more than one if desired.
  stage1:

    ## set up vars for property substitution in THIS stage only
    stageVariables:
      VERBOSESTATE: TRUE

    actions:
    
   #
   # Do a validate command 
   #
    - type: liquibase
      command: validate

   #
   # tell me what is pending a deployment
   #
    - type: liquibase
      command: status
      cmdArgs: {verbose: "${VERBOSESTATE}"}

   #
   # And then save a version in detail
   #
    - type: liquibase
      command: updatesql
      globalArgs: {outputfile: "${PROJNAME}-${DATES.THISDATE}-updatesql.log"}

   #
   # Quality Checks for changelog 
   #
    - type: liquibase
      command: checks run
      cmdArgs: {checks-scope: changelog}
   #
   # Run update
   #
    - type: liquibase
      command: update
      
   #
   # Quality Checks for database
   #
    - type: liquibase
      command: checks run
      cmdArgs: {checks-scope: database}
    
    ## Put your clean up and other actions for this stage in the afterActions
    afterActions:
    - type: liquibase
      command: history
      globalArgs: {outputfile: "${PROJNAME}-${DATES.THISDATE}-history.log"}

## Put your clean up and other actions for after success in all stage(s) above in the endStage
endStage:
  actions:
    - type: liquibase
      command: flow
      cmdArgs: {flowfile: liquibase.endstage.flow}
      
  afterActions: null</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>