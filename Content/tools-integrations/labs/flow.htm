<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Z_Resources/Stylesheets/TableStyles.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1><code>liquibase flow</code> File and Command <img src="../../Z_Resources/Images/Icons/Icon_Labs.png" style="vertical-align: middle;width: 7%" /></h1>
        <p>&#160;</p>
        <p>The <code>liqubase flow</code> command and the Flow File on which it operates allows the user to place multiple commands within a single file so they can all run sequentially by typing a single command into the CLI.  The flow command  provides the convenience of performing all of the steps in one place. This leads to better repeatability and standardization of the steps in a DevOps pipeline.</p>
        <p> You only need to use the <code>liquibase flow</code> command to perform all actions specified in Jenkins, GitHub actions, or any CI/CD&#160;support tool of your choosing. Users can modify the Flow File  to update the Liquibase steps specified in each Stage. You only have to update them in the Flow File to bring all jobs up to date. This is especially convenient when Flow Files are stored in remote locations or shared across teams.</p>
        <h2>Flow File Operation</h2>
        <p>There are two ways to create a Flow File. One is the Default Flow File method, which runs on h2 by default, and the Existing Project method. It's important to note that the file is not installed by default so the Flow File must be created.  If a Flow File is created without a Connection Profile or a changelog configured, it will fail to run. This is why h2 is necessary with the Default File Method.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <h3>Default Flow File Method</h3>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This method is for creating an entirely new project. To create a default Flow File, users must start h2. </p>
                <p>1. From the CLI, navigate to the appropriate <MadCap:variable name="General.CompanyName" /> directory and run <code>liquibase init start-h2</code> to start the H2 database shipped with <MadCap:variable name="General.CompanyName" />.</p>
                <p>2. From a different terminal window, run <code>liquibase init project</code> to create a new project.</p>
                <p>3. Liquibase will prompt you to create a changelog and you will type Y to confirm.</p>
                <p>4. Type <code>ls</code> to list what files are available in your current directory. You will see that the example-changelog.sql and liquibase.properties files are available.</p>
                <p>5. Run the <code>liquibase flow</code> command.</p>
                <p>6. Liquibase will prompt you to create a Flow File. From the three options available, type 1.</p>
                <p>The file is created and validated successfully. </p>
                <p>7. You will notice in the CLI that liquibase tried to run checks run but there is a warning that says:</p>
                <p>Checks executed against H2 generated SQL, which may not contain certain objects. liquibase.checks-settings.conf does not exist.<br />Would you like to create it?&#160;(Y/N):</p>
                <p>8. Type Y to create a checks configuration file.</p>
                <p>9. Liquibase will ask the question below. Type the desired result in the CLI.<br />Do you want to see this operation's report in <MadCap:variable name="General.Hub" />, which improves team collaboration?&#160;If so, enter your email. If not, enter N&#160;to no longer be prompted, or S to skip for now, but ask again next time.</p>
                <p>10. liquibase update executes successfully. You can see in the example below the Stages ran in the same order displayed in the Flow File.</p>
                <p>&#160;</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <h3>Existing Project Method</h3>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This method is for users who have a current project that already has a changelog and Connection Profile configured. It's important to note that the first time users run flow in this manner, the Flow File will fail because it will not be configured in the way the default Flow File is initially.</p>
                <p>1. From the CLI, navigate to the appropriate <MadCap:variable name="General.CompanyName"></MadCap:variable> directory and run <code>liquibase init start-h2</code> to establish the h2 connection.</p>
                <p>2. Type <code>ls</code> to list what files are available in your current directory. You will need a changelog and Connection Profile available to continue with this process.</p>
                <p>3. Run the <code>liquibase flow</code> command.</p>
                <p>4. Liquibase will prompt you to create a Flow File. From the three options available, type 1.</p>
                <p>The file is created and validated successfully. </p>
                <p>5. You will notice in the CLI that liquibase tried to run checks run but there is a warning that says:</p>
                <p>Checks executed against H2 generated SQL, which may not contain certain objects. liquibase.checks-settings.conf does not exist.<br></br>Would you like to create it?&#160;(Y/N):</p>
                <p>6. Type Y to create a checks configuration file.</p>
                <p>7. Liquibase will ask the question below. Type the desired result in the CLI.<br></br>Do you want to see this operation's report in <MadCap:variable name="General.Hub"></MadCap:variable>, which improves team collaboration?&#160;If so, enter your email. If not, enter N&#160;to no longer be prompted, or S to skip for now, but ask again next time.</p>
                <p>8. liquibase update executes successfully. You can see in the example below the Stages ran in the same order displayed in the Flow File.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>After Flow File is successfully written</h3>
        <p>Once the Flow File is written, we suggest running the <code>flow validate</code> command. This ensures that the <MadCap:variable name="General.Liquibase" /> commands have all of the parameters necessary to run successfully and the yaml formatting is correct. It is important to note that all core Liquibase commands and the range may vary with extensions that extend said core commands. Find the syntax rules for yaml below on this page.</p>
        <p>Run <code>flow validate --flow-file update-status-diff.flow</code> in the CLI.</p>
        <p>If the file fails the validation check, <MadCap:variable name="General.CompanyName" /> will state what command argument(s) were not resolved. You can then review and correct your Flow File and then run the <code>flow validate</code> command again to ensure it is working as expected.</p>
        <h2>How is the Flow File organized?</h2>
        <p>Within the Flow File you will notice there are Stages that contain Actions. The three Actions sections which include actions, afterActions, and endStage contain all commands that run when <code>liqubase flow</code> executes. Any <MadCap:variable name="General.Liquibase" /> command arguments, abbreviated as <code>cmdArgs</code> in the Flow File, can be placed in any Stage Action section with the exception of the list of global arguments below.</p>
        <p>After Stage, afterActions occur if there are no errors in the actions preceding them. Common command arguments included here are cleanup, status, and history so they always occur after the initial Actions run. Once afterActions runs, the endStage section runs. If there are errors within any section in the Flow File, <MadCap:variable name="General.Liquibase" /> will fail and exit.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <h3>The following list of one Command and Global Arguments that cannot be set in the Flow File.</h3>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <table style="mc-table-style: url('../../Z_Resources/Stylesheets/TableStyles.css');margin-left: auto;margin-right: auto;" class="TableStyle-TableStyles" cellspacing="0">
                    <col class="TableStyle-TableStyles-Column-Column1" style="width: 300px;" />
                    <thead>
                        <tr class="TableStyle-TableStyles-Head-Header1">
                            <th class="TableStyle-TableStyles-HeadD-Column1-Header1">Command</th>
                        </tr>
                        <tr class="TableStyle-TableStyles-Head-Header1">
                            <th class="TableStyle-TableStyles-HeadD-Column1-Header1">
                                <p><code style="font-weight: normal;">init start-h2</code>
                                </p>
                                <p>This command locks the console.</p>
                            </th>
                        </tr>
                        <tr class="TableStyle-TableStyles-Head-Header1">
                            <th class="TableStyle-TableStyles-HeadD-Column1-Header1">Global Arguments that must be specified in the CLI</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>CLASSPATH</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body2"><code>PROMPT_FOR_NON_LOCAL_DATABASE</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>INCLUDE_SYSTEM_CLASSPATH</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body2"><code>DEFAULTS_FILE</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>LOG_LEVEL</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body2"><code>LOG_CHANNELS</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>LOG_FILE</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body2"><code>SEARCHPATH</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>SHOULD_RUN</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body2"><code>ARGUMENT_CONVERTER</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body1">
                            <td class="TableStyle-TableStyles-BodyD-Column1-Body1"><code>MONITOR_PERFORMANCE</code>
                            </td>
                        </tr>
                        <tr class="TableStyle-TableStyles-Body-Body2">
                            <td class="TableStyle-TableStyles-BodyA-Column1-Body2"><code>SHOW_BANNER</code>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
        <h2>Syntax rules for Command Arguments and Global Arguments</h2>
        <p>Below are the syntax rules for formatting the Flow File.</p>
        <p>The <MadCap:variable name="General.Liquibase" /> Flow File is written in yaml and it is essential to have all syntax correct for the Flow File to run successfully. As you can see in the below Flow File example, the cmdArgs section has all commands between curly braces and separated by commas. </p>
        <p>All command arguments are formatted in the following way:<br /><code>cmdArgs: {command-name: argument value, snapshot-format: JSON}</code></p>
        <p>Command arguments that are referencing the Connection Profile are formatted in the following way:<br /></p><code>cmdArgs:{url: "${postgresNamespace.url}", user:&#160;"${postgresNamespace.user}"}</code>
        <p>This example Flow File is the simplest scenario in which only cmdArgs are specified in the Actions. For this example to run, a liquibase.properties file with url, username and password must be available. The properties file should be in the same directory as the flow file. Additionally, the user will need a changelog file.</p>
        <p>Flow File Example:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">stages:
  fStage1:
    actions:
    - type: liquibase
      command: update-sql
      cmdArgs: {changelog-file: "product-workflow-changelog.xml"}
    - type: liquibase
      command: checks run
      cmdArgs: {checks-scope: "changelog", changelog-file: "product-workflow-changelog.xml"}
    - type: liquibase
      command: drop-all
    - type: liquibase
      command: update
      cmdArgs: {changelogfile: "product-workflow-changelog.xml"}
    - type: liquibase
      command: generate-changelog
      cmdArgs: {changelogfile: "gclc.postgres.sql"}
#
# Actions to run after the primary flow stages
#
    afterActions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: true, changelog-file: "gclc.postgres.sql"}
  endStage: 
    actions:
      - type: liquibase
        command: generate-changelog
        cmdArgs: {changelog-file: "gcle.postgres.sql", schemas: "proschema" }
      - type: liquibase
        command: checks run
        cmdArgs: {changelog-file: "product-workflow-changelog.xml"}
    afterActions:
      - type: liquibase
        command: history</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>globalVariables</h2>
        <p>globalVariables must be defined at the top of the Flow File with the syntax shown in the example Flow File. Each Action specified in the Flow File can reference a globalVariable as a command argument. This saves you time and keeps your Flow File tidy.</p>
        <h3>Example globalVariable:</h3><code>offlineRefUrl: "offline:postgres?snapshot=refSnapshot.json"</code>
        <h3>Example of globalVariable in use:</h3><code>cmdArgs: { url: "${onlineTargetUrl}"}</code>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Example Flow File with globalVariables</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This flow file has cmdArgs, globalArgs and global variables. For this example, the user will need to update the url variables, user variable and password variable to be valid for their environment.</p>
                <p>(Place Flow File text here once the yaml formatting can be preserved.)</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>stageVariables</h2>
        <p>stageVariables work exactly like a globalVariable except they are declared inside of each stage group. If you have the same variable declared as a globalVariable, the stageVariables are applied, not the globalVariable. For example, if you have a changelog globalVariable but need to specify a different changelog, you can apply that via a stageVariable. stageVariables always override globalVariables.</p>
        <p>It is important to note that all variables, in particular labels and context, must be specified in the flow file with quotations to operate properly. If you want to run all changesets with or without labels, you must leave the label names quotes empty so you do not have to list all labels individually.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>Label Example 1:</MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">Default:
    stageVariables:
      LABELNAMES: ""</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>
                <p>Label Example 2:</p>
            </MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">    #
      # Run the update
      #
      - type: liquibase
        command: update
        cmdArgs: {labels: "${LABELNAMES}"}</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Include configured YAML&#160;files within a Flow File</h2>
        <p>Flow Files can include references to other yaml files with configuration by using the include section of the file. You need only create a variable name for the referenced YAML&#160;file and then reference the file title so that the Flow File can locate it.</p>
        <h3>The <code>include</code> variable should be in the following format:</h3>
        <p>username: actual-Username.</p>
        <p>The key is “username.”</p>
        <p>The value is “actual-Username”</p>
        <p>To use the values defined in the included file in the flow file, you need to reference the namespace and the key. For example:<br /></p><code>cmdArgs: {username: "${postgresNamespace.user}"}</code>
        <p>When the <code>flow</code> command executes, it will read the included file, locate the username key and substitute the value for that key into the Liquibase action. In the case of the key:value example here, the substitution results in ${postgresNamespace.user} becoming “actual-Username.” The Liquibase action executes using the “actual-Username” as the user property.</p>
        <p>Example of Flow File include functionality:</p>
        <br /><code>include: CRLF<br /> - postgresNamespace: postgres-vars.yaml</code>
        <p>To enable the functionality, you will then add the created variable name to the cmdArgs section or your changelog.<br /></p><code>cmdArgs: { url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}</code>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Example Flow File includes cmdArgs, globalArgs, and a referenced include file(yaml).</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>flow-with-include-global</p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="True" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;"># flow-name: "ProductWorkflow with Namespaces" #
include:
  postgresNamespace: postgres-vars.props
stages:
  fStage1:
   actions:
   - type: liquibase
     command: status
     cmdArgs: {verbose: true, url: "${postgresNamespace.url}", username: "${postgresNamespace.username}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}
  changeLogChecks:
    actions:
    - type: liquibase
      command: checks run
      cmdArgs: {checks-scope: changelog, changelog-file: "${postgresNamespace.changelogFile}"}
  update:
    actions:
    - type: liquibase
      command: update-sql
      globalArgs: {output-file: updatesql.txt}
      cmdArgs: {url: "${postgresNamespace.url}", user: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}
    - type: liquibase
      command: update
      cmdArgs: {url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}
  historyPostUpdate:
    actions:
    - type: liquibase
      command: history
      cmdArgs: {url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}"}
  rollback:
    actions: 
    - type: liquibase
      command: rollback-one-changeset
      cmdArgs: {changeset-author: QA, changeset-id: 1, changeset-path: product-workflow-changelog.xml, force: true, url: "${postgresNamespace.url}", username: "${postgresNamespace.user}, password: "${postgresNamespace.password}"}
    - type: liquibase
      command: rollback-count
      cmdArgs: {count: 1, url="${postgresNamespace.url}, username: "${postgresNamespace.user}", password: "${postgresNamespace.password}", changelog-file: "${postgresNamespace.changelogFile}"}}
  databasechecks:
    actions:
    - type: liquibase
      command: checks run
      cmdArgs: { checks-scope: database, url="${postgresNamespace.url}, username: "${postgresNamespace.user}", password: "${postgresNamespace.password}"}
endStage:
  actions:
  - type: liquibase
    command: history
    cmdArgs: {url: "${postgresNamespace.url}", username: "${postgresNamespace.user}", password: "${postgresNamespace.password}"}</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
    </body>
</html>