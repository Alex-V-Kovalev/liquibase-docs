<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/tools-integrations/node-js/use-liquibase-with-node.html" />
        <meta name="description" content="Learn how to use Liquibase with the Node Package Manager (NPM)." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Use <MadCap:variable name="General.Liquibase" /> with Node.js</h1>
        <p><MadCap:variable name="General.Liquibase" /> supports a rich pool of <MadCap:xref href="../../commands/home.htm">[%=General.Liquibase%] Commands</MadCap:xref> to keep your database up-to-date, like <code>update</code>, <code>rollback</code>, and <code>diff</code>. This package exposes both a CLI tool and a Library to help you in your database migration efforts. You can use these commands with NPM as you would with <MadCap:variable name="General.Liquibase" /> by itself with the correct syntax. The NPM CLI&#160;tool is used just like <MadCap:variable name="General.Liquibase" /> with <code>node-</code> in front of all commands. This integration allows you to utilize <MadCap:variable name="General.Liquibase" /> in apps designed with JavaScript and TypeScript.</p>
        <h2>CLI Method</h2>
        <p>You can use this NPM package as a CLI tool under the namespace <code>node-liquibase</code>.</p>
        <p>To run the status command with NPM, <code>node-liquibase status</code> run in the CLI.</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#npm_bundled_example" id="label_npm_bundled_example" class="js-tablist__link">NPM Bundled Executable example</a>
                </li>
                <li class="js-tablist__item"><a href="#npm_peer_dependency_example" id="#npm_peer_dependency_example" class="js-tablist__link">NPM Executable Peer Dependency Example</a>
                </li>
            </ul>
            <div id="sql_example" class="js-tabcontent"><pre>
node-liquibase
--changeLogFile="/path/to/my/changelog.xml"
--url="jdbc:postgresql://localhost:5432/postgres"
--username="yourusername"
--password="yoursecurepassword"
--classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar"
status</pre>
            </div>
            <div id="json_example" class="js-tabcontent"><pre>
node-liquibase /Users/me/path/to/my/executable/for/liquibase
--changeLogFile="/path/to/my/changelog.xml"
--url="jdbc:postgresql://localhost:5432/postgres"
--username="yourusername"
--password="yoursecurepassword"
--classpath="/Users/me/path/to/my/db-drivers/postgresql-42.4.2.jar"
status</pre>
            </div>
        </div>
        <h2>Library Project File Method</h2>
        <p>The project file method allows you to write code in a file and then call on it in the CLI. This way you do not have to specify all of the details directly in the CLI and you can reuse the file and run the same commands more than once. </p>
        <h3>TypeScript</h3>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">import {
	LiquibaseConfig,
	Liquibase,
	POSTGRESQL_DEFAULT_CONFIG,
} from 'liquibase';

const myConfig: LiquibaseConfig = {
	...POSTGRESQL_DEFAULT_CONFIG,
	url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
	username: 'yourusername',
	password: 'yoursecurepassword',
};
const instance = new Liquibase(myConfig);

async function doEet() {
	await instance.status();
	// await instance.update();
	// await instance.dropAll();
}

doEet();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>JavaScript</h3>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">const Liquibase = require('liquibase').Liquibase;
const POSTGRESQL_DEFAULT_CONFIG = require('liquibase').POSTGRESQL_DEFAULT_CONFIG;

const myConfig = {
  ...POSTGRESQL_DEFAULT_CONFIG,
  changeLogFile: './changelog.xml',
  url: 'jdbc:postgresql://localhost:5432/node_liquibase_testing',
  username: 'yourusername',
  password: 'yoursecurepassword',
}
const instTs = new Liquibase(myConfig);

instTs.status();</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Related Links</h2>
        <ul>
            <li><a href="https://docs.chocolatey.org/en-us/">NPM&#160;Documentation</a>
            </li>
            <li><a href="https://www.npmjs.com/package/liquibase#installation">NodeJS and <MadCap:variable name="General.Liquibase" /></a>
            </li>
            <li><a href="https://github.com/liquibase/node-liquibase?tab=readme-ov-file#want-to-help">Contribute to this feature here</a>
            </li>
        </ul>
    </body>
</html>